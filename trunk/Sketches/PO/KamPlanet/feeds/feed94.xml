<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' version='2.0'><channel><atom:id>tag:blogger.com,1999:blog-10678074</atom:id><lastBuildDate>Mon, 09 Jun 2008 08:00:38 +0000</lastBuildDate><title>making games, making webs.</title><description/><link>http://renesd.blogspot.com/</link><managingEditor>noreply@blogger.com (illume)</managingEditor><generator>Blogger</generator><openSearch:totalResults>114</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-526488297513136824</guid><pubDate>Sat, 31 May 2008 09:36:00 +0000</pubDate><atom:updated>2008-06-02T01:52:42.206+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>buildout</category><category domain='http://www.blogger.com/atom/ns#'>howto</category><category domain='http://www.blogger.com/atom/ns#'>tutorial</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>buildout tutorial.  buildout howto.  buildout review.</title><description>This post is a review, a tutorial, and a howto - for and about buildout - a software development tool for the python language.&lt;br /&gt;&lt;br /&gt;This document aims to answer the question... "&lt;b&gt;&lt;i&gt;buildout? WTF?&lt;/i&gt;&lt;/b&gt;".&lt;br /&gt;&lt;br /&gt;In short: buildout automates python project building.  Buildout does everything needed to get your application in a state for running in its own sandbox.&lt;br /&gt;&lt;h4&gt;Super quick start instructions for using buildout...&lt;/h4&gt;&lt;li&gt;get the source from &lt;a href="http://pypi.python.org/pypi/zc.buildout"&gt;http://pypi.python.org/pypi/zc.buildout&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Make a new directory for your project, then copy the bootstrap/bootstrap.py file out of the zc.buildout source into your new project directory&lt;/li&gt;&lt;li&gt;create a "buildout.cfg" file to go with the bootstrap.py file.  Here is a simple one for your package called "YOURPACKAGENAME":&lt;br /&gt;&lt;/li&gt;&lt;pre&gt;[buildout]&lt;br /&gt;parts = test py&lt;br /&gt;develop = .&lt;br /&gt;&lt;br /&gt;[test]&lt;br /&gt;recipe = zc.recipe.testrunner&lt;br /&gt;eggs = YOURPACKAGENAME&lt;br /&gt;&lt;/pre&gt;&lt;li&gt;Run "python bootstrap.py" in your empty project directory(with the buildout.cfg file in there).  This will get buildout locally into your sandbox ready to use - without touching the rest of your python installation.&lt;/li&gt;&lt;li&gt;Now you have a basic setup for "building out" your application.&lt;br /&gt;&lt;/li&gt;&lt;br /&gt;&lt;h4&gt;What is buildout?&lt;/h4&gt;"The Buildout project provides support for creating applications, especially Python applications. It provides tools for assembling applications from multiple parts, Python or otherwise. An application may actually contain multiple programs, processes, and configuration settings."&lt;br /&gt;&lt;h4&gt;Why should I care about buildout?&lt;/h4&gt;Automation of building your applications is what buildout is about.&lt;br /&gt;&lt;br /&gt;To be able to build your application easily on multiple machines, you don't want to have to install and setup 38 different programs before you can build it.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Buildout keeps your project separate from the main python setup.  So it doesn't install things into the main python distribution.  This is good because it keeps separate applications mucking each other up.  It's also good so you don't need to have a root user account to install python modules.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Buildout can be extended through the use of recipes.  Recipes are like plugins, and they do all sorts of things.  You can see a list of &lt;a href="http://pypi.python.org/pypi?:action=browse&amp;amp;show=all&amp;amp;c=512"&gt;buildout recipes&lt;/a&gt; on the python package index (pypi).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;buildout can do lots of other things too - but these are the core concepts.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Where is buildout? Links to buildout pages.&lt;/h4&gt;&lt;li&gt;The buildout url: &lt;a href="http://pypi.python.org/pypi/zc.buildout"&gt;http://pypi.python.org/pypi/zc.buildout&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;A &lt;a href="http://grok.zope.org/documentation/tutorial/introduction-to-zc.buildout"&gt;buildout tutorial&lt;/a&gt; which seems better than the official documentation - but hard to find with search engines.  It's written as a tutorial to give to people - not really to read online.&lt;/li&gt;&lt;li&gt;&lt;a href="http://plone.org/documentation/tutorial/buildout"&gt;Plone buildout tutorial.&lt;/a&gt; - this one is specific to plone.&lt;/li&gt;&lt;li&gt;subversion repository for zc.buildout: &lt;a href="http://svn.zope.org/zc.buildout/"&gt;http://svn.zope.org/zc.buildout/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Licence: &lt;a href="http://www.opensource.org/licenses/zpl.php"&gt;The Zope Public License&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ohloh.net/projects/compare?project_0=zc.buildout "&gt;http://www.ohloh.net/projects/compare?project_0=zc.buildout&lt;/a&gt;&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pypi.python.org/pypi?:action=browse&amp;amp;show=all&amp;amp;c=512"&gt;buildout recipes&lt;/a&gt; on pypi&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Disadvantages to buildout?&lt;/h4&gt;&lt;br /&gt;You become dependant on a few things.  At least with buildout you become dependant on:&lt;br /&gt;&lt;li&gt;zc.buildout&lt;/li&gt;&lt;li&gt;setuptools&lt;/li&gt;&lt;li&gt;pypi.python.org website remaining up... it is fairly often down.&lt;/li&gt;&lt;li&gt;distutils - buildout requires a setup.py file.&lt;br /&gt;&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Who uses buildout?  How stable is it?  How portable is it?&lt;/h4&gt;&lt;br /&gt;At the moment buildout is mostly used by zope, and other python web applications.&lt;br /&gt;&lt;br /&gt;It's a fairly recent project - first released mid 2006.  However it's a 3rd generation buildout system used by the zope corporation - so it's got a bunch of wisdom behind it.&lt;br /&gt;&lt;br /&gt;Buildout seems to be stabilising... that is the amount of changes to it seems to be slowing down.  There seems to be about 37 bugs in the &lt;a href="https://launchpad.net/zc.buildout/+bugs"&gt;buildout bug tracker&lt;/a&gt; as of writing(2008-05-01) - with 3 of the bugs marked fixed (at 2008-05-31 and still only 3 of the bugs marked fixed) - and a number of bugs under discussion.&lt;br /&gt;&lt;br /&gt;Documentation isn't the best (which is one reason I'm writing this post) - but there is at least a main manual, and a tutorial.&lt;br /&gt;&lt;br /&gt;There do seem to be quite a few doctest based tests that come with it - which is one form of documentation in itself - but more documentation about zc.buildout - rather than documentation for using zc.buildout.  There is about 1400 lines of python in the tests, and about 3000 lines of non-python code in the doctests (usually description about what the tests are doing).&lt;br /&gt;&lt;br /&gt;I'm not sure how portable buildout is.  The last release (as of writing 1.0.1 (2008-04-02)), mentions windows fixes, and was the last release for 3 months.  I know of people using it on linux(suse, debian), and mac osx based machines.  Update: a note in the comments says it works fine on windows.&lt;/div&gt;&lt;/div&gt;</description><link>http://renesd.blogspot.com/2008/05/buildout-tutorial-buildout-howto.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-7822968397998643338</guid><pubDate>Thu, 29 May 2008 04:12:00 +0000</pubDate><atom:updated>2008-05-31T01:29:10.375+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>gsoc2008</category><title>gsoc2008 and pygame...</title><description>The Google Summer of Code(gsoc) has started, and students have officially begun their work this week.&lt;br /&gt;&lt;br /&gt;Already design, and code are starting to appear from them.&lt;br /&gt;&lt;br /&gt;Here are the pygame related projects, and their blogs:&lt;br /&gt;&lt;br /&gt;Zhang Fan, "minz", &lt;a href="http://i.cn.yahoo.com/zhangfanfox/blog/"&gt;blog&lt;/a&gt;:&lt;br /&gt;physics stuff&lt;br /&gt;&lt;br /&gt;Zhang Fan went through the earth quake in China, but luckily him and his family are ok.  Zhang has been studying various physics libraries, algorithms and code.  As well he has begun work in a separate branch.  So hopefully his work will then be merged in at a later time after his project.  You can view his branch here:&lt;br /&gt;&lt;a href="http://www.seul.org/viewcvs/viewcvs.cgi/branches/physics/?rev=1259&amp;amp;root=PyGame"&gt;http://www.seul.org/viewcvs/viewcvs.cgi/branches/physics/?rev=1259&amp;amp;root=PyGame&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Nicholas Dudfield, "akalias", &lt;a href="http://blog.akalias.net/"&gt;blog&lt;/a&gt;:&lt;br /&gt;tests for pygame&lt;br /&gt;&lt;br /&gt;Nicholas's test work is going into the pygame trunk, and he has been working on some tools to help generate most of the test bodies.  So this way we will be able to see the number of tests needed to implement.  As well he began to write some tests for some parts of pygame that need more tests for the pygame 1.8.1 release(coming soon).&lt;br /&gt;&lt;br /&gt;Nirav Patel, "nrp", &lt;a href="http://eclecti.cc/"&gt;blog&lt;/a&gt;:&lt;br /&gt;computer vision stuff (through the OLPC project, not mentored through pygame)&lt;br /&gt;&lt;br /&gt;Nirav has been working in his local git repository since he doesn't always have internet access where he is.  He's proposed some ideas for how his camera access API would work on the mailing list, and discussion has begun there.  He plans to upload his work onto the internet when he has access for people to look at.&lt;br /&gt;&lt;h4&gt;SDL gsoc projects&lt;/h4&gt;&lt;br /&gt;Also there are SDL related GSOC projects which will help pygame too (pygame uses SDL)...&lt;br /&gt;&lt;br /&gt;Edgar "bobbens" Simo:&lt;br /&gt;Bobbens is an undergrad in industrial engineering, and will be working on developing a force feedback API.&lt;br /&gt;&lt;br /&gt;Aaron Wishnick:&lt;br /&gt;Aaron is an undergrad in mathematics, and will be working on audio resampling and pitch shifting.&lt;br /&gt;&lt;br /&gt;Holmes Futrell:&lt;br /&gt;Holmes is an undergrad in computer science and mathematics, and will be porting SDL to the iPhone.&lt;br /&gt;&lt;br /&gt;Darren Alton:&lt;br /&gt;Darren is an undergrad in computer science, and will be porting SDL 1.3 to the Nintendo DS, using the hardware capabilities of the DS to showcase the new features in SDL 1.3.&lt;br /&gt;&lt;a href="http://lifning.americankryptonite.net/blag/"&gt;http://lifning.americankryptonite.net/blag/&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;Szymon "Wilku" Wilczek:&lt;br /&gt;Wilku is an undergrad in computer science, and wants to add support for pressure sensitive devices to the SDL API, specifically using the Wacom tablet as an example.&lt;br /&gt;&lt;a href="http://wilku.ravenlord.ws/doku.php?id=start"&gt;http://wilku.ravenlord.ws/doku.php?id=start&lt;/a&gt;</description><link>http://renesd.blogspot.com/2008/05/gsoc2008-and-pygame.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-1274973721502753571</guid><pubDate>Thu, 24 Apr 2008 06:29:00 +0000</pubDate><atom:updated>2008-04-24T11:23:19.949+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>py3k</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>"raise" becomming a function in py3k?</title><description>Over on the voidspace blog, there is a little discussion about raising an exception in a lambda.&lt;br /&gt;&lt;br /&gt;Because raise is a statement, it's kind of a hard thing to do.  Raising an exception as an expression that is.&lt;br /&gt;&lt;br /&gt;Which "raises" the question, why isn't raise a function in py3k?&lt;br /&gt;&lt;br /&gt;The two suggestions on how to raise in an expression were these:&lt;br /&gt;&gt;&gt;&gt; r = lambda: eval(compile("raise RuntimeError", '', 'exec'))&lt;br /&gt;&gt;&gt;&gt; r()&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt; ctypes.pythonapi.PyErr_SetObject(*map(ctypes.py_object, (e.__class__, e)))&lt;br /&gt;&lt;br /&gt;Which are kind of both a bit yuk.&lt;br /&gt;&lt;br /&gt;So maybe raise could be a bit more expressive in py3k?</description><link>http://renesd.blogspot.com/2008/04/raise-becomming-function-in-py3k.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-1618860278372395510</guid><pubDate>Wed, 23 Apr 2008 01:40:00 +0000</pubDate><atom:updated>2008-04-23T02:58:54.775+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>bars beijing</category><title>Bars in Beijing?</title><description>A friend of mine who lives in Beijing has set up a website categorising all the &lt;a href="http://www.bars-beijing.com/"&gt;Bars in Beijing&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;It's still a work in progress, but he has listed over 500 bars so far.  For a place as big as Beijing, you can imagine that there's going to be a lot of bars.  They're categorised by location, and if they are a night club, a bar, or a KTV(karaoke) place etc.&lt;br /&gt;&lt;br /&gt;He still wants to add photos for all of the bars, and just generally make it a nice guide to &lt;a href="http://www.bars-beijing.com/"&gt;Beijing bars&lt;/a&gt;.</description><link>http://renesd.blogspot.com/2008/04/bars-in-beijing.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-9150956667928855012</guid><pubDate>Tue, 15 Apr 2008 05:45:00 +0000</pubDate><atom:updated>2008-04-15T08:02:42.586+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>games</category><category domain='http://www.blogger.com/atom/ns#'>ludumdare</category><title>Ludumdare 48h game development competition this weekend.</title><description>For those that didn't have time for &lt;a href="http://www.pyweek.org/"&gt;pyweek&lt;/a&gt; (like me) - there is the &lt;a href="http://www.ludumdare.com/"&gt;ludumdare&lt;/a&gt; game development competition.&lt;br /&gt;&lt;br /&gt;The ludumdare competition is similar to pyweek - it's what inspired pyweek.&lt;br /&gt;&lt;br /&gt;The main differences are it's more "from scratch", it is only one weekend, and you have to do everything yourself - no teams.  Also you can use any language - not just python, and everyone can select themes over three voting rounds.&lt;br /&gt;&lt;br /&gt;The main idea is that One has to do all parts of game development - art, coding, sound, music etc, and to concentrate on the design of the game - rather than building engines.  So it's a short burst of creativity, and junk food eating - with around 100 other people at the same time making their own games.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.ludumdare.com/"&gt;&lt;img src="http://www.imitationpickles.org/ludum/wp-content/uploads/2008/04/ld_elfin.thumbnail.jpg" border="0"&gt;&lt;/a&gt; (img by &lt;a href="http://www.imitationpickles.org/ludum/author/mrfun/"&gt;MrFun&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;LD 11 :: &lt;a href="http://www.imitationpickles.org/ludum/2008/04/05/ld11-april-18-20-less-than-two-weeks-warning/"&gt;Weekend of April 18-20&lt;/a&gt; - Currently doing round 2 of theme voting.</description><link>http://renesd.blogspot.com/2008/04/ludumdare-48h-game-development.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-4905026952114703408</guid><pubDate>Tue, 08 Apr 2008 00:56:00 +0000</pubDate><atom:updated>2008-04-08T02:37:52.728+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>orm</category><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>database</category><title>database ORM adaptors?</title><description>Are there any adaptors for the various python database ORM models?&lt;br /&gt;&lt;br /&gt;For example SQLObject &lt;-&gt; Storm &lt;-&gt; mother ORM &lt;-&gt; django ORM &lt;-&gt; SQLAlchemy &lt;-&gt; GeniusSQL, etc.&lt;br /&gt;&lt;br /&gt;It seems this might be a good way to reuse some models, and code for those models.&lt;br /&gt;&lt;br /&gt;For example, say there was a SQLAlchemy &lt;-&gt; Django ORM adaptor, then pylons, django, and turbogears could more easily inter operate.&lt;br /&gt;&lt;br /&gt;Then if an adaptor for SQLObject &lt;-&gt; SQLAlchemy was made SQLObject could then use the SQLAlchemy &lt;-&gt; django ORM adaptor.&lt;br /&gt;&lt;br /&gt;I guess at this point, sharing at the database level makes more sense.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;update&lt;/b&gt;: &lt;a href="http://code.google.com/p/django-sqlalchemy/"&gt;http://code.google.com/p/django-sqlalchemy/&lt;/a&gt; seems to be a work-in-progress "project to create SQLAlchemy mapping of Django models onto a SQLAlchemy backend".</description><link>http://renesd.blogspot.com/2008/04/database-orm-adaptors.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-5608462349329910263</guid><pubDate>Wed, 02 Apr 2008 16:30:00 +0000</pubDate><atom:updated>2008-04-09T08:58:24.578+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>bugs</category><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>Being proactive with bugs - search, not categorise.</title><description>I like to search for bugs, not so much wait for them to be reported in one specific way.  Here's a story to illustrate what I mean.&lt;br /&gt;&lt;br /&gt;As part of a new pygame release we've been improving the pygame bug reporting, and fixing system.&lt;br /&gt;&lt;br /&gt;The old(and current) system used the &lt;b&gt;mailing list as a bug reporting system&lt;/b&gt;.  We still use this system, but have added a few other methods.  People simply report bugs and patches to the mailing list.  Then developers search through the mailing list, and noted when they were fixed, on the mailing list.  Because the pygame mailing list is quite large often a lot of people would view, review and fix the bugs.  It also informs people how to report a bug - because people on the mailing list see it happening every now and then.&lt;br /&gt;&lt;br /&gt;Having bugs in the mailing list is nice, because I can type BUG into my mail programs search function to find bugs.  Or I can type PATCH to find patches.  Or I can have my program filter emails with bug, patch from specific mailing lists to bug, and patch folders.  &lt;b&gt;When a bug is fixed, or people want to discuss it, you can just tell them in the email&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Some times people also email me directly about bugs - which is pretty easy if they don't want to join the mailing list, or put it into a bug tracker.  People also leave bug reports in our web based documentation commenting system - and not only documentation bugs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;However bugs often got reported in all sorts of other weird places&lt;/b&gt;.  People talk about bugs in OS distribution bugzillas, random blogs, and also random forums.  As well as people talk about bugs on irc.  There are also SDL specific bugs reported in their bugzilla (pygame depends on the Simple DirectMedia Layer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;So rather than waiting for people to submit their bugs&lt;/b&gt; in a particular way - we now go and search for them too.  On the pygame bug page, I have collected together a selection of links to different OS specific bug trackers.  So it's easy to see how the OS distribution specific bugs are going.  (ps freebsd, and gentoo have been the best updating their packages of pygame to version 1.8 so far).&lt;br /&gt;&lt;br /&gt;Searching for bugs, rather than waiting for people to report them, and categorise them is the way to go.  Luckily we have search engines which can search the internet for bugs easily.&lt;br /&gt;&lt;br /&gt;So now, rather than typing BUG into my mail program, I can type it into a general search engine.  Since mailing lists, bugzillas, forums, and blogs are all mostly indexed - my searches for bugs and patches work just fine.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;We also have a web based bug tracker&lt;/b&gt; - a pygame bugzilla - for those who like to file bugs away in a database.  Since some people prefer to submit, and track bugs that way.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;update:&lt;/b&gt; &lt;a href="http://worldofreuse.blogspot.com/2008/04/developers-behind-pygame-have.html"&gt;This World of Reuse blog post&lt;/a&gt; asks if this proactive approach to bugs is scalable for larger more widely used projects like firefox.  I commented on the blog how it could be added to any sized project, but the comment is still in the moderation queue.  I found the world of reuse blog post with my "pygame bug" searching.</description><link>http://renesd.blogspot.com/2008/02/bugs-search-not-categorise.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-6910612494461910799</guid><pubDate>Sat, 29 Mar 2008 13:58:00 +0000</pubDate><atom:updated>2008-03-29T17:15:39.193Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>hi, what is it? oh pygame 1.8 is released.</title><description>Dear you,&lt;br /&gt;&lt;br /&gt;I was walking down the street the other day and pygame 1.8 was&lt;br /&gt;accidentally released.&lt;br /&gt;&lt;br /&gt;oops.&lt;br /&gt;&lt;br /&gt;Well anyway.  Have a nice day.  &lt;a href="http://pygame.org/whatsnew.shtml" target="_blank"&gt;http://pygame.org/whatsnew&lt;wbr&gt;.shtml&lt;/a&gt;&lt;br /&gt;&lt;a href="http://pygame.org/" target="_blank"&gt;http://pygame.org/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; * pygame.mask for pixel perfect collision detection&lt;br /&gt; * pygame.scrap for clipboard support&lt;br /&gt; * new and improved sprite groups, including layers, automatically&lt;br /&gt;selecting fastest update mode(full screen or dirty rect updates), and blend modes...&lt;br /&gt; * blending support for filling and blitting surfaces.  ADD, SUB, MULT, DIV etc.&lt;br /&gt; * saving surfaces as jpeg and png&lt;br /&gt; * buffer access for Surface and Sound objects&lt;br /&gt; * numpy, and numeric support for pygame.surfarray and pygame.pixelarray&lt;br /&gt; * PixelArray, which can be used instead of numpy - without the dependency.&lt;br /&gt;* smooth scale function written in mmx assembly with C fallback.&lt;br /&gt;* More functions release the GIL for multithreaded use.&lt;br /&gt;* lots of speed ups to many functions via better python wrapping.&lt;br /&gt;* color thresholding, bounding box finding for images, and surface averaging.&lt;br /&gt;* massive documentation updates (which have been available on the website for a while already).&lt;br /&gt;* pygame.time.Clock.tick() is more cpu friendly.&lt;br /&gt;* updates to example programs.&lt;br /&gt;* new windows, and mac installers.&lt;br /&gt;* hardware acceleration updates for overlays and opengl.&lt;br /&gt;* porting work to different platforms.&lt;br /&gt;* heaps of bug fixes including SRCALPHA blitting fixes, 64bit fixes, sound system fixes.&lt;br /&gt;&lt;br /&gt;Plus there have been lots of changes to SDL itself since the last pygame release. &lt;a href="http://www.libsdl.org/release/changes-1.2.html"&gt;http://www.libsdl.org/release/changes-1.2.html&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt; * lots of stuff really... but those are some of the nice things.  Read the what's new page for full details &lt;a href="http://pygame.org/whatsnew.shtml" target="_blank"&gt;http://pygame.org/whatsnew&lt;wbr&gt;.shtml&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;chairs,&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;ps. Balloons and robots are cool.&lt;br /&gt;pps. see readme for credits.  Thanks to all the people who helped out :)  Time for much beer drinking now I think.</description><link>http://renesd.blogspot.com/2008/03/hi-what-is-it-oh-pygame-18-is-released.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-2845112800873909008</guid><pubDate>Mon, 03 Mar 2008 03:47:00 +0000</pubDate><atom:updated>2008-03-03T03:55:20.376Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>py3k</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>py3k Decimal?</title><description>From the Cobra language, comes the idea of using Decimal numbers as the default.  It's 2008, so let's use decimals by default!&lt;br /&gt;&lt;br /&gt;This is an error that python has...  Add 0.1 together ten times, and you do not get 1.0.&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt; 1.0 == 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1&lt;br /&gt;False&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Maybe py3k should use Decimals by default instead?  Or is this planned already?&lt;br /&gt;&lt;br /&gt;Python float performance is really bad anyway, so we might as well make it a little more accurate right?&lt;br /&gt;&lt;br /&gt;Floats are such a cause of errors in code, it'd be nice if math was more accurate by default :)  It requires a fair bit of knowledge to understand all the quirks of floats, but less to understand the quirks of decimals.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cu.</description><link>http://renesd.blogspot.com/2008/03/py3k-decimal.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-103024375747764987</guid><pubDate>Fri, 15 Feb 2008 00:42:00 +0000</pubDate><atom:updated>2008-02-15T08:10:51.167Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>blender</category><title>Great from scratch blender animation tutorial</title><description>I've gone through this great &lt;a href="http://wiki.blender.org/index.php/BSoD/Introduction_to_Character_Animation"&gt;blender animation tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://wiki.blender.org/index.php/BSoD/Introduction_to_Character_Animation"&gt;&lt;img src="http://wiki.blender.org/uploads/thumb/5/55/BSoD-ItCA-demo-02.jpg/300px-BSoD-ItCA-demo-02.jpg" border="0"&gt;&lt;img src="http://wiki.blender.org/uploads/thumb/5/5e/BSoD-ItCA-lower-body-25.jpg/300px-BSoD-ItCA-lower-body-25.jpg" border="0"&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;It's really well made, and teaches you blender from the beginning - explaining everything as you go.&lt;br /&gt;&lt;br /&gt;It was a "Blender summer of documentation" project where someone spent a whole month working on it.  It was also based on an older tutorial which was itself really good  There's a downloadable PDF version (180ish pages) if you prefer to read things that way - otherwise it's broken up into many separate html pages.  It's also got .blend files you can download at every step if you wish - so you can skip steps.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;So if you want to go from knowing nothing about blender, to being able to construct and animate a basic 3d character - this is the tutorial for you.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://wiki.blender.org/index.php/BSoD/Introduction_to_Character_Animation"&gt;Introduction to Character Animation - with blender&lt;/a&gt;</description><link>http://renesd.blogspot.com/2008/02/great-from-scratch-blender-animation.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-9039963328590516388</guid><pubDate>Fri, 08 Feb 2008 01:17:00 +0000</pubDate><atom:updated>2008-02-08T06:23:05.345Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>web</category><category domain='http://www.blogger.com/atom/ns#'>thumbnails</category><category domain='http://www.blogger.com/atom/ns#'>graphing</category><title>Using pygame without a windowing system.</title><description>This cookbook entry shows how you can use pygame without a windowing system.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.pygame.org/wiki/HeadlessNoWindowsNeeded"&gt;http://pygame.org/wiki/HeadlessNoWindowsNeeded&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Useful for scripts that run in webservers, or little command line utilities.&lt;br /&gt;&lt;br /&gt;Sometimes you just don't need a GUI.  Like maybe you want to do some 2d drawing in your opengl application.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The cookbook example is just a thumbnail generation example(using pygames fast mmx assembly using smoothscale function) - but you can do lots of other things with pygame too - like drawing lines - or &lt;a href="http://www.pygame.org/project/613/"&gt;graphing&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.pygame.org/project/613/"&gt;&lt;br /&gt;&lt;img src="http://www.pygame.org/thumb/4b4236edd46d839f79b084f738dcef2e.png" border="0"&gt;&lt;br /&gt;&lt;/a&gt;</description><link>http://renesd.blogspot.com/2008/02/using-pygame-without-windowing-system.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-4726984853008750774</guid><pubDate>Tue, 05 Feb 2008 22:45:00 +0000</pubDate><atom:updated>2008-02-06T10:16:20.976Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>opengl</category><title>Lamina - using pygame GUIs with opengl.</title><description>David, the author of the upcoming &lt;a href="http://pitchersduel.python-hosting.com/"&gt;Pitchers Duel&lt;/a&gt; baseball game has made a nice little module for pygame and opengl.&lt;br /&gt;&lt;br /&gt;It allows you to use some of the GUI libraries with PGU.  In the examples, it uses the excellent &lt;a href="http://www.pygame.org/project/108/"&gt;PGU&lt;/a&gt;, and &lt;a href="http://www.pygame.org/project/125/"&gt;Ocemp&lt;/a&gt; libraries.&lt;br /&gt;&lt;br /&gt;However I think the general method can be applied to other GUIs fairly easily.  It does the drawing on off screen surfaces, updating opengl textures as needed.&lt;br /&gt;&lt;br /&gt;It even has a zooming demo... where the gui zooms.  I like things that zoom.</description><link>http://renesd.blogspot.com/2008/02/lamina-using-pygame-guis-with-opengl.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-761041917995327841</guid><pubDate>Sun, 03 Feb 2008 00:10:00 +0000</pubDate><atom:updated>2008-02-03T23:11:04.822Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>pygame dev updates.  620 projects on pygame.org.</title><description>We have a new windows maintainer - Lenard Lindstrom.  He's been submitting patches to pygame for a while now, and as agreed to help get pygame 1.8 out the door.&lt;br /&gt;&lt;br /&gt;As part of his work, he has made compiling pygame on windows a lot easier.&lt;br /&gt;"""I automated the dependency build process using a single standalone Python program, build_deps.py.  All that is needed is to obtain the necessary libraries and MinGW/Msys tools. The builder will first reconfigure MinGW for msvcr71.dll. Then it will build all the libraries and install them into the Msys directory structure.  All this can be done from the Windows command prompt.  Expect it to take several hours though. Next the Pygame config.py script is run from the Msys console. Make sure the Python directory is in the Msys PATH.  Finally setup.py can be run from the command prompt to build and install Pygame itself.  All the necessary libraries will be copied to the pygame package."""&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Brian Fisher has also joined the pygame dev team to help squash bugs, help people on the mailing list, set up an automated build compile farm, and generally help out on things.  Brian also been submitting patches for a while now.&lt;br /&gt;&lt;br /&gt;Marcus has finished his Numpy migration work - by changing the soundarray module so that it can use Numpy or Numeric to generate sounds from python.&lt;br /&gt;&lt;br /&gt;There has also been a few more bits of functionality added around the preparations for release.&lt;br /&gt;&lt;br /&gt;The pixel perfect collision detection uses the Mask data type.  However now Mask can now also be used to find bounding rectangles around joined pixels.&lt;br /&gt;&lt;br /&gt;pygame.transform can find edges in an image, get the average surface of many surfaces and also threshold an image by color.&lt;br /&gt;&lt;br /&gt;Only a couple of things remain on the todo list before release now... Mac OSX clipboard support, and the Mac OSX installer.  Both are being worked on, and tested.  The Mac OSX installer mostly works - however we want to make sure it's perfect before we release it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;620 projects are listed on the pygame.org website now.  Some very interesting stuff pops up there.  Everything from a VNC 2 flash video converter, to soccer games, to games where a big kid bashes up hundreds of little kids, to a graphing program.  All sorts of things, mostly done by one person too!&lt;br /&gt;&lt;br /&gt;Tagging was added to the pygame website a number of months ago, and now all of the projects are slowly forming into more groups.  Here are some of the more popular tags:&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/platformer"&gt;platformer&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/arcade"&gt;arcade&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/2d"&gt;2d&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/action"&gt;action&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/pyweek"&gt;pyweek&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Some tags for individuals who have put up lots of projects.&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/philhassey"&gt;philhassey&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/pymike"&gt;pymike&lt;/a&gt;&lt;br /&gt;&lt;li&gt;&lt;a href="http://pygame.org/tags/mallett"&gt;mallett&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It is still xmas on the &lt;a href="http://pygame.org/"&gt;http://pygame.org/&lt;/a&gt; website until we get this release out!  (Unless we release next xmas, and then it'll have to be xmas on the website for a while longer.)</description><link>http://renesd.blogspot.com/2008/02/pygame-dev-updates-620-projects-on.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-6546360972046349094</guid><pubDate>Fri, 18 Jan 2008 00:55:00 +0000</pubDate><atom:updated>2008-01-18T01:14:09.769Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>art</category><category domain='http://www.blogger.com/atom/ns#'>pygame</category><title>hOur Factory - Melbourne Australia.</title><description>&lt;a href="http://hourfactory.org"&gt;&lt;br /&gt;&lt;img src="http://rene.f0o.com/~rene/stuff/hourfactory_350x263.jpg" border="0"&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;hOur Factory is a &lt;a href="http://hourfactory.org"&gt;Melbourne arts festival&lt;/a&gt; of sorts that I'm involved with.&lt;br /&gt;&lt;br /&gt;Unlike most arts festivals, or parties hOur Factory lets interested people vote, and chose the theme.  hOur Factory is an exhibition of arts, a warehouse party, and a film night all held in a big space on March 1st.&lt;br /&gt;&lt;br /&gt;It will have a gallery opening feel, and then move into performances, and music.&lt;br /&gt;&lt;br /&gt;Depending on the theme, I might be working on a project with 28 monitors and a whole lot of webcams.  The idea is to form them into a sphere like shape, and have the monitors pointing outwards.  So it could act as a spherical mirror of sorts.  However the possibilities are quite large.  It's going to be made from cheap $5 webcams, and recycled monitors that we hope to get for free (since so many people are throwing out their old CRT monitors).  &lt;br /&gt;&lt;br /&gt;I should be using pygame to drive the displays... maybe doing some real time effects on them if there is enough processing power.&lt;br /&gt;&lt;br /&gt;I already have six CRT monitors, but I will be looking to borrow more.  I've got a few old PCs that I'll be using with linux to do the processing.&lt;br /&gt;&lt;br /&gt;Once the theme is chosen for hOur Factory, then people will start writing about what their projects are on the &lt;a href="http://hourfactory.org"&gt;hOur Factory&lt;/a&gt; website.  If you know anyone in Melbourne who might be interested in being involved in an arty project - please let them know about it.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;cu,</description><link>http://renesd.blogspot.com/2008/01/hour-factory-melbourne-australia.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-1519685460689904030</guid><pubDate>Sat, 08 Dec 2007 01:02:00 +0000</pubDate><atom:updated>2007-12-08T01:28:15.232Z</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>games</category><category domain='http://www.blogger.com/atom/ns#'>ludumdare</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>Bleten.  My game for the ludumdare 48h 2002</title><description>This is a game made to the theme of sheep.  This game is about sheep poo, and grass.  &lt;br /&gt;&lt;br /&gt;You play the part of a sheep, against a friend sitting at the same keyboard as you.&lt;br /&gt;&lt;br /&gt;You must eat the grass on the opponents side of the screen, whilst pooing on your grass so it grows quicker.  It's a resource game really.  You need to make the trade of between blocking the other sheep, eating the other sheeps grass, and pooing on your grass.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://rene.f0o.com/~rene/stuff/screen_shot_2007_12_08_12_09_22.jpg"&gt;&lt;br /&gt;My Evil sheep picture for the intro.  I think the sheep is possessed by satan.  Maybe.  Or maybe it's just angry all it's lambs have been taken to be eaten.  Not sure why it's angry really.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://rene.f0o.com/~rene/stuff/screen_shot_2007_12_08_12_20_35.jpg"&gt;&lt;br /&gt;&lt;br /&gt;As you can see I didn't have time to draw any good looking sheep - so there's just stick figure sheep.  Stick sheep that poo.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;You can download the source for python+pygame here.&lt;br /&gt;&lt;a href="http://rene.f0o.com/~rene/stuff/bleten.tar.gz"&gt;http://rene.f0o.com/~rene/stuff/bleten.tar.gz&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="http://rene.f0o.com/~rene/stuff/bleten.zip"&gt;http://rene.f0o.com/~rene/stuff/bleten.zip&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.ludumdare.com/"&gt;Ludumdare&lt;/a&gt; is where people make games from scratch in 48 hours.  A single person does all the artwork, code, sound and everything else in the game to a theme.  It's what inspired &lt;a href="http://www.pyweek.org"&gt;pyweek&lt;/a&gt; except you can use what ever programming language you like, there are no teams - one person does everything - and it only takes a weekend, not a week.</description><link>http://renesd.blogspot.com/2007/12/bleten-my-game-for-ludumdare-48h-2002.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-2011714528969656035</guid><pubDate>Sat, 13 Oct 2007 02:41:00 +0000</pubDate><atom:updated>2007-10-13T04:00:18.728+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>A Book "Beginning Game Development with Python and Pygame"</title><description>I haven't read this book about making games with python and pygame yet, but I think it seems like a good one for beginners.  The &lt;a href="http://www.willmcgugan.com/2007/10/04/free-chapter-of-beginning-game-development-with-python-and-pygame/"&gt;free chapter&lt;/a&gt; is fun to read.  Which is the essence of making games I think.  It should be entertaining to make a game, and to read about making games.&lt;br /&gt;&lt;br /&gt;This book looks like it covers most basics of programming a game - with python and pygame.  Like it's title suggests it is for beginners, which is great.</description><link>http://renesd.blogspot.com/2007/10/book-beginning-game-development-with.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-7724744502520834878</guid><pubDate>Sat, 13 Oct 2007 01:54:00 +0000</pubDate><atom:updated>2007-10-13T03:01:18.508+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>gpu</category><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>opengl</category><title>PyGPU - hardware graphics programming using the GPU and python.</title><description>Have a look at PyGPU &lt;a href="http://code.google.com/p/pygpu/"&gt;http://code.google.com/p/pygpu/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;With it you can code the GPU using python.  It translates code from python into GLSL (the opengl shading language).&lt;br /&gt;&lt;br /&gt;It's amazing what type of algorithms you can quickly write using the GPU these days.&lt;br /&gt;&lt;br /&gt;There are papers describing it's implementation and other information here: &lt;a href="http://www.cs.lth.se/home/Calle_Lejdfors/pygpu/"&gt;http://www.cs.lth.se/home/Calle_Lejdfors/pygpu/&lt;/a&gt;  It takes a similar approach to psyco or pypy... in a way.  But is different from both of these.&lt;br /&gt;&lt;br /&gt;Very cool.</description><link>http://renesd.blogspot.com/2007/10/pygpu-hardware-graphics-programming.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-4607557278978689586</guid><pubDate>Sat, 06 Oct 2007 02:15:00 +0000</pubDate><atom:updated>2007-10-06T03:18:18.676+01:00</atom:updated><title>Girl start project teaching girls programming with pygame.</title><description>I saw this on the pygame mailing list the other day about &lt;a href="girlstart.org"&gt;girlstart.org&lt;/a&gt; ...&lt;br /&gt;&lt;br /&gt;"... Project IT Girl, a program that teaches 60 high school girls in Austin, Texas, about how they can change the world through the use of technology. This year, Project IT Girls learn basic programming through designing and developing their own unique educational games written with Python and **Pygame**! ..."&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Looks like a cool project.</description><link>http://renesd.blogspot.com/2007/10/girl-start-project-teaching-girls.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-7983226186282018924</guid><pubDate>Sat, 06 Oct 2007 01:59:00 +0000</pubDate><atom:updated>2007-10-06T03:03:25.501+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>galcon</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>Ya!  A Galcon T shirt.</title><description>After the &lt;a href="http://www.imitationpickles.org/galcon/index.html"&gt;Galcon&lt;/a&gt; T shirt design competition, Phil has decided to send me one of the winning designed shirts for helping out with testing.&lt;br /&gt;&lt;br /&gt;You can see some of the winning designs here: &lt;a href="http://www.cafepress.com/galcon"&gt;Galcon t shirts&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.imitationpickles.org/galcon/index.html"&gt;Galcon&lt;/a&gt; is a multiplayer, and single player game kind of like risk, but with space ships.  It's made with python + pygame by Phil Hassey.</description><link>http://renesd.blogspot.com/2007/10/ya-galcon-t-shirt.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-3549564446501618796</guid><pubDate>Thu, 06 Sep 2007 06:10:00 +0000</pubDate><atom:updated>2007-09-06T07:10:47.025+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>ninja</category><title>-- Ninja out.</title><description></description><link>http://renesd.blogspot.com/2007/09/ninja-out.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-2832326178216530806</guid><pubDate>Sat, 01 Sep 2007 04:58:00 +0000</pubDate><atom:updated>2007-09-01T06:07:39.965+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>python</category><title>python 3000 breaks hello world</title><description>&lt;pre&gt;$ ./python &lt;br /&gt;Python 3.0a1 (py3k, Sep  1 2007, 14:48:21) &lt;br /&gt;[GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2&lt;br /&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;br /&gt;&gt;&gt;&gt; print "hello world"&lt;br /&gt;  File "&lt;stdin&gt;", line 1&lt;br /&gt;    print "hello world"&lt;br /&gt;                      ^&lt;br /&gt;SyntaxError: invalid syntax&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Weird.  I've been trying to learn this python programming language, but the first command in my lecture notes, the three textbooks I have, and all the online tutorials seem to be wrong.&lt;br /&gt;&lt;br /&gt;Anyone know how to get hello world working?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Update: oh it seems that print is a function.  ---&gt; ;)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Maybe it should show this in the shell, kind of like what typing help does:&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt; help&lt;br /&gt;Type help() for interactive help, or help(object) for help about object.&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt;print 'hello world'&lt;br /&gt;Type print('hello world') to print a string, or print(object) to print an object.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Has any other major programming language ever broken a program as simple as hello world before?</description><link>http://renesd.blogspot.com/2007/09/python-3000-breaks-hello-world.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-7112868820087892534</guid><pubDate>Thu, 30 Aug 2007 04:41:00 +0000</pubDate><atom:updated>2007-08-30T05:49:40.439+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>games</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>PyWeek #5 theme voting on now!  84 entries so far.</title><description>84 entries so far for the pyweek game development competition.  Some entries are teams, and some are solo efforts.&lt;br /&gt;&lt;br /&gt;The themes for this pyweek game development competition are:&lt;br /&gt;&lt;br /&gt;&lt;li&gt;Twinkle&lt;br /&gt;&lt;li&gt;Turmoil&lt;br /&gt;&lt;li&gt;Ticking&lt;br /&gt;&lt;li&gt;Twisted&lt;br /&gt;&lt;li&gt;Tyger, Tyger&lt;br /&gt;&lt;br /&gt;So &lt;a href="http://pyweek.org/5/"&gt;join up, and vote for a theme&lt;/a&gt;.  The &lt;a href="http://pyweek.org/5/"&gt;Pyweek game competition&lt;/a&gt; starts soon.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;Friday 2007/08/03 Registration open&lt;br /&gt;&lt;b&gt;Sunday 2007/08/26 Theme voting underway&lt;/b&gt;&lt;br /&gt;Sunday 2007/09/02 Challenge start&lt;br /&gt;Sunday 2007/09/09 Challenge end, judging begins&lt;br /&gt;Sunday 2007/09/23 Judging closes, winners announced&lt;br /&gt;&lt;/pre&gt;</description><link>http://renesd.blogspot.com/2007/08/pyweek-5-theme-voting-on-now-84-entries.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-1447698950032089120</guid><pubDate>Fri, 24 Aug 2007 02:32:00 +0000</pubDate><atom:updated>2007-08-24T12:18:25.074+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>laptop</category><category domain='http://www.blogger.com/atom/ns#'>linux</category><category domain='http://www.blogger.com/atom/ns#'>desktop</category><title>Delight at my new-old recycled laptop</title><description>I don't like to contribute too much to all the pollution that getting new hardware contributes too.  There's lots of perfectly good old hardware being given away or sold at low prices in second hand stores and online auction sites.&lt;br /&gt;&lt;br /&gt;A couple of months ago I got a Dell latitude C610 laptop from a place down the road from me that restores and sells old laptops.  With only 20 gigs of HD space, and 256 megs of ram it's not anything close to what you'd buy new.  However it seems to do ok.&lt;br /&gt;&lt;br /&gt;I also like to use older hardware for developing software - because it's like 'eating my own dogfood' in a way.  If I see the performance problems that the slow computers experience - then I can fix them up.  All too often I see websites that perform slowly on old machines, or don't fit important information on their small resolution screens.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;My franken box&lt;/h4&gt;The laptop is so nice, that I've mostly retired my old duron 850mhz desktop machine... which I've had since 1997 or so.  Well, some parts I have had since then - it's changed power supplies, motherboards, cpus, hard drives, network cards, sound cards, memory and video cards.  Over time I've been upgrading parts of it as I found new parts.  When people throw away their old graphics card, I replaced my old graphics card with a better one.  The same with all the other parts.  I don't think any of the parts in it are from the original 1997 machine any more, but I still think of it as the same franken-machine.&lt;br /&gt;&lt;br /&gt;This is the first time since 1997 that I have stopped using that hardware as my main machine.  I still have my original home directories though :)  I'm also using the mouse from that machine, and a few usb parts... so I guess the franken-box continues!  My franken monster of a machine lives on :)  I wonder if 20 years from now I'll still be using parts of that original machine configuration - with files from that original DebIan 1.3 install?&lt;br /&gt;&lt;br /&gt;Ubuntu failed to install for some reason - so I stuck with Debian.  With Debian installed, everything on the laptop is working.  I can even suspend to disk, or ram.  The on board sound isn't the best, but that's ok.  Even the function keys work for adjusting the volume, and changing the LCD brightness/contrast.  It doesn't have built in wireless, but came with a usb wireless adapter.  I have a few old pmcia wireless adapters lying around too that I could use (and did when I was in europe last).  I never use modems these days, so I'm not sure if the on board modem works.  The video card works quite well, with even basic opengl hardware acceleration seeming to work fine.  All without the hassle of using a binary driver - the open source video driver works fine.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Using my old desktop machine over the network - from my slow laptop.&lt;/h4&gt;Firefox is a memory hog, sometimes using up more memory than is even installed in my laptop(256 MiB).  So I run firefox now from my old desktop machine over the network.&lt;br /&gt;&lt;br /&gt;Just running firefox from another machine has made this laptop &lt;b&gt;*heaps*&lt;/b&gt; more usable.&lt;br /&gt;&lt;br /&gt;btw, it's easy to run X programs from another machine.  Just ssh -X host, the -X enables X11 forwarding.  It's a tiny bit more laggy over the network - but definitely better than using all that swap.&lt;br /&gt;&lt;br /&gt;I only started doing this a couple of days ago.  The downside is that I need to sync a couple of directories on my old desktop with my laptop.  The .mozilla directory, and my file download directory.  So when I save files with the browser running off my laptop I can access them easily from my laptop.  A couple of scripts accomplish this easily.  A next step is to automate this in the background.  So I don't have to manually run the scripts.  I think a watch type script which runs on my old desktop would work fine - or a file event using cron.  Although I think just mounting my laptop home directory from the desktop box could be optimal - with maybe the firefox cache dir being mounted on my desktop box(or I could just make the disk cache at 0, and increase the firefox memory cache).&lt;br /&gt;&lt;br /&gt;Another problem with running firefox over the network is sound.  Sound doesn't seem to automatically work from firefox when running it over the network.  I haven't figured this one out yet - but probably some sort of sound network daemon is needed.  I don't think firefox supports network sound by itself.  I'll have to investigate network sound...&lt;br /&gt;&lt;br /&gt;Another downside is that I need my desktop machine on whilst I use my laptop.  This obviously uses up more power :(  Maybe even being worse for the environment than just buying a newer, more efficient laptop.  However I only use it during my work day - when my requirements for the computer are higher.  So it goes to sleep at night, or when ever I leave the studio.  It also has the HD going to sleep, and it often runs in low power mode.&lt;br /&gt;&lt;br /&gt;Network boot would be nice... so I could somehow just get that machine to boot from my laptop... as long as I can get a connection to the network.  I haven't found anything that'll allow me to do this from a wireless connection yet.  Maybe if linux was running on my router I could do it.  Get my router to network boot my desktop box.  In the mean time I can just get off my bum and walk over to it.&lt;br /&gt;&lt;br /&gt;I still use my old desktop box for backing up stuff, and will probably use it for any programming that requires lots of disk space.  It's also handy for testing out load balancing for web apps, and other programming tasks.&lt;br /&gt;&lt;br /&gt;I plan to upgrade the ram on this laptop at some point... but at the moment 512MB costs around $200AUD.  A tiny bit less than what I bought the laptop for.  Probably worth it though.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;linux 2.6.23 is looking to be a big improvement for desktop use.&lt;/h4&gt;I'd like to try the swap prefetch linux mods... as well as the memory compression linux mod.  I think they'd speed this machine up.  It's looking like linux 2.6.23 will have a few desktop fixes that help a lot - the CFS scheduler and swap prefetch.&lt;br /&gt;&lt;br /&gt;However I think the compressed cache work has stalled since the last bit of work done on it for the google summer of code - &lt;a href="http://linuxcompressed.sourceforge.net/"&gt;http://linuxcompressed.sourceforge.net/&lt;/a&gt;  There's some interesting research, including benchmarks there for the compressed cache.  It makes perfect sense a compressed cache would be faster since hitting the HD is really slow, and compression/decompression is really quick on modern CPUs.  There's only a patch for 2.6.21 so I haven't tried it out.&lt;br /&gt;&lt;br /&gt;Here's some benchmarks someone made which measures responsiveness by window moving for the new linux kernel...&lt;br /&gt;&lt;br /&gt;vanilla 2.6.22.5:&lt;br /&gt;terminal window visible: real time was 59 seconds.&lt;br /&gt;terminal window covered: real time was 32 seconds.&lt;br /&gt;terminal window shaded: real time was 135 seconds.&lt;br /&gt;terminal window iconified: real time was 160 seconds.&lt;br /&gt;&lt;br /&gt;2.6.22.5 with latest CFS patch applied:&lt;br /&gt;terminal window visible: real time was 27 seconds.&lt;br /&gt;terminal window covered: real time was 13 seconds.&lt;br /&gt;terminal window shaded: real time was 21 seconds.&lt;br /&gt;terminal window iconified: real time was 21 seconds.&lt;br /&gt;&lt;br /&gt;compare to CK's -&lt;br /&gt;2.6.22-ck1:&lt;br /&gt;terminal window visible: real time was 25 seconds.&lt;br /&gt;terminal window covered: real time was 13 seconds.&lt;br /&gt;terminal window shaded: real time was 22 seconds.&lt;br /&gt;terminal window iconified: real time was 22 seconds.&lt;br /&gt;&lt;br /&gt;As you can see the 2.22.5 with latest CFS patch seems to be quite a lot more responsive than the vanilla kernel.  I've got a feeling it's going to be as big a performance jump as the move from linux 2.2 to 2.4.  Well I hope so anyway :)</description><link>http://renesd.blogspot.com/2007/08/delight-at-my-new-old-recycled-laptop.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-6468302753713377732</guid><pubDate>Wed, 22 Aug 2007 22:11:00 +0000</pubDate><atom:updated>2007-08-22T23:18:01.801+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>python</category><category domain='http://www.blogger.com/atom/ns#'>web</category><title>plone 3 released</title><description>&lt;a href="http://plone.org/news/plone-3.0-released"&gt;Plone 3 has been released!!!&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Plone is not beta like those other toy frameworks (django, pylons, paste, turbogears).  I guess there are more python web frame works out there after all than some people would like you to believe ;)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;kidding, kidding&lt;/b&gt;... don't eat me.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Should be fun to play with... I haven't used it since the 2.x series - so I'm looking forward to seeing all the improvements.  Congratulations to the plone team.</description><link>http://renesd.blogspot.com/2007/08/plone-3-released.html</link><author>noreply@blogger.com (illume)</author></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-10678074.post-7237860189934485493</guid><pubDate>Wed, 22 Aug 2007 08:40:00 +0000</pubDate><atom:updated>2007-08-22T10:56:42.521+01:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>pygame</category><category domain='http://www.blogger.com/atom/ns#'>games</category><category domain='http://www.blogger.com/atom/ns#'>python</category><title>Pygame weekly mini sprint 2007/08/22</title><description>This week we found and fixed a long time problem with the SRCALPHA flag.  Which is the flag used for per pixel alpha (transparent images).&lt;br /&gt;&lt;br /&gt;In fixing that it turned up a few other issues with Surface.  There were problems with error checking, and keyword arguments didn't work.&lt;br /&gt;&lt;br /&gt;So we got the error checking working, as well as keyword arguments.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The major piece of work that went in was the PixelArray from Marcus.  This will be what we use to replace surfarray.  A PixelArray is like a basic numeric/numpy array, and like what you'd expect returned from a surf.tobuffer() call.  With it we will be able to support Numeric, and Numpy by loading them dynamically.  &lt;br /&gt;&lt;br /&gt;I still need to write the surfarray.py which will replace the compiled surfarray.  There will be a surfarray_numeric, and surfarray_numpy.  So it will be backwards compatible, and you'll be able to use the array type you choose.  We will include a frombuffer() method for Numeric arrays - which won't require Numeric to be installed to compile.  Numpy already has a frombuffer method - so that shouldn't be too hard.&lt;br /&gt;&lt;br /&gt;PixelArray will also support basic slicing functionality like numeric - so you can do things like array[x:y, a:b:z] = ... etc.  This is what Marcus is working on next.  So there will be basic effects you'll be able to do even without Numpy, or Numeric.  As well as being able to send data to PIL, opengl, wx etc without using Numeric.  So you won't need the extra dependency for these common use cases.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In other things I started to play a little bit with the upcoming SDL 1.3.  This is the release with opengl and direct3d hardware acceleration, multiple windows, recording sound - and many other goodies.  It's not finished yet, but is already fun to play with.  Pygame will probably start to support it only when the final version is released - as some of the new APIs could still change.  There is a SDL 1.2 compatible API - you just can't access any of the new features with the old API (obviously :)&lt;br /&gt;&lt;br /&gt;pygame 1.8 will take advantages of all the improvements going on in the underlying SDL libraries.  All the different users or different languages - C++, ruby, python all feed back into the C SDL.  Lots of different engines use it, and heaps of game developers.  So it gets *heaps* of users and testing - as well as optimization.  Lots of linux distributions test it, as well as people releasing games on different platforms.  Pygame 1.8 on the mac will have a whole bunch of altivec optimizations.  On windows, and unix there have been a bunch of mmx optimizations too since the last pygame release(1.7.1).  The image, sound and font modules have all gotten fixes, speed ups, and bug fixes - improving all of their quality.  So not only will pygame get the pygame specific improvements - but it gets the improvements from SDL too.  Read the SDL &lt;a href="http://www.libsdl.org/release/changes-1.2.html"&gt;release notes&lt;/a&gt; for more details.&lt;br /&gt;&lt;br /&gt;Over on the &lt;a href="http://www.pyweek.org/5"&gt;pyweek&lt;/a&gt; site someone has made a python wrapper for the 2d physics library &lt;a href="http://wiki.slembcke.net/main/published/Chipmunk"&gt;chipmonk&lt;/a&gt;.  Check out the  youtube videos of the physics... &lt;a href="http://www.youtube.com/watch?v=b6HvIDt1VSU"&gt;Domino pyramid&lt;/a&gt; &lt;a href="http://www.youtube.com/watch?v=Cx5GBMybxXw"&gt;Domino smash&lt;/a&gt;.  It might be a good thing to add to pygame in the next release after pygame 1.8.&lt;br /&gt;&lt;br /&gt;The other week the &lt;a href="http://www.ferzkopp.net/joomla/content/view/19/14/"&gt;SDL_gfx&lt;/a&gt; author mentioned that he was interested in collaborating with the pygame people some more to get more of SDL_gfx into pygame, and to move the pygame improvements back into SDL_gfx.  The new improvements to SDL_gfx include bezier curves, more antialised shapes, and a textured polygon drawer.</description><link>http://renesd.blogspot.com/2007/08/pygame-weekly-mini-sprint-20070822.html</link><author>noreply@blogger.com (illume)</author></item></channel></rss>