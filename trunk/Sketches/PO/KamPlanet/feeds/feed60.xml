<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-14063458</id><updated>2008-06-03T11:58:35.932-07:00</updated><title type='text'>Shed Skin - An Optimizing Python-to-C++ Compiler</title><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>55</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-14063458.post-3552938404346332678</id><published>2008-06-03T11:33:00.000-07:00</published><updated>2008-06-03T11:58:35.960-07:00</updated><title type='text'>Shed Skin 0.0.28</title><content type='html'>I have just released Shed Skin 0.0.28, with the following changes. Thanks to those mentioned for helping out! &lt;br /&gt;&lt;br /&gt;- basic 'socket' support (Michael Elkins)&lt;br /&gt;- support for os.{popen3, popen4} under UNIX (Jaroslaw Tworek)&lt;br /&gt;- support for time.strptime under Windows (David Marek)&lt;br /&gt;- options for changing output dir, disabling annotation (Dave Tweed)&lt;br /&gt;- support for 'cmp' and 'reverse' arguments of 'sorted' and 'list.sort'&lt;br /&gt;- fixes for cross-module default arguments&lt;br /&gt;- important fixes for type inference and inheritance&lt;br /&gt;- restore compatibility with Python 2.3&lt;br /&gt;- many minor bugfixes &lt;br /&gt;&lt;br /&gt;I would really like to receive more bug reports. Please try out the new version, and let me know about any problems.&lt;br /&gt;&lt;br /&gt;With the socket support, 15 common modules are now largely supported. For a 0.1 release, I'd really like to have support for one more module: datetime. Thanks to the GHOP, there is a type model already (lib/datetime.py), so we only still need a C++ implementation..</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2008/06/shed-skin-0028.html' title='Shed Skin 0.0.28'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=3552938404346332678' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/3552938404346332678/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/3552938404346332678'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/3552938404346332678'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-2165935684717167304</id><published>2008-02-23T06:12:00.000-08:00</published><updated>2008-02-23T06:37:58.750-08:00</updated><title type='text'>Shed Skin 0.0.27</title><content type='html'>Thanks to the GHOP students, this new release contains support for 're' (via libpcre!), 'time' (except strptime under windows) and 'fnmatch' and 'glob', as well as much improved support for 'os' (POSIX), and also a typemodel for 'datetime'. This means Shed Skin now supports (most of) the following standard library modules:&lt;br /&gt;&lt;br /&gt;bisect, collections, copy, fnmatch, getopt, glob, math, os, os.path, random, re, string, sys and time. &lt;br /&gt;&lt;br /&gt;If anyone is interested in implementing/bootstrapping 'datetime', 'socket' or in improving 'os' support (esp. under Windows) or other modules, please let me know! &lt;br /&gt;&lt;br /&gt;I got more help for this release. Brian Blais helped fix OSX support again, and added support for building extension modules under OSX. And Mark Dewing (in attempts to compile parts of Quameon, a monte carlo quantum atom simulator) sent in several bug reports. Several other people also sent in bug reports. &lt;br /&gt;&lt;br /&gt;Of course I have added some things myself, too ;) For one, I added basic support for the 'staticmethod' and 'property' builtins. I also (finally, might I say) split up the compiler core (ss.py) into several files, added many fixes for multi-dir/multi-file projects, further optimized a few builtins, and fixed many minor issues.&lt;br /&gt;&lt;br /&gt;In all, I'm very happy with this release, and hope to get as much help for the next release!</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2008/02/shed-skin-0027.html' title='Shed Skin 0.0.27'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=2165935684717167304' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/2165935684717167304/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/2165935684717167304'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/2165935684717167304'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-2278188418708546388</id><published>2008-01-16T01:51:00.000-08:00</published><updated>2008-01-16T02:39:17.049-08:00</updated><title type='text'>Shed Skin 0.0.26</title><content type='html'>After my 'rant' about not getting much help with Shed Skin, I received a lot of feedback on how to improve packaging and usability in general. Several people even started helping out with this :-) Most notably, Paul helped me to create a Debian package, and James wrote a tutorial, which has by now replaced the README. Thanks guys!!&lt;br /&gt;&lt;br /&gt;Shortly after my rant, somehow I also got involved in the Google GHOP project, in which high school students are paid to help out with open source projects. Some of these students turned out to be a real help, and one of them even managed to add complete 're' support to Shed Skin, using PCRE (perl-compatible-regular-expression library, thanks Cyril for the suggestion; this will be available in the next release!).&lt;br /&gt;&lt;br /&gt;All of this, in turn, inspired me to add (almost) complete support for os.path and collections.defaultdict (deque was already supported). The combined result of all this should be a much more 'usable' project, although many things can still be improved of course. For the next release, I am planning on splitting up the compiler core (ss.py), and adding support for time, datetime, socket and as mentioned re. &lt;br /&gt;&lt;br /&gt;When all this works well, I think the time has finally come to have another look at type inference scalability. Two ideas that stand out in my mind are iterative deepening (restart after an increasing number of iterations, each time combining everything that was learned) and selector-based filtering (basically, the idea is that for a method call x.bleh(), obviously x can only be of a type that has a bleh method, though it can be generalized further, e.g. for x=y). &lt;br /&gt;&lt;br /&gt;Anyway, getting back to the subject, I have just released Shed Skin 0.0.26. It took me a while to get there, but this is mostly because it has many improvements:&lt;br /&gt;&lt;br /&gt;-support for:&lt;br /&gt;  -most os.path methods (bootstrapped using Shed Skin)&lt;br /&gt;  -many os methods (ghop; many still remaining)&lt;br /&gt;  -collections.defaultdict (completing collections)&lt;br /&gt;  -getopt.gnu_getopt (bootstrapped, completing getopt)&lt;br /&gt;  -5 of the last 7 missing str methods (ghop)&lt;br /&gt;&lt;br /&gt;-optimized string addition (a+b+c..)&lt;br /&gt;-improved locale support (ghop)&lt;br /&gt;-removed many leading underscores from generated code&lt;br /&gt;-new documentation/tutorial&lt;br /&gt;-added a Debian package&lt;br /&gt;-many minor bugfixes&lt;br /&gt;&lt;br /&gt;Additionally, I moved the project from SourceForge (sorry, guys) to Google code hosting. This is the new address:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://shedskin.googlecode.com"&gt;http://shedskin.googlecode.com&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2008/01/shed-skin-0026.html' title='Shed Skin 0.0.26'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=2278188418708546388' title='8 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/2278188418708546388/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/2278188418708546388'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/2278188418708546388'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-5382031369141842200</id><published>2007-11-24T09:32:00.000-08:00</published><updated>2007-11-24T10:18:47.822-08:00</updated><title type='text'>Shed Skin: Call for participation</title><content type='html'>Okay, so I have built this pretty cool (restricted) Python-to-C++ compiler, that actually works for many not-too-large programs. It currently builds (simple) extension modules, and shows massive speedups for many programs, often outperforming Psyco by a factor. As I recently showed on my blog, it also integrates nicely with Parallel Python. I would have thought the latter would have given rise to at least one comment.. &lt;insert deafening silence&gt; &lt;br /&gt;&lt;br /&gt;Am I the only one seeing the potential of an implicitly statically typed Python-like-language that runs at practically the same speed as C++? Is it that being ahead of the time makes you completely misunderstood, even by pretty smart hackers? I remember developing something quite like Wikipedia many years ago, and being unable to convince anyone of why this would be a good idea.. Of course that doesn't mean my compiler is a good idea (I wish), but I'm sure not going to give up as easily this time.&lt;br /&gt;&lt;br /&gt;So, once again, I'd like to ask for more participation. Many open source users don't realize, I think, how open source projects, especially new ones, thrive on user feedback. Programming is debugging, and there's nothing more satisfying than fixing particular problems users encounter. Sure, I could find most bugs myself, but I don't want to end up in a nut house, and at some point there has to be some kind of community process. Patches are very useful too, even simple ones, as they often trigger more patches by me. Extension module support, for example, started out as a simple proof-of-concept patch sent in by a user. &lt;br /&gt;&lt;br /&gt;I'd very much like to take Shed Skin further forward, but I need your help to do so! Please visit the homepage and send in bug reports or join the mailing list and start some discussions. I can also be hired to work on specific features of course :) So hurry to the homepage:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://mark.dufour.googlepages.com"&gt;http://mark.dufour.googlepages.com&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/11/shed-skin-call-for-participation.html' title='Shed Skin: Call for participation'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=5382031369141842200' title='29 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/5382031369141842200/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/5382031369141842200'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/5382031369141842200'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-3170854347820454163</id><published>2007-10-18T01:43:00.001-07:00</published><updated>2007-10-18T02:24:13.972-07:00</updated><title type='text'>Shed Skin and Parallel Python</title><content type='html'>&lt;a href="http://mark.dufour.googlepages.com"&gt;Shed Skin&lt;/a&gt; is an experimental Python to C++ compiler. &lt;a href="http://parallelpython.com"&gt;Parallel Python&lt;/a&gt; allows for clean and simple parallelization of Python processes over multiple cores. Wouldn't it be cool if we could combine the two? Of course I wouldn't be writing this if I hadn't tried. Here's how to do it.&lt;br /&gt;&lt;br /&gt;Create an extension module with Shed Skin, containing function(s) you'd like to use in parallel. For example, we might use the partial sum function from the Parallel Python website:&lt;br /&gt;&lt;br /&gt;def part_sum(start, end):&lt;br /&gt;..&lt;br /&gt;return sum&lt;br /&gt;&lt;br /&gt;For Shed Skin's type inference to work, part_sum must be called from somewhere:&lt;br /&gt;&lt;br /&gt;if __name__ == '__main__':&lt;br /&gt;part_sum(1, 1)&lt;br /&gt;&lt;br /&gt;Creating an extension module is simple (suppose the module is named meuk.py):&lt;br /&gt;&lt;br /&gt;ss -e meuk&lt;br /&gt;make&lt;br /&gt;&lt;br /&gt;Because Parallel Python expects pure-Python code, we must call our compiled function via a pure-Python wrapper:&lt;br /&gt;&lt;br /&gt;def part_sum(start, end):&lt;br /&gt;import meuk&lt;br /&gt;return meuk.part_sum(start, end)&lt;br /&gt;&lt;br /&gt;In order for Parallel Python to find our extension module (at least on my Ubuntu system), we must issue this in advance:&lt;br /&gt;&lt;br /&gt;export PYTHONPATH=$pwd&lt;br /&gt;&lt;br /&gt;And there you have it. Here are some timings:&lt;br /&gt;&lt;br /&gt;no extension module, 1 worker: 11.3 seconds&lt;br /&gt;no extension module, 2 workers: 6.2 seconds&lt;br /&gt;extension module, 1 worker: 0.6 seconds&lt;br /&gt;extension module, 2 workers: 0.3 seconds</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/10/parallel-python-and-shed-skin.html' title='Shed Skin and Parallel Python'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=3170854347820454163' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/3170854347820454163/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/3170854347820454163'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/3170854347820454163'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-2356973883775887883</id><published>2007-10-16T02:18:00.000-07:00</published><updated>2007-10-16T12:48:10.434-07:00</updated><title type='text'>Shed Skin 0.0.24, 0.0.25</title><content type='html'>I've just released Shed Skin 0.0.25. Together with the (unannounced) 0.0.24 release, there have been some interesting changes. Most importantly perhaps, Shed Skin now caches (most) 1-length strings, which can improve performance dramatically for string-intensive programs. I also performed a long-overdue rewrite of the virtual function detection code, which should work much more reliably now, at least for relatively simple cases :)&lt;br /&gt;&lt;br /&gt;0.0.24:&lt;br /&gt;-1-length string caching&lt;br /&gt;&lt;br /&gt;0.0.25&lt;br /&gt;-improved detection of virtual functions&lt;br /&gt;-further set optimizations&lt;br /&gt;-fix for extension modules and certain default arguments&lt;br /&gt;-exhaustive checking of C++ keywords&lt;br /&gt;-fix for some combinations of arguments to min, max&lt;br /&gt;-several minor bug fixes&lt;br /&gt;&lt;br /&gt;As always, I could really use more help in pushing Shed Skin forward. Let me know if you'd like to help out, but are not sure where to begin.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/10/shed-skin-0024-0025.html' title='Shed Skin 0.0.24, 0.0.25'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=2356973883775887883' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/2356973883775887883/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/2356973883775887883'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/2356973883775887883'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-1774513631478070965</id><published>2007-08-20T05:48:00.001-07:00</published><updated>2007-08-20T05:49:36.638-07:00</updated><title type='text'>Shed Skin 0.0.23</title><content type='html'>I have just released Shed Skin 0.0.23. It doesn't contain the type inference scalability improvements I was working on, but it does have quite a few bug fixes and minor feature additions. Here's a list of changes:&lt;br /&gt;&lt;br /&gt;-support for __iadd__, __imul__ and such (except __ipow__ and __imod__)&lt;br /&gt;-some overdue set optimizations&lt;br /&gt;-fix for string formatting problem (%% did not always work)&lt;br /&gt;-extension module stability fixes&lt;br /&gt;-fix for particular inheritance problem&lt;br /&gt;-other minor bugfixes, cleanups, and error messages&lt;br /&gt;&lt;br /&gt;I could really use some systematic help in pushing Shedskin further. Some ideas:&lt;br /&gt;&lt;br /&gt;-send in bug reports - these are extremely valuable and motivating to me, yet I don't receive many..&lt;br /&gt;-find out why test 148 is currently broken under windows&lt;br /&gt;-add datetime, re or socket support&lt;br /&gt;-look into supporting custom classes in generated extension modules&lt;br /&gt;-write a Shedskin tutorial for 'novice' programmers&lt;br /&gt;-systemically test performance and suggest and work on improvements&lt;br /&gt;-investigate replacements for std::string and __gnu_cxx::hash_set&lt;br /&gt;-perform janitorial-type work in ss.py and lib/builtin.?pp&lt;br /&gt;-support extension modules under OSX (OSX gives me accute mental RSI)&lt;br /&gt;-add more tests to unit.py</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/08/shed-skin-0023.html' title='Shed Skin 0.0.23'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=1774513631478070965' title='6 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/1774513631478070965/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/1774513631478070965'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/1774513631478070965'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-504887042066705487</id><published>2007-06-29T02:18:00.000-07:00</published><updated>2007-07-03T13:02:38.421-07:00</updated><title type='text'>Shed Skin 0.0.22</title><content type='html'>after being bogged down with work for a few weeks, I got back to development again. the trigger was a proof-of-concept patch sent in by Harri Pasanen for generating extension modules. previously I was waiting for someone else to fully tackle this, but his patch was quite simple, and I found out it easily works under mingw, too. so I generalised things a bit, and released it as part of version 0.0.22. the process of building an extension module is now quite simply 'ss -e ..' and 'make' (note it doesn't work under OSX, yet).&lt;br /&gt;&lt;br /&gt;there are some limitations though as to the way this works:&lt;br /&gt;&lt;br /&gt;-only builtin scalar and containers can be passed/returned (int, float, str, list, tuple, dict, set)&lt;br /&gt;-arguments/returned objects are completely copied/converted at call/return time (i.e., including contained objects)&lt;br /&gt;-global variables are considered constant, and converted at module initialization time&lt;br /&gt;&lt;br /&gt;consider this simple program, mod_name.py:&lt;br /&gt;&lt;br /&gt;some_var = [1,2,3]&lt;br /&gt;&lt;br /&gt;def some_func(x):&lt;br /&gt;      return 2*x&lt;br /&gt;&lt;br /&gt;if __name__ == '__main__':&lt;br /&gt;      some_func(1)    # obviously, this is needed for type inference to work&lt;br /&gt;&lt;br /&gt;to compile this down to an extension module, simply use the new '-e' command-line parameter:&lt;br /&gt;&lt;br /&gt;ss -e mod_name&lt;br /&gt;make&lt;br /&gt;&lt;br /&gt;that's it. now the program can be used from an arbitrary python program/prompt:&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt;import mod_name&lt;br /&gt;&gt;&gt;&gt;dir(mod_name)&lt;br /&gt;&gt;&gt;&gt;mod_name.some_var&lt;br /&gt;&gt;&gt;&gt;mod_name.some_func(1)&lt;br /&gt;&lt;br /&gt;I'm hoping someone else can add support for custom classes and find out how to get this to work under OSX!</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/06/shed-skin-0022.html' title='Shed Skin 0.0.22'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=504887042066705487' title='11 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/504887042066705487/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/504887042066705487'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/504887042066705487'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-117498002175748527</id><published>2007-03-27T01:10:00.000-07:00</published><updated>2007-03-27T01:27:17.203-07:00</updated><title type='text'>Shed Skin 0.0.20 and 0.0.21</title><content type='html'>development has been continuing at a steady pace, resulting in two new releases. I haven't gotten around to cleaning up and improving tuple support, as of course I got bogged down into other details. the first release essentially combines many minor fixes: &lt;br /&gt;&lt;br /&gt;Release Name: 0.0.20&lt;br /&gt;-improvements to aug-assignments with subscripting ('a[x, y] += 1' and such)&lt;br /&gt;-fixed some problems with slice-assignments ('a[1:-1] = [1,2])&lt;br /&gt;-make integer division (/,//,divmod,floordiv) equal to CPython for negative/positive combinations of arguments&lt;br /&gt;-make printing of floats closer to CPython&lt;br /&gt;-move generic functions/methods to header file&lt;br /&gt;-many small fixes (allow 'self' as function argument, list.extend takes iterable, __delitem__ overloading, raw_input(), 'return' from generator..)&lt;br /&gt;-improved error checking for dynamic types&lt;br /&gt;-optimize expr**2 and expr**3 using __power2 and __power3 functions&lt;br /&gt;&lt;br /&gt;the next release is more interesting. first, a problem exhibited in a little program bearophile sent me (I wish there were two bearophiles :-)) gave me the insight that two things I was doing during type inference were more or less the same; this allowed me to generalize things and cut away about 100 lines. second, I added support for 'bisect', 'collections.deque' and improved 'copy' support. finally, there were some important dict optimizations (dict[..] += .. and dict.__getitem__ now only index once):&lt;br /&gt;&lt;br /&gt;Release Name: 0.0.21&lt;br /&gt;-important type inference fix/cleanup&lt;br /&gt;-support for 'bisect', 'collections.deque' and 'string.maketrans'&lt;br /&gt;-improved 'copy' support&lt;br /&gt;-support for 'try, else' construction&lt;br /&gt;-some optimizations ('dict[..] += ..', "''.join(sorted(str))")&lt;br /&gt;-several minor bug fixes</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/03/shed-skin-0020-and-0021.html' title='Shed Skin 0.0.20 and 0.0.21'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=117498002175748527' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/117498002175748527/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/117498002175748527'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/117498002175748527'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-117127248772032414</id><published>2007-02-12T01:07:00.000-08:00</published><updated>2007-02-12T01:28:07.740-08:00</updated><title type='text'>Shed Skin 0.0.19</title><content type='html'>I have just released 0.0.19, with some interesting changes. Iterators and generators are supported now. Full random support was contributed by a user (thanks Jeff :-)), by converting a Python version to C++ using Shedskin. Interestingly, by default it uses the same random engine (Mersenne Twister) as CPython, so the two behave exactly the same. Jeff is now thinking about how to add fast matrix support, which would be really nice to have.. But there were also many small fixes in this release. Here is the sourceforge changelog:&lt;br /&gt;&lt;br /&gt;-iterator and generator support (no generator expressions yet)&lt;br /&gt;-full support for random module (converted from Python version)&lt;br /&gt;-added itertools.{count, repeat, cycle}, dict.{iterkeys, itervalues, iteritems}&lt;br /&gt;-added 3-argument integer version of __builtin__.pow&lt;br /&gt;-logical and, or operations have correct return value now (e.g., '3 and 4')&lt;br /&gt;-lots of minor bug fixes (improved % operator, added math.pow..)&lt;br /&gt;&lt;br /&gt;The main focus for 0.0.20 will probably be to add support for tuples, with differently typed elements, of length greater than 2, up to some arbitrary length..</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/02/shed-skin-0019.html' title='Shed Skin 0.0.19'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=117127248772032414' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/117127248772032414/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/117127248772032414'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/117127248772032414'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116989161113096939</id><published>2007-01-27T01:49:00.000-08:00</published><updated>2007-01-27T01:58:39.043-08:00</updated><title type='text'>Another Raytracer</title><content type='html'>here's the output of a raytracer in python, called yopyra, by carlos gonzales, after being compiled by shedskin. the speedup is about the same as for the pygmy raytracer, that is part of the unit tests (for this picture it is about 60). I will probably add this program to ss-progs, but I need to remove one hack to support it, and bearophile (who sent me the raytracer) is still adding some nice features, like the ability to read scenes from a file, and render parts of a picture, so it's easy to put those multiple cores to use..&lt;br /&gt;&lt;br /&gt;&lt;a href=http://mark.dufour.googlepages.com/scene.txt.jpg&gt;http://mark.dufour.googlepages.com/scene.txt.jpg&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/01/another-raytracer.html' title='Another Raytracer'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116989161113096939' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116989161113096939/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116989161113096939'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116989161113096939'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116911923853561158</id><published>2007-01-18T03:15:00.000-08:00</published><updated>2007-01-18T03:20:38.536-08:00</updated><title type='text'>Shed Skin 0.0.18</title><content type='html'>yes, it's the fourth release of shed skin in about a month. can you tell I'm working on it full-time now? :) here's a list of major changes:&lt;br /&gt;&lt;br /&gt;-modifications to work on OSX and 64-bit systems&lt;br /&gt;-improved support for class attributes&lt;br /&gt;-classes can now be used prior to their definition&lt;br /&gt;-several optimizations and fixes for strings&lt;br /&gt;-hash value caching for strings and tuple{int,double,str}&lt;br /&gt;-optional bounds checking using --bounds&lt;br /&gt;&lt;br /&gt;thanks to jplevyak, larry, gustavo and denis for helping to get SS to work on 64-bit and OSX systems!&lt;br /&gt;&lt;br /&gt;note that it's very hard for CPython to cache hash values for tuples (because the elements might be mutable). once types are known however, e.g., for tuple&lt;int&gt;, SS can cache hash values no problem. this can cause quite a speedup.. for example, the following program is now 10 times faster than under CPython (corresponding to the 10 loop iterations):&lt;br /&gt;&lt;br /&gt;sign_words = {}&lt;br /&gt;kawamabahana = 10000000*(1,2)&lt;br /&gt;for x in range(10):&lt;br /&gt;    hash(kawamabahana)&lt;br /&gt;&lt;br /&gt;I'm going to take a few days off now, and think about a strategy to add iterators (and hence generators and generator expressions), and possibly non-uniform tuples of length greater than 2..</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/01/shed-skin-0018.html' title='Shed Skin 0.0.18'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116911923853561158' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116911923853561158/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116911923853561158'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116911923853561158'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116896835467912596</id><published>2007-01-16T09:18:00.000-08:00</published><updated>2007-01-18T03:15:03.116-08:00</updated><title type='text'>24 programs that work</title><content type='html'>I'm collecting programs that work out-of-the-box with Shedskin CVS, to add to the homepage before releasing 0.0.18 (which should be out within the next few days). So far, I have 24 programs, at a total of about 6,000 lines:&lt;br /&gt;&lt;br /&gt;http://mark.dufour.googlepages.com/ss-progs.tgz&lt;br /&gt;&lt;br /&gt;Please let me know if you have an interesting program I might add to this set. If someone else would like to perform some testing (analysis time and comparing performance with CPython and Psyco, for example), that would be great.&lt;br /&gt;&lt;br /&gt;update: __tim__ pointed me to the nbody debian language shootout test, which becomes about 100 times faster here. I added it to ss-progs.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/01/24-programs-that-work.html' title='24 programs that work'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116896835467912596' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116896835467912596/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116896835467912596'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116896835467912596'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116851781934285842</id><published>2007-01-11T04:15:00.000-08:00</published><updated>2007-01-11T04:16:59.353-08:00</updated><title type='text'>Shed Skin 0.0.17</title><content type='html'>And here goes 0.0.17, with some interesting fixes:&lt;br /&gt;&lt;br /&gt;-support for assignment lists, so e.g. '[[a,b],[c,d]] = matrix' and 'for [[a,b],[c,d]] in matrices: ..' work now&lt;br /&gt;-'_' can be used as special assignment target (expression is not assigned), e.g. '[[a,_],_] = matrix' works now&lt;br /&gt;-support for '__name__' attribute of modules, so e.g. "if '__name__' == '__main__'" works now&lt;br /&gt;-various improvements in exception handling (AssertionError, except some_tuple, ..)&lt;br /&gt;-limit on tuple/list unpacking removed, so e.g. a,b,c,d,e,f = some_tuple works now&lt;br /&gt;-improved printing of floats (using "%g" instead of "%f")</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2007/01/shed-skin-0017.html' title='Shed Skin 0.0.17'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116851781934285842' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116851781934285842/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116851781934285842'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116851781934285842'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116740015962735138</id><published>2006-12-29T05:44:00.000-08:00</published><updated>2006-12-29T06:25:21.346-08:00</updated><title type='text'>Approaching 0.1</title><content type='html'>After 0.0.15 I have quickly released 0.0.16. It essentially adds frozenset and fixes some bugs, as reported by users of 0.0.15. The next release is coming along nicely too, and should be ready within about a week. Here's a list of changes:&lt;br /&gt;&lt;br /&gt;-added frozenset&lt;br /&gt;-time.sleep now works on WIN32&lt;br /&gt;-constant-string expressions and __doc__ attributes are made into nice C++ comments&lt;br /&gt;-added --nowrap optimization option to ss.py (disables checking for negative indices)&lt;br /&gt;-several minor bug-fixes reported by users of 0.0.15&lt;br /&gt;&lt;br /&gt;Because I have a huge amount of spare time coming up to work on Shed Skin, I have started to think about what is necessary to do a 0.1 release. These are currently the most important shortcomings:&lt;br /&gt;&lt;br /&gt;-support for iterators, generators and generator expressions&lt;br /&gt;&lt;br /&gt;The first two seem mostly a case of how to do this nicely in C++, and the latter one seems easy.&lt;br /&gt;&lt;br /&gt;-support for tuples t of len &gt; 2 and with different types of elements&lt;br /&gt;&lt;br /&gt;Again this seem mostly a case of how to do this nicely in C++.  I'm looking forward to finding out how to do this.&lt;br /&gt;&lt;br /&gt;-scalability of the type analysis&lt;br /&gt;&lt;br /&gt;Because of all the details involved in doing a python compiler, I still haven't focused on this too much. The basic techniques seem to work very well, but I have many ideas yet to work out to improve scalability. Based on my work so far, I'm convinced it is possible to quickly analyze most programs up to a few thousands lines, even without any form of profiling.&lt;br /&gt;&lt;br /&gt;-two-way integration with CPython&lt;br /&gt;&lt;br /&gt;There may be some progress at this front, as another developer has decided to look into using boost.python for this purpose. It's rather exciting to see small fragments of this work already. If anything, it has made me optimistic about having something like this work in the near future.&lt;br /&gt;&lt;br /&gt;-some optimizations: strings (replace std::string), indexing (remove wrap-around checks by proving an index expression is always positive), heap allocation (transform heap allocation into stack- and static preallocation, when possible)&lt;br /&gt;&lt;br /&gt;While not essential for a 0.1 release, an important goal of Shed Skin is to generate really fast code. Especially the latter optimization would be a great master's thesis subject.. :-)</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/12/approaching-01.html' title='Approaching 0.1'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116740015962735138' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116740015962735138/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116740015962735138'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116740015962735138'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-116559015387126806</id><published>2006-12-08T06:52:00.000-08:00</published><updated>2006-12-08T07:19:55.526-08:00</updated><title type='text'>Shed Skin 0.0.15</title><content type='html'>After being distracted by my work for a few months, I'm finally back to Shed Skin development. It's interesting how the same boring programming work is more fun when you don't get paid for it! Anyway, I hope to work on Shed Skin full-time for at least the next three months, which should lead to several interesting improvements. I'm not sure exactly which those will be yet, as I never really plan ahead much.&lt;br /&gt;&lt;br /&gt;For starters, I updated Shed Skin to work with the newly released Python version 2.5. As part of this, I added support for the new 'any' and 'all' keywords and for conditional expressions. The new Shed Skin release (0.0.15)  also comes with support for several, previously unsupported library functions. IIRC, these are:&lt;br /&gt;&lt;br /&gt;os.path.{split, splitext, islink, isdir, isfile, exists}&lt;br /&gt;os.{stat, lstat, rename, chdir}&lt;br /&gt;stat.*&lt;br /&gt;fnmatch.{fnmatch, fnmatchcase}&lt;br /&gt;random.{seed, sample}&lt;br /&gt;&lt;br /&gt;Because quite some library modules are now (partially) supported, I moved all of them to a separate 'lib' directory. Because the ugly '_' in filenames is not needed anymore, this makes it much easier to add to the set of libraries supported by Shed Skin (hint, hint!) If you are interested in doing so, please have a look at the updated README file.&lt;br /&gt;&lt;br /&gt;The os.path.* and stat.* support was added by running Shed Skin over (slightly modified) pure Python implementations, taken from the PyPy project. I am getting more and more optimistic about this approach, improving the amount of supported library functions, helping  me to locate bugs and motivating me to fix them all at the same time.  The next module I may look into is the 're' module, which should help me locate a few more bugs, and help me to add support for other modules that make use of it. Please let me know if you're interested in helping out increasing the number of supported libraries, as there's probably lots of low-hanging fruit.&lt;br /&gt;&lt;br /&gt;Most of the newly supported functionality was added in anticipation of compiling an interesting program I found. After messing around with Amarok, Gtkpod, Gnu-pod and what not, I finally found a program to reprogram the database on Apple's latest iPod shuffle (the 15.5 gram 1 GB one :D) that actually worked. Needless to say, it was written in Python.. :-) One interesting application is to put it on the shuffle itself, so you can run it from any computer. The downside is the dependency on CPython. Looking through the code, at about 600 lines, it looked like a potential victim for Shed Skin. The author agreed, and hopefully Shed Skin generated code will be on many iPod's in the near future :-) Here's the link to the program:&lt;br /&gt;&lt;br /&gt;http://shuffle-db.sourceforge.net/</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/12/shed-skin-0015.html' title='Shed Skin 0.0.15'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=116559015387126806' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/116559015387126806/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/116559015387126806'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/116559015387126806'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-115537615230683131</id><published>2006-08-12T02:40:00.000-07:00</published><updated>2006-08-12T02:49:12.316-07:00</updated><title type='text'>Shed Skin 0.0.14, 1600-line program</title><content type='html'>hi all (two readers :-))&lt;br /&gt;&lt;br /&gt;it's been a while, but I've been hard at work improving Shedskin. I actually got paid for about a month, to support a certain 1600-line program. it compiles fine now, so that means it's a new record :-) I'm hoping very much to find another job like this, so if your boss might be interested in paying me to do a 'cheap' translation of some Python program to C++, please let me know. I don't need a lot of money to support myself :-)&lt;br /&gt;&lt;br /&gt;okay, so what's new in this release:&lt;br /&gt;- string formatting has been hugely improved, so most combinations of flags and types should give the same result as in Python now&lt;br /&gt;-several new imports are supported now: getopt.getopt, cStringIO.StringIO, string.*, os.{getenv, getcwd}, and shedskin-specific (typed) versions of struct.{pack, unpack}: struct.{pack_ints, unpack_ints}, that may be useful.&lt;br /&gt;-many, many bugfixes, resulting from debugging a 1600-line program :-)&lt;br /&gt;&lt;br /&gt;interestingly, getopt.getopt is supported by taking a pure Python implementation (in this case, from the PyPy project) and compiling it to C++ :-) in the future, I think this technique can be used to support several other modules (possibly 're'), helping me locate bugs in Shedskin and improve the amount of supported libraries at the same time.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/08/shed-skin-0014-1600-line-program.html' title='Shed Skin 0.0.14, 1600-line program'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=115537615230683131' title='6 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/115537615230683131/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/115537615230683131'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/115537615230683131'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-115281966737461022</id><published>2006-07-13T12:32:00.000-07:00</published><updated>2006-07-13T12:42:00.196-07:00</updated><title type='text'>shortest sudoku solver</title><content type='html'>bearophile sent me a link to this really cool program:&lt;br /&gt;&lt;br /&gt;def r(a):i=a.find('0');~i or exit(a);[m&lt;br /&gt;in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for&lt;br /&gt;j in range(81)]or r(a[:i]+m+a[i+1:])for m in'%d'%5**18]&lt;br /&gt;from sys import*;r(argv[1])&lt;br /&gt;&lt;br /&gt;apparently it's a sudoku solver (couldn't you guess?). here's more information about it:&lt;br /&gt;&lt;a href="http://markbyers.com/ShortestSudokuSolver.html"&gt;ShortestSudokuSolver&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;unfortunately, it mixes integers and strings ((i-j).. or a[j]) and arbitrary-size arithmetic (5**18), both of which  are currently not supported by shed skin. the arbitrary-size arithmetic could be supported in this case, but I rewrote it for now. here's a version that works with shed skin CVS:&lt;br /&gt;&lt;br /&gt;def r(a):&lt;br /&gt;i=a.find('0')&lt;br /&gt;if not ~i: print a; exit()&lt;br /&gt;[m in [a[j] for j in range(81) if not (i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)] or r(a[:i]+m+a[i+1:]) for m in '3814697265625']&lt;br /&gt;from sys import *;r(argv[1])&lt;br /&gt;&lt;br /&gt;it's 211 characters, versus the 178 of the one above, so that's not too bad :) and it becomes 18 times faster here.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/07/shortest-sudoku-solver.html' title='shortest sudoku solver'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=115281966737461022' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/115281966737461022/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/115281966737461022'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/115281966737461022'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-115277992605370824</id><published>2006-07-13T01:35:00.000-07:00</published><updated>2006-07-13T03:13:29.806-07:00</updated><title type='text'>basic pygame support</title><content type='html'>&lt;a href="http://mark.dufour.googlepages.com/fysphun.png"&gt;http://mark.dufour.googlepages.com/fysphun.png&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;this shows an interactive graphical program working with shed skin :-) the user can drag around points, and the connected 'bodies' move around realistically. to get this to work, I had to add basic pygame support (drawing points , lines, event handling). doing this was an interesting experience - I now feel it should be not too difficult to autogenerate bindings to many libraries, based on 1) a simple type model (manually written, see *_.py) and 2) the results of type inference. because my job requires me to implement/bridge some library calls, maybe I can be paid to work on this. hmm..</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/07/basic-pygame-support.html' title='basic pygame support'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=115277992605370824' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/115277992605370824/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/115277992605370824'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/115277992605370824'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-115196027822632739</id><published>2006-07-03T13:54:00.000-07:00</published><updated>2006-07-03T14:05:56.803-07:00</updated><title type='text'>Shed Skin 0.0.11, give me money</title><content type='html'>I have just released Shed Skin 0.0.11. It contains several important fixes again (see test 162). Most notably, lambda support is greatly improved (especially in an OO setting), and casting of incomplete types is re-enabled (so you can do e.g. ()+(5,), a = [[1]]; a = [[]] and such).&lt;br /&gt;&lt;br /&gt;In other news, I will probably be paid on a temporary basis this summer, to support a certain 1600-line program. Please let me know if you have a Python program/prototype that you'd like to have converted to C++, and I can probably tell you how much time this would take me.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/07/shed-skin-0011-give-me-money.html' title='Shed Skin 0.0.11, give me money'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=115196027822632739' title='9 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/115196027822632739/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/115196027822632739'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/115196027822632739'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-115038167528282641</id><published>2006-06-15T07:26:00.000-07:00</published><updated>2006-06-15T07:27:55.293-07:00</updated><title type='text'>Shed Skin 0.0.10, Summer of Code 2006</title><content type='html'>I have just released Shed Skin 0.0.10. besides several important bug fixes (see test 161), it contains many new error messages for unsupported features and dynamic (sub)types.  this should make it much easier to try out Shed Skin and work around basic problems. please try it out and let me know about any problems/successes ^^&lt;br /&gt;&lt;br /&gt;in other news, a Shed Skin proposal has again been accepted in this year's Summer of Code. the student will investigate memory optimizations more deeply than I have done for my thesis, and implement both a stack allocation and static preallocation technique. we expect to start discussing the topic on the shed skin mailing list in the coming weeks.&lt;br /&gt;&lt;br /&gt;finally, phillip hassey (also a Python SoC mentor) suggested an interesting idea: to automatically create *_.py files from pure C++ library header files, so compiled code can directly use many C++ libraries. this shouldn't be too difficult (the header files contain all type information), and has very interesting potential.. please let me know if you'd like to work on this!</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/06/shed-skin-0010-summer-of-code-2006.html' title='Shed Skin 0.0.10, Summer of Code 2006'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=115038167528282641' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/115038167528282641/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/115038167528282641'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/115038167528282641'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-114790194954704386</id><published>2006-05-17T14:29:00.000-07:00</published><updated>2006-05-17T14:40:05.990-07:00</updated><title type='text'>pystone/richards benchmarks, upcoming 0.0.9</title><content type='html'>I have been working over the past few days to get the pystone and richards benchmarks compiling well. as they do now, I added them to the test set. both are very simple from a type inference perspective, but they did help me uncover and fix several minor and a few major issues. &lt;br /&gt;&lt;br /&gt;the speedups on my computer are about 10 for pystone and 185 (!) for richards. the latter is probably due to the fact that richards is heavily OO, and C++ compilers know how to efficiently implement that! :-)&lt;br /&gt;&lt;br /&gt;I hope to release a 0.0.9 version within a few weeks, with these and some other changes. there is one problem that I have observed a few times now, that I would like to fix before that. sometimes, type information is lost during inference, so that results are incomplete.. I think I know what causes the problem.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/05/pystonerichards-benchmarks-upcoming.html' title='pystone/richards benchmarks, upcoming 0.0.9'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=114790194954704386' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/114790194954704386/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/114790194954704386'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/114790194954704386'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-114665690477271325</id><published>2006-05-03T04:46:00.000-07:00</published><updated>2006-05-03T04:52:50.990-07:00</updated><title type='text'>Shed Skin 0.0.8, new website, Google SoC/Thesis?</title><content type='html'>I have just released Shed Skin 0.0.8. for this version, I removed about 1000 lines (mostly memory optimizations - so the compiler is now less than 6000 lines!), cleaned up stuff a bit (it's still a monolithic file though), added/completed more string methods and applied many minor bugfixes and several more error messages, based on Bearophile's list of known bugs. thanks man! :-)&lt;br /&gt;&lt;br /&gt;I also created a simple Shed Skin 'homepage' and modified the README, to better introduce Shed Skin to people. please modify any links to my blog or the sourceforge site to this page - see the link on the right. please let me know if you think I should change something.&lt;br /&gt;&lt;br /&gt;now that the source code is becoming pretty clean, and there are many largish test programs that run well (see Section 5 of me thesis!), the time seems right to invite other people to join the project, and look into some important aspect I don't have enough time for/interest in. there are three important things that can be investigated relatively separately:&lt;br /&gt;&lt;br /&gt;-I removed my simple memory optimizations (turning heap allocation into stack- and static preallocation). this is a fascinating subject, with a lot of existing techniques coming from the Java community. as can be seen from my thesis, it can really help performance as well. I just never had the time to properly investigate it.&lt;br /&gt;&lt;br /&gt;-SS currently uses the bloody C++ STL string type, which makes it really slow for string-intensive programs. it would be really nice to have a more efficient (preferrably OO) string type, possibly using Psyco-like techniques. since I never really use strings much, I do not have enough interest in this myself, but I recognize the importance.&lt;br /&gt;&lt;br /&gt;-integration of Python code and compiled code remains a hassle. currently, a lot of manual work is needed to provide 'bindings'. it would be great to somehow have a (semi-)automated process,  to enable compiled code to at least use the standard library, and to be able to easily call compiled code from Python programs.&lt;br /&gt;&lt;br /&gt;if you are interested in any of these three topics, note that the deadline for the Google Summer of Code 2006 is in about a week. since SS got accepted last year, and there will probably be more slots for Python this year, this might be worth a try! let me know, and we can cook up a proposal together.&lt;br /&gt;&lt;br /&gt;the first topic (memory optimization) is also a great topic for doing a Master's/PhD Thesis. unfortunately, Robert could not find a mentor for this. please let me know if you are interested, or you know of a compiler-savvy (Master/PhD) student that might be interested!</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/05/shed-skin-008-new-website-google.html' title='Shed Skin 0.0.8, new website, Google SoC/Thesis?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=114665690477271325' title='10 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/114665690477271325/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/114665690477271325'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/114665690477271325'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-114600458548378135</id><published>2006-04-25T15:25:00.000-07:00</published><updated>2006-04-25T15:36:25.493-07:00</updated><title type='text'>Master's Thesis</title><content type='html'>I haven't been putting as much effort as I'd like into SS development lately, because of writing my Master's Thesis. I have added a link to the resulting document to the links on the right. There are some interesting performance measurements inside. For a benchmark set of 16 programs, SS typically results in a speedup factor of 2-40 versus Psyco, 12 on average, and 2-220 versus CPython, 45 on average. &lt;br /&gt;&lt;br /&gt;As for the future, I've decided to drop all memory optimizations (stack and static preallocation), since I never really put much thought into them, and they only help 'marginally' (since I did not do them well :P) I'm also discontinuing my 'char type' work, and any ideas about automatically connecting to the standard library. This is so that I can focus on the core type inference and code generation stuff.. Which I hope to continue soon :-)</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/04/masters-thesis.html' title='Master&apos;s Thesis'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=114600458548378135' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/114600458548378135/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/114600458548378135'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/114600458548378135'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-14063458.post-113836355684762821</id><published>2006-01-27T03:58:00.000-08:00</published><updated>2006-01-27T05:24:40.663-08:00</updated><title type='text'>Shed Skin 0.0.6</title><content type='html'>Here goes 0.0.6.. :)&lt;br /&gt;&lt;br /&gt;With the help of Bearophile, I optimized list comprehensions and iteration a bit further. Programs are now also compiled together with the builtins, which can greatly improve performance in some cases. For example, the Pythonchess speed test engine now becomes about 22 times faster on my computer. Please check it out, and let me know about any problems you encounter. &lt;br /&gt;&lt;br /&gt;For 0.0.7, I am working on a 'char' type. That is, let the compiler use the C++ 'char' type whenever programs are working with strings of length one. This dramatically improves the speed of programs that use strings of length 1 and/or 'string[index]' a lot. If you'd like to try it out, keep a watch on CVS, because I will commit this change soon, and let me know about any problems.</content><link rel='alternate' type='text/html' href='http://shed-skin.blogspot.com/2006/01/shed-skin-006.html' title='Shed Skin 0.0.6'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=14063458&amp;postID=113836355684762821' title='11 Comments'/><link rel='replies' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/113836355684762821/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://shed-skin.blogspot.com/feeds/posts/default/113836355684762821'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/14063458/posts/default/113836355684762821'/><author><name>srepmub</name><uri>http://www.blogger.com/profile/15831320699731673389</uri><email>noreply@blogger.com</email></author></entry></feed>