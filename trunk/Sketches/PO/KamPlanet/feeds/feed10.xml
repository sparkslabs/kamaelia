<?xml version='1.0' encoding='utf-8' ?>
<!--  If you are running a bot please visit this policy page outlining rules you must respect. http://www.livejournal.com/bots/  -->
<rss version='2.0' xmlns:lj='http://www.livejournal.org/rss/lj/1.0/'>
<channel>
  <title>For surely there is an end ...</title>
  <link>http://baijum81.livejournal.com/</link>
  <description>For surely there is an end ... - LiveJournal.com</description>
  <lastBuildDate>Thu, 24 Apr 2008 10:07:32 GMT</lastBuildDate>
  <generator>LiveJournal / LiveJournal.com</generator>
  <lj:journal>baijum81</lj:journal>
  <lj:journaltype>personal</lj:journaltype>
  <image>
    <url>http://p-userpic.livejournal.com/74668699/4832207</url>
    <title>For surely there is an end ...</title>
    <link>http://baijum81.livejournal.com/</link>
    <width>100</width>
    <height>100</height>
  </image>

<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/26942.html</guid>
  <pubDate>Thu, 24 Apr 2008 10:07:32 GMT</pubDate>
  <title>Buildout and setuptools</title>
  <link>http://baijum81.livejournal.com/26942.html</link>
  <description>(A comment to &lt;a href=&quot;http://palladion.com/home/tseaver/obzervationz/2008/bulidout_vs_plain_setuptools&quot;&gt;blog post by Tres Seavor&lt;/a&gt; -- I can&apos;t figure out how to add comment there, so this post.)&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://pypi.python.org/pypi/zc.buildout&quot;&gt;Buildout&lt;/a&gt; is build tool which can be used for any Python packages and&lt;br /&gt;not something only for Zope.  Since it is created Jim Fulton, the Zope&lt;br /&gt;Pope, naturally there are many early adopters from Zope community.&lt;br /&gt;Buildout itself may not be enough for all purposes, but it can be&lt;br /&gt;extended using &quot;recipes&quot;, the extension mechanism provided by&lt;br /&gt;Buildout.  Buildout use setuptools, but it&apos;s not for replacing it.&lt;br /&gt;You can make use all features of setuptools while using Buildout.  So,&lt;br /&gt;all the strengths of setuptools are available for Buildout also.&lt;br /&gt;&lt;br /&gt;A buildout.cfg of a Python need not to have duplicate information&lt;br /&gt;given in setup.py .  For example, a typical configuration file for a&lt;br /&gt;package will be like this:&lt;br /&gt;&lt;pre&gt;
   [buildout]
   develop = .
   parts =
&lt;/pre&gt;&lt;br /&gt;As you can see above there is no additional detail, the only&lt;br /&gt;information given is the packages required to be developed.&lt;br /&gt;(Here . means package in the current directory)&lt;br /&gt;&lt;br /&gt;As you know any build system should have some kind of configuration,&lt;br /&gt;if you think its a clutter, well I don&apos;t know what to say.&lt;br /&gt;&lt;br /&gt;Most of the packages are setuptools based and so you can run any&lt;br /&gt;command provided by setuptools.  But if you want to get the benefits&lt;br /&gt;of using Buildout you should learn the Buildout system.  Then you will&lt;br /&gt;be able to overcome the &quot;foreign feeling&quot;.&lt;br /&gt;&lt;br /&gt;As I said, Buildout doesn&apos;t prevent you from running any setuptools&lt;br /&gt;command.  For example if your package&apos;s setup.py is configured to run&lt;br /&gt;&apos;test&apos; command, you can run it.  There are some buildout recipe which&lt;br /&gt;helps you to run tests in some weired way, but that is not a problem&lt;br /&gt;of buildout !  That recipe may have it&apos;s own reason for doing it that&lt;br /&gt;way, like handle extra dependencies, be more explicit, use a&lt;br /&gt;particular test runner etc..  If you don&apos;t want this recipe, it&apos;s OK,&lt;br /&gt;use your old setuptools test mechanism.</description>
  <comments>http://baijum81.livejournal.com/26942.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/25223.html</guid>
  <pubDate>Tue, 18 Dec 2007 06:20:44 GMT</pubDate>
  <title>Some updates</title>
  <link>http://baijum81.livejournal.com/25223.html</link>
  <description>* My &lt;a href=&quot;http://foss.in/2007/register/speakers/talkdetailspub.php?talkid=432&quot;&gt;FOSS.IN/2007 talk about Zope&lt;/a&gt; went well, There was about 40&lt;br /&gt;   people for my talk.&lt;br /&gt;&lt;br /&gt; * FOSS.IN/2007 was a great experience, even though there was no Python&lt;br /&gt;   talk, Python was everywhere.  I heard people mentioning Python&lt;br /&gt;   during many talks.  There was three Zope related talks.  The&lt;br /&gt;   lightning talks timer program was created in Python, there was many&lt;br /&gt;   BangPypers wandering around the place.  Unfortunately, we couldn&apos;t&lt;br /&gt;   arrange one BoF.&lt;br /&gt;   &lt;br /&gt; * &lt;a href=&quot;http://muthukadan.net/docs/zca.html&quot;&gt;ZCA book&lt;/a&gt; has a new &lt;a href=&quot;http://muthukadan.net/docs/zca-fr.html&quot;&gt;French translation&lt;/a&gt;.&lt;br /&gt;   I also &lt;a href=&quot;http://www.lulu.com/content/1561045&quot;&gt;self published this book at Lulu&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt; * &lt;a href=&quot;http://www.odinjobs.com/blogs/careers/entry/python_experts_why_they_do&quot;&gt;An interview with me and some other Python programmers&lt;/a&gt;.</description>
  <comments>http://baijum81.livejournal.com/25223.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/22412.html</guid>
  <pubDate>Tue, 25 Sep 2007 11:27:16 GMT</pubDate>
  <title>Why Zope community use namespace packages ?</title>
  <link>http://baijum81.livejournal.com/22412.html</link>
  <description>Zope project and the community in general use lots of namespaces&lt;br /&gt;packages.  Though, we have some non-namespace packages like&lt;br /&gt;ZODB3,ZConfig etc.  Zope community has created many namespaces&lt;br /&gt;for packages like `zope`, `zope.app`, `zc`, `z3c`, `lovely` etc.  Here&lt;br /&gt;`zc` stands for Zope Corporation, `z3c` for Zope 3 Community and&lt;br /&gt;lovely for Lovely Systems&apos; packages.&lt;br /&gt;&lt;br /&gt;Python is a language with namespace support at many levels.&lt;br /&gt;Remember, the last line of Zen of Python reads like this: &quot;Namespaces&lt;br /&gt;are one honking great idea -- let&apos;s do more of those!&quot;&lt;br /&gt;Take it positively, don&apos;t interpret it more ;)&lt;br /&gt;&lt;br /&gt;A namespace package will not have any method,class or any other&lt;br /&gt;objects defined in that level.  So a normal namespace package will be&lt;br /&gt;only having an empty `__init__.py` file.  Eggs and setuptools provides&lt;br /&gt;some new advantages for the distribution of namespace packages.  So,&lt;br /&gt;normally a namespace package&apos;s `__init__.py` file will contain&lt;br /&gt;something like this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt; import pkg_resources&lt;br /&gt; pkg_resources.declare_namespace(&apos;zope&apos;)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That&apos;s all you required to put in your namespace package&apos;s&lt;br /&gt;`__init__.py` file.  But you also will be required to add one more&lt;br /&gt;keyword argument for `setup` function in your `setup.py` script like&lt;br /&gt;this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;  namespace_packages=[&apos;zope&apos;]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can even have nested namespace packages, in that case you have to&lt;br /&gt;add it like this:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;  namespace_packages=[&apos;zope&apos;, &apos;zope.app&apos;],&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Remember, Zen of Python also says: &quot;Flat is better than nested.&quot; .&lt;br /&gt;Even though Zope use `zope.app` nested namespace package, Zope&lt;br /&gt;community discourage nested namespace packages.  The `zope.app`&lt;br /&gt;namespace may be consider as a mistake of Zope project.&lt;br /&gt;&lt;br /&gt;The `zope` and `zope.app` were the first namespace packages used by&lt;br /&gt;Zope.  I still remember &lt;a href=&quot;http://mail.zope.org/pipermail/zope3-dev/2006-December/021352.html&quot;&gt;the appraisal I got from Jim Fulton&lt;/a&gt; after&lt;br /&gt;implementing his proposal for making `zope.app` a pure namespace&lt;br /&gt;package.&lt;br /&gt;&lt;br /&gt;Here I will list some advantages of namespace packages.  Feel free to&lt;br /&gt;add/explain anything you found. :)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt; Better grouping for projects/community/companies&lt;/li&gt;&lt;li&gt;Better name for packages and don&apos;t worry about a name conflict&lt;/li&gt;&lt;li&gt;Re-use package name in different namespaces&lt;/li&gt;&lt;li&gt;Easy distribution as eggs&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;I think the last point requires bit explanation.  Consider two&lt;br /&gt;packages in same namespace, `zope.interface` and `zope.testbrowser`.&lt;br /&gt;In Python, package name is tied to directory structure.  So, in normal&lt;br /&gt;distutils based distribution both `interface` and `testbrowser` should&lt;br /&gt;be under `zope` directory.  But setuptools and eggs allows you to&lt;br /&gt;install both separately and still use both.&lt;br /&gt;&lt;br /&gt;Let&apos;s save some names for new generation smart Python programmers !&lt;br /&gt;Don&apos;t pollute top-level names, use namespace packages !!</description>
  <comments>http://baijum81.livejournal.com/22412.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/21857.html</guid>
  <pubDate>Fri, 14 Sep 2007 10:49:24 GMT</pubDate>
  <title>BangPypers mailing list moved to python.org !</title>
  <link>http://baijum81.livejournal.com/21857.html</link>
  <description>Today &lt;a href=&quot;http://randombytes.blogspot.com&quot;&gt;Anand B. Pillai&lt;/a&gt; (one of BangPypers list moderator and &lt;a href=&quot;http://www.harvestmanontheweb.com/&quot;&gt;HarvestMan&lt;/a&gt; fame) with help from Jeff Rush moved BangPypers mailing list from &lt;a href=&quot;http://tech.groups.yahoo.com/group/BangPypers/&quot;&gt;Yahoo! groups&lt;/a&gt; to &lt;a href=&quot;http://mail.python.org/mailman/listinfo/bangpypers&quot;&gt;python.org&lt;/a&gt;.  Thanks to Anand and Jeff Rush !&lt;br /&gt;&lt;br /&gt;The initial motivation for this move was Brad Allen from &lt;a href=&quot;http://dfwpython.org/&quot;&gt;Dallas Ft. Worth Pythoneers&lt;/a&gt;.  He had a talk (&quot;Python user groups unite!&quot;) at &lt;a href=&quot;http://barcampbangalore.org/wiki/BCB4_BangPypers&quot;&gt;Bangalore Barcamp 4&lt;/a&gt; in last july. He talked about Python advocacy and what Python user groups can do for this.  He also gave lots of tips for running a successful user group from his experience at Dallas group.  Thanks Brad for all this.&lt;br /&gt;&lt;br /&gt;BTW, There is mailing list created for &lt;a href=&quot;http://mail.python.org/mailman/listinfo/group-organizers&quot;&gt;&quot;Support and Mentoring of Usergroup Organizers (Current or Wannabe)&quot;&lt;/a&gt;.  Also there is a &lt;a href=&quot;http://mail.python.org/mailman/listinfo/usergroup-advocacy&quot;&gt;Usergroup advocacy&lt;/a&gt; list.</description>
  <comments>http://baijum81.livejournal.com/21857.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/21046.html</guid>
  <pubDate>Tue, 07 Aug 2007 08:21:01 GMT</pubDate>
  <title>BangPypers August meeting</title>
  <link>http://baijum81.livejournal.com/21046.html</link>
  <description>There will be a meeting of BangPypers at ThoughtWorks office this weekend.&lt;br /&gt;Venue and other details are here: &lt;a href=&quot;http://wiki.python.org/moin/BangPypers&quot;&gt;http://wiki.python.org/moin/BangPypers&lt;/a&gt;&lt;br /&gt;If you are interested, please add your name there.</description>
  <comments>http://baijum81.livejournal.com/21046.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/20775.html</guid>
  <pubDate>Mon, 21 May 2007 07:46:58 GMT</pubDate>
  <title>A quick look at some package repositories</title>
  <link>http://baijum81.livejournal.com/20775.html</link>
  <description>When I visited Python&apos;s cheese shop today, I stop for a moment at the total number of packages.  This raised my curiosity to look at other languages&apos; package repositories.&lt;br /&gt;&lt;br /&gt; 1. Perl (11643) &lt;a href=&quot;http://cpan.org/&quot;&gt;http://cpan.org/&lt;/a&gt;&lt;br /&gt; 2. Python (2392) &lt;a href=&quot;http://cheeseshop.python.org/pypi&quot;&gt;http://cheeseshop.python.org/pypi&lt;/a&gt;&lt;br /&gt; 3. Ruby (1587) &lt;a href=&quot;http://raa.ruby-lang.org/&quot;&gt;http://raa.ruby-lang.org/&lt;/a&gt;&lt;br /&gt; 4. PHP (442) &lt;a href=&quot;http://pear.php.net/packages.php&quot;&gt;http://pear.php.net/packages.php&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Well, I am not making any conclusion out of this, because there are many other factors required for an analysis.</description>
  <comments>http://baijum81.livejournal.com/20775.html</comments>
  <category>general</category>
  <category>python</category>
  <category>observation</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/18442.html</guid>
  <pubDate>Fri, 23 Feb 2007 13:46:53 GMT</pubDate>
  <title>FOSS MEET @ NITC 2007</title>
  <link>http://baijum81.livejournal.com/18442.html</link>
  <description>NIT Calicut [1] students organizing FOSS MEET @ NITC from March 2nd to&lt;br /&gt;4th [2].  I am looking forward to my talk about Zope component&lt;br /&gt;architecture during the event.  I am an alumni of this college.  So, I&lt;br /&gt;am really happy to go back to my college.  Few days back I started&lt;br /&gt;working on my slides and few other materials [3].&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; [1] &lt;a href=&quot;http://nitc.ac.in&quot;&gt;http://nitc.ac.in&lt;/a&gt;&lt;br /&gt; [2] &lt;a href=&quot;http://www.foss.nitc.ac.in&quot;&gt;http://www.foss.nitc.ac.in&lt;/a&gt;&lt;br /&gt; [3] &lt;a href=&quot;http://zissue.berlios.de/z3/zca.tar.bz2&quot;&gt;http://zissue.berlios.de/z3/zca.tar.bz2&lt;/a&gt;</description>
  <comments>http://baijum81.livejournal.com/18442.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/18372.html</guid>
  <pubDate>Sat, 06 Jan 2007 16:18:49 GMT</pubDate>
  <title>Zope 3, Bangalore, ZeOmega, Bangpypers</title>
  <link>http://baijum81.livejournal.com/18372.html</link>
  <description>This is my first blog entry in this year, so, Happy new Year!.  I implemented one proposal by Jim Fulton and committed to trunk two weeks back [1].  I moved to bangalore on 1st january as part of my new job at ZeOmega [2].  Then... well, today evening I attended BangPypers meet [3].&lt;br /&gt;&lt;br /&gt;Now I am in an internet browsing center near BDA Complex at Banasankari 2nd Stage in Bangalore.  This is for the first time I am coming to Bangalore.  I want to write more about this place and life. OK, will do it later.&lt;br /&gt;&lt;br /&gt; [1] &lt;a href=&quot;http://wiki.zope.org/zope3/LoadingConfigurationFromTheZopeAppEgg&quot;&gt;http://wiki.zope.org/zope3/LoadingConfigurationFromTheZopeAppEgg&lt;/a&gt;&lt;br /&gt; [2] &lt;a href=&quot;http://www.zeomega.com&quot;&gt;http://www.zeomega.com&lt;/a&gt;&lt;br /&gt; [3] &lt;a href=&quot;http://bangpypers.org/&quot;&gt;http://bangpypers.org/&lt;/a&gt;</description>
  <comments>http://baijum81.livejournal.com/18372.html</comments>
  <category>zope3</category>
  <category>life</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/18153.html</guid>
  <pubDate>Sun, 17 Dec 2006 07:56:43 GMT</pubDate>
  <title>Bangalore Python Conference</title>
  <link>http://baijum81.livejournal.com/18153.html</link>
  <description>(Disclaimer: This is not an official announcement/news)&lt;br /&gt;&lt;br /&gt;BangPypers [1] is planning a &quot;Bangalore Python Conference&quot; [2] in next February or  March.&lt;br /&gt;&lt;br /&gt;According to Ramdas from DevelopeIQ, there are at least 5000 Pythonistas in Bangalore [3].&lt;br /&gt;&lt;br /&gt;This may be true, I know there are two scientific talks going to happen in my near by place, (but I won&apos;t be attending it, I am not a scientific guy).  Those scientific talks uses Python at &quot;FOSS in Science&quot; (National Workshop on Free Software in Science) on 4-6 January, 2007 [4]&lt;br /&gt;(Venue: Union Christian College, Alwaye, Kochi, Kerala)&lt;br /&gt;a. Scientific Computing and Data Visualization using Python -Dr. Prabhu Ramachandran, IIT Bombay [5]&lt;br /&gt;b. Experimental Physics with Phoenix -Mr. Pramode C.E [6]&lt;br /&gt;&lt;br /&gt;I think there are many Python programmers all over India.  May be we need an &quot;Indian Python Conference&quot; soon.&lt;br /&gt;&lt;br /&gt;[1] &lt;a href=&quot;http://tech.groups.yahoo.com/group/BangPypers&quot;&gt;http://tech.groups.yahoo.com/group/BangPypers&lt;/a&gt;&lt;br /&gt;[2] &lt;a href=&quot;http://nrcfosshelpline.in/bangpycon/FrontPage&quot;&gt;http://nrcfosshelpline.in/bangpycon/FrontPage&lt;/a&gt;&lt;br /&gt;[3] &lt;a href=&quot;http://tech.groups.yahoo.com/group/BangPypers/message/1990&quot;&gt;http://tech.groups.yahoo.com/group/BangPypers/message/1990&lt;/a&gt;&lt;br /&gt;[4] &lt;a href=&quot;http://www.space-kerala.org/fsc&quot;&gt;http://www.space-kerala.org/fsc&lt;/a&gt;&lt;br /&gt;[5]&lt;br /&gt;&lt;a href=&quot;http://www.space-kerala.org/fsc/index.php/Fsc/ScientificComputingAndDataVisualizationUsingPython&quot;&gt;http://www.space-kerala.org/fsc/index.php/Fsc/ScientificComputingAndDataVisualizationUsingPython&lt;/a&gt;&lt;br /&gt;[6] &lt;a href=&quot;http://www.space-kerala.org/fsc/index.php/Fsc/ExperimentalPhysicsWithPhoenix&quot;&gt;http://www.space-kerala.org/fsc/index.php/Fsc/ExperimentalPhysicsWithPhoenix&lt;/a&gt;</description>
  <comments>http://baijum81.livejournal.com/18153.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/17679.html</guid>
  <pubDate>Tue, 21 Nov 2006 08:45:26 GMT</pubDate>
  <title>Python talk at NSS Palakkad, Kerala</title>
  <link>http://baijum81.livejournal.com/17679.html</link>
  <description>Yesterday, I had a talk on Python at N S S College of&lt;br /&gt;Engineering, Palakkad (&lt;a href=&quot;http://www.nssce.ac.in/&quot;&gt;http://www.nssce.ac.in/&lt;/a&gt;) .  The talk was&lt;br /&gt;arranged by the computer science student&apos;s free software&lt;br /&gt;community.  There were 100+ students. I used the same slides&lt;br /&gt;which I prepared for my another talk in last&lt;br /&gt;September (&lt;a href=&quot;http://baijum81.livejournal.com/14649.html&quot;&gt;http://baijum81.livejournal.com/14649.html&lt;/a&gt;)&lt;br /&gt;I took almost 1 and 1/2 hours.</description>
  <comments>http://baijum81.livejournal.com/17679.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/17383.html</guid>
  <pubDate>Wed, 01 Nov 2006 05:44:40 GMT</pubDate>
  <title>First look at test layers from zope.testing</title>
  <link>http://baijum81.livejournal.com/17383.html</link>
  <description>Recently Zope team has released zope.testing version 3.0 .&lt;br /&gt;For more info : &lt;a href=&quot;http://cheeseshop.python.org/pypi/zope.testing&quot;&gt;http://cheeseshop.python.org/pypi/zope.testing&lt;/a&gt;&lt;br /&gt;To install : # easy_install zope.testing&lt;br /&gt;&lt;br /&gt;This is an independent testing framework which can be used outside Zope.&lt;br /&gt;One of the interesting feature is test layers.  I think next Zope 3 release (3.4)&lt;br /&gt;will make use test layers heavily, so I started looking at this feature.&lt;br /&gt;&lt;br /&gt;The test layer API is here:&lt;br /&gt; &lt;a href=&quot;http://svn.zope.org/zope.testing/trunk/src/zope/testing/testrunner-layers-api.txt?view=auto&quot;&gt;http://svn.zope.org/zope.testing/trunk/src/zope/testing/testrunner-layers-api.txt?view=auto&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I will show you a simple example.&lt;br /&gt;&lt;br /&gt;First a &apos;hello.py&apos;:&lt;br /&gt;&lt;pre&gt;
def hello():
    return &apos;Hello&apos;
&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Then &apos;tests.py&apos;:&lt;br /&gt;&lt;pre&gt;
import hello
import unittest

class FirstLayer(object):
    pass

class TestHello(unittest.TestCase):
    layer = FirstLayer
    def test_hello(self):
        assert hello.hello() == &apos;Hello&apos;

def test_suite():
    return unittest.TestSuite((unittest.makeSuite(TestHello)))
&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;The only thing to note here is the &apos;layer&apos; attribute of &apos;TestHello&apos; class.&lt;br /&gt;We can add &apos;setUp&apos; and &apos;tearDown&apos; methods to &apos;FirstLayer&apos; class.&lt;br /&gt;&lt;br /&gt;Now create a script, &apos;runtest.py&apos;:&lt;br /&gt;&lt;pre&gt;
import sys
from zope.testing import testrunner
defaults = [&apos;--test-path&apos;, &apos;.&apos;, &apos;--tests-pattern&apos;, &apos;tests$&apos;,]
testrunner.run(defaults)
&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;When running the script, you will get something like:&lt;br /&gt;&lt;pre&gt;
Running tests.FirstLayer tests:
  Set up tests.FirstLayer in 0.000 seconds.
  Ran 1 tests with 0 failures and 0 errors in 0.000 seconds.
Tearing down left over layers:
  Tear down tests.FirstLayer in 0.000 seconds.
&lt;/pre&gt;</description>
  <comments>http://baijum81.livejournal.com/17383.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/16887.html</guid>
  <pubDate>Tue, 17 Oct 2006 05:11:02 GMT</pubDate>
  <title>Pythonic blog is not dynamically typed ?!</title>
  <link>http://baijum81.livejournal.com/16887.html</link>
  <description>I am a frequent visitor of Planet Python, also a subscriber.  I also visit&lt;br /&gt;&lt;a href=&quot;http://planet.ubuntu.com/&quot;&gt;http://planet.ubuntu.com/&lt;/a&gt; and &lt;a href=&quot;http://planet.gnome.org/&quot;&gt;http://planet.gnome.org/&lt;/a&gt; regularly.  I liked all&lt;br /&gt;kinds of posts.  The policy of Ubuntu and GNOME planets are given at top of&lt;br /&gt;their pages.&lt;br /&gt;From planet.gnome.org:&lt;br /&gt;&lt;pre&gt;
 &quot;Planet GNOME is a window into the world, work and lives of GNOME hackers and
contributors.&quot;
&lt;/pre&gt;&lt;br /&gt;From planet.ubuntu.com:&lt;br /&gt;&lt;pre&gt;
 &quot;Planet Ubuntu is a window into the world, work and lives of Ubuntu developers
and contributors.&quot;
&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Previously I have written an entry about this:&lt;br /&gt;&lt;a href=&quot;http://baijum81.livejournal.com/11153.html&quot;&gt;http://baijum81.livejournal.com/11153.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I expect at least a sentence about the policy of Planet Python, so that I can&lt;br /&gt;adjust my feeds according to that.  I think this will be useful for others too.&lt;br /&gt;IMHO, it should be something similar to the above mentioned policies.</description>
  <comments>http://baijum81.livejournal.com/16887.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/16406.html</guid>
  <pubDate>Mon, 16 Oct 2006 03:49:17 GMT</pubDate>
  <title>Python advocacy and marketing</title>
  <link>http://baijum81.livejournal.com/16406.html</link>
  <description>I was reading Tarek&apos;s post on Python marketing:&lt;br /&gt;&lt;a href=&quot;http://tarekziade.wordpress.com/2006/10/15/marketing-python-is-urgent-part-1-a-python-certification/&quot;&gt;http://tarekziade.wordpress.com/2006/10/15/marketing-python-is-urgent-part-1-a-python-certification/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;He suggests a Python certification program.&lt;br /&gt;&lt;br /&gt;Is this list created for discussion related to Python Advocacy?.&lt;br /&gt;&lt;a href=&quot;http://mail.python.org/pipermail/advocacy/&quot;&gt;http://mail.python.org/pipermail/advocacy/&lt;/a&gt;&lt;br /&gt;But I cann&apos;t see any posts there (hmm.. I send one in last month, just to test)</description>
  <comments>http://baijum81.livejournal.com/16406.html</comments>
  <category>python</category>
  <category>observation</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/15758.html</guid>
  <pubDate>Sat, 14 Oct 2006 03:36:17 GMT</pubDate>
  <title>any and all built-in functions in Python 2.5</title>
  <link>http://baijum81.livejournal.com/15758.html</link>
  <description>Oh! this is very nice:&lt;br /&gt;&lt;pre&gt;
$ python2.5
Python 2.5 (r25:51908, Sep 27 2006, 12:21:46) 
[GCC 3.3.5 (Debian 1:3.3.5-13)] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; any
built-in function any
&amp;gt;&amp;gt;&amp;gt; all
built-in function all
&amp;gt;&amp;gt;&amp;gt; print any.__doc__
any(iterable) -&amp;gt; bool

Return True if bool(x) is True for any x in the iterable.
&amp;gt;&amp;gt;&amp;gt; print all.__doc__
all(iterable) -&amp;gt; bool

Return True if bool(x) is True for all values x in the iterable.
&amp;gt;&amp;gt;&amp;gt; any([1,2])
True
&amp;gt;&amp;gt;&amp;gt; all([1,2])
True
&amp;gt;&amp;gt;&amp;gt; any([1,0])
True
&amp;gt;&amp;gt;&amp;gt; all([1,0])
False
&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Hey, I have made few edits here, (blame livejournal&apos;s `pre` tag), noticed it ? :)</description>
  <comments>http://baijum81.livejournal.com/15758.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/15553.html</guid>
  <pubDate>Fri, 06 Oct 2006 05:07:15 GMT</pubDate>
  <title>Happy Birthday to Plone!</title>
  <link>http://baijum81.livejournal.com/15553.html</link>
  <description>Plone celebrate its fifth anniversary:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://plone.org/news/plone-fifth-anniversary&quot;&gt;http://plone.org/news/plone-fifth-anniversary&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I am an outsider to this community, but I have always watched this project.&lt;br /&gt;In my opinion, plone is&lt;br /&gt;&lt;pre&gt;
  - a great project
  - a great product
  - a great community
&lt;/pre&gt;&lt;br /&gt;And it has great leadership also.&lt;br /&gt;&lt;br /&gt;I think community building is much more than creating a big project.&lt;br /&gt;May be creating a community with lots of buzz is possible, but making it active always&lt;br /&gt;is not easy.  And code base is not the only thing required for a successful project.&lt;br /&gt;Plone is a great success compared to many other big projects.</description>
  <comments>http://baijum81.livejournal.com/15553.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/15107.html</guid>
  <pubDate>Thu, 28 Sep 2006 07:27:00 GMT</pubDate>
  <title>Python 2.5, Zope 3.3 releases</title>
  <link>http://baijum81.livejournal.com/15107.html</link>
  <description>This month my favourite programming language and web framework relased newer&lt;br /&gt;versions.  I reported Python release here:&lt;br /&gt;&lt;a href=&quot;http://digg.com/programming/Python_2_5_final_released&quot;&gt;http://digg.com/programming/Python_2_5_final_released&lt;/a&gt; Oh! many people dugg it.&lt;br /&gt;But I was afraid of Zope 3 release there :) Though, I have written an article&lt;br /&gt;here: &lt;a href=&quot;http://kpug.zwiki.org/WhatIsNewInZope33&quot;&gt;http://kpug.zwiki.org/WhatIsNewInZope33&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Using Personal Wiki&lt;br /&gt;-------------------&lt;br /&gt;&lt;br /&gt;Recently I realised that using a personal wiki for documentation is better than&lt;br /&gt;a public one. (Why ?). Well, the main reason is that you get more freedom and&lt;br /&gt;courage.  I will be more cautious when adding content to public wiki.&lt;br /&gt;And my favourite wiki is ZWiki.</description>
  <comments>http://baijum81.livejournal.com/15107.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/15071.html</guid>
  <pubDate>Tue, 19 Sep 2006 07:26:59 GMT</pubDate>
  <title>A work in progress chapter from Zope Guide</title>
  <link>http://baijum81.livejournal.com/15071.html</link>
  <description>This is a work in progress chapter from Zope Guide:&lt;br /&gt;&lt;a href=&quot;http://kpug.zwiki.org/ZopeGuide&quot;&gt;http://kpug.zwiki.org/ZopeGuide&lt;/a&gt;&lt;br /&gt;Please contribute! especially grammer mistakes :)&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;
Unit testing
************


Introduction
------------

In this chapter, you will learn more about unit testing.  Zope 3 use `doctest`
based unit testing heavily.  Zope 3 preferes test driven development (TDD).

To explain the idea, consider a use case.  A module is required with a function
which returns &apos;Good morning, name!&apos;.  The name will be given as argument.
Before writing the real code write the unit test for this.  Infact you will be
writing the real code and it&apos;s test cases almost in parallel.  So just create a
file named `example1.py` with just the function definition::

  def goodmorning(name):
      &quot;This returns a good morning message&quot;

See you are not yet wrote the logic yet.  But this is necessary to run tests
successfully with failures!.  Ok, now create a file named `example1.txt`
with test cases, use ReStructuredText format::

  These are test for `example1` module.

  First import the module::

    &amp;gt;&amp;gt;&amp;gt; import example1

  Now call the function `goodmorning` with out any argument::

    &amp;gt;&amp;gt;&amp;gt; example1.goodmorning()
    Traceback (most recent call last):
    ...
    TypeError: goodmorning() takes exactly 1 argument (0 given)

  Now call the function `goodmorning` with one argument::

    &amp;gt;&amp;gt;&amp;gt; example1.goodmorning(&apos;Jack&apos;)
    &apos;Good morning, Jack!&apos;

See the examples are written like executed from prompt.  You can use your
python prompt and copy paste from there.  Now create another file
`test_example1.py` with this content::

  import unittest
  import doctest

  def test_suite():
      return unittest.TestSuite((
          doctest.DocFileSuite(&apos;example1.txt&apos;),
          ))
          
  if __name__ == &apos;__main__&apos;:
      unittest.main(defaultTest=&apos;test_suite&apos;)

This is just a boilerplate code for running the test.  Now run the test using
`python2.4 test_example1.py` command.
You will get output with following text::

  File &quot;example1.txt&quot;, line 16, in example1.txt
  Failed example:
      example1.goodmorning(&apos;Jack&apos;)
  Expected:
      &apos;Good morning, Jack!&apos;
  Got nothing

Now one test failed, so implement the function now::

  def goodmorning(name):
      &quot;This returns a good morning message&quot;
      return &quot;Good morning, %s!&quot; % name

Now run the test again, it will run without failures.

Now start thinking about other functionalities required for the module.  Before
start coding write about it in text file.  Decide API, write test, write code,
than continue this cycle untill you finish your requirements.
&lt;/pre&gt;</description>
  <comments>http://baijum81.livejournal.com/15071.html</comments>
  <category>zope3</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/14649.html</guid>
  <pubDate>Mon, 18 Sep 2006 04:10:17 GMT</pubDate>
  <title>Python talk on SFD (2)</title>
  <link>http://baijum81.livejournal.com/14649.html</link>
  <description>Promode has written a good blog entry here:&lt;br /&gt;&lt;a href=&quot;http://pramode-ce.livejournal.com/42465.html&quot;&gt;http://pramode-ce.livejournal.com/42465.html&lt;/a&gt; .  As he said, my intention was to&lt;br /&gt;motivate the engineering students to learn Python.  I got around 90 minutes.&lt;br /&gt;Promode&apos;s talk was also included lots of Python, because Python is used in&lt;br /&gt;Phoenix (&lt;a href=&quot;http://nsc.res.in/~elab/phoenix/&quot;&gt;http://nsc.res.in/~elab/phoenix/&lt;/a&gt;).  It was a really interesting talk,&lt;br /&gt;event hough electronics was not my area of interest, I really enjoyed it.&lt;br /&gt;&lt;br /&gt;I welcome all those who attended this talk to Kerala Python User Group, more&lt;br /&gt;details are here: &lt;a href=&quot;http://kpug.zwiki.org/FrontPage&quot;&gt;http://kpug.zwiki.org/FrontPage&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Hmm.. I mentioned Zope 3 too :)</description>
  <comments>http://baijum81.livejournal.com/14649.html</comments>
  <category>life</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/14501.html</guid>
  <pubDate>Sat, 16 Sep 2006 16:07:42 GMT</pubDate>
  <title>Python talk on SFD</title>
  <link>http://baijum81.livejournal.com/14501.html</link>
  <description>Today I had one Talk on Python at Vidya academy: &lt;a href=&quot;http://vidyaacademy.ac.in/&quot;&gt;http://vidyaacademy.ac.in/&lt;/a&gt;&lt;br /&gt;I am writing this from their library.  Now helping them to install Koha.&lt;br /&gt;This is my first Python talk, will write details tomorrow.</description>
  <comments>http://baijum81.livejournal.com/14501.html</comments>
  <category>life</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/14159.html</guid>
  <pubDate>Fri, 15 Sep 2006 05:07:32 GMT</pubDate>
  <title>Sqlite usage</title>
  <link>http://baijum81.livejournal.com/14159.html</link>
  <description>This is a simple tutorial(?) to use sqlite.  I used pysqlite 1.0.1 in Python 2.3,&lt;br /&gt;which is the default in Debian 3.1 (Sarge).&lt;br /&gt;&lt;br /&gt;The latest pysqlite version is 2.3.2, Visit this site for more info:&lt;br /&gt;&lt;a href=&quot;http://initd.org/tracker/pysqlite&quot;&gt;http://initd.org/tracker/pysqlite&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;
&quot;&quot;&quot;sqlite_usage.py: sqlite module usage with examples

First import sqlite::

  &amp;gt;&amp;gt;&amp;gt; import sqlite
  
Create a temporary directory::

  &amp;gt;&amp;gt;&amp;gt; import tempfile
  &amp;gt;&amp;gt;&amp;gt; tempdir = tempfile.mkdtemp()
  
Now create a db file::

  &amp;gt;&amp;gt;&amp;gt; import os
  &amp;gt;&amp;gt;&amp;gt; dbfile = os.path.join(tempdir, &apos;testdb.sdb&apos;)
  
Now connect to db and create a cursor::

  &amp;gt;&amp;gt;&amp;gt; conn = sqlite.connect(dbfile)
  &amp;gt;&amp;gt;&amp;gt; cr = conn.cursor()

Create a table::

  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;CREATE TABLE first_table (a INT)&quot;)

Insert a value and get::

  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;INSERT INTO first_table (a) values (1)&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a FROM first_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.fetchall()
  [(1,)]

Test commit and rollback::

  &amp;gt;&amp;gt;&amp;gt; conn.commit()
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;DELETE FROM first_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a FROM first_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.fetchall()
  []
  &amp;gt;&amp;gt;&amp;gt; #now rollback and query again
  &amp;gt;&amp;gt;&amp;gt; conn.rollback()
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a FROM first_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.fetchall()
  [(1,)]
  
Insert more values as parameters::

  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;CREATE TABLE second_table (a INT, b VARCHAR(20))&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;INSERT INTO second_table (a, b) VALUES (%s, %s)&quot;,
  ... (1, &apos;hi1&apos;))
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a, b FROM second_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.fetchone()
  (1, &apos;hi1&apos;)

Insert more values using executemany::

  &amp;gt;&amp;gt;&amp;gt; cr.executemany(&quot;INSERT INTO second_table (a, b) VALUES (%s, %s)&quot;,
  ... [(2, &apos;hi2&apos;), (3, &apos;hi3&apos;)])
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a, b FROM second_table&quot;)
  &amp;gt;&amp;gt;&amp;gt; rst = cr.fetchall()
  &amp;gt;&amp;gt;&amp;gt; (2, &apos;hi2&apos;) in rst
  True
  &amp;gt;&amp;gt;&amp;gt; (3, &apos;hi3&apos;) in rst
  True

Hmm.. there is no rewind::

  &amp;gt;&amp;gt;&amp;gt; cr.rewind
  Traceback (most recent call last):
  ...
  AttributeError: rewind

Views are supported::

  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;CREATE VIEW first_second_view \
          AS SELECT a.a AS a1, b.a AS a2, b.b \
          FROM first_table AS a LEFT JOIN second_table AS b \
          ON a.a = b.a&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.execute(&quot;SELECT a1, a2, b FROM first_second_view&quot;)
  &amp;gt;&amp;gt;&amp;gt; cr.fetchone()
  (1, 1, &apos;hi1&apos;)

Cleanup tempdir::

  &amp;gt;&amp;gt;&amp;gt; import shutil
  &amp;gt;&amp;gt;&amp;gt; shutil.rmtree(tempdir)

&quot;&quot;&quot;

def _test():
    import doctest
    return doctest.testmod()

if __name__ == &apos;__main__&apos;:
    _test()
    pass
&lt;/pre&gt;</description>
  <comments>http://baijum81.livejournal.com/14159.html</comments>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/13389.html</guid>
  <pubDate>Sat, 19 Aug 2006 06:30:29 GMT</pubDate>
  <title>Why I am biased?!</title>
  <link>http://baijum81.livejournal.com/13389.html</link>
  <description>I was always biased towards many technologies.  My favourite programming&lt;br /&gt;language is Python, My favourite GUI toolkit is PyGTK.  My favourite editor is&lt;br /&gt;GNU Emacs.  And my favourite web framework is Zope 3.&lt;br /&gt;&lt;br /&gt;But I think I have to look into django now, because of these posts:&lt;br /&gt;&lt;a href=&quot;http://www.advogato.org/person/titus/diary.html?start=186&quot;&gt;http://www.advogato.org/person/titus/diary.html?start=186&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tabo.aurealsys.com/archives/2006/08/18/guido-van-rossum-and-django-redux/&quot;&gt;http://tabo.aurealsys.com/archives/2006/08/18/guido-van-rossum-and-django-redux/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://pyre.third-bit.com/blog/archives/613.html&quot;&gt;http://pyre.third-bit.com/blog/archives/613.html&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://programming.reddit.com/info/dykr/comments&quot;&gt;http://programming.reddit.com/info/dykr/comments&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.djangoproject.com/weblog/2006/aug/07/guidointerview/&quot;&gt;http://www.djangoproject.com/weblog/2006/aug/07/guidointerview/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;BTW, Zope 3.3 is coming: &lt;a href=&quot;http://www.zope.org/Products/Zope3&quot;&gt;http://www.zope.org/Products/Zope3&lt;/a&gt; .  Now I am a Zope 3&lt;br /&gt;developer, want to learn the internals for contributing, only few minor commits&lt;br /&gt;so far.  I managed to create this page: &lt;a href=&quot;http://kpug.zwiki.org/WhatIsNewInZope33&quot;&gt;http://kpug.zwiki.org/WhatIsNewInZope33&lt;/a&gt;</description>
  <comments>http://baijum81.livejournal.com/13389.html</comments>
  <category>emacs</category>
  <category>general</category>
  <category>pygtk</category>
  <category>zope3</category>
  <category>python</category>
  <category>observation</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/11598.html</guid>
  <pubDate>Thu, 25 May 2006 10:21:20 GMT</pubDate>
  <title>Functional/Acceptance Testing Using guitest</title>
  <link>http://baijum81.livejournal.com/11598.html</link>
  <description>Introdution&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;guitest (&lt;a href=&quot;http://gintas.pov.lt/guitest&quot;&gt;http://gintas.pov.lt/guitest&lt;/a&gt;) by Gintautas Miliauskas is a helper&lt;br /&gt;library for unit-testing GUI applications written in Python.  In this article I&lt;br /&gt;will demonstrate how to test a PyGTK application.  This article assume you are&lt;br /&gt;familiar with ``unittest`` module and unit testing.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Installation&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The latest version 0.3.1 released on 2005-11-26 is available from here:&lt;br /&gt;&lt;a href=&quot;http://gintas.pov.lt/guitest/guitest-0.3.1.tar.gz&quot;&gt;http://gintas.pov.lt/guitest/guitest-0.3.1.tar.gz&lt;/a&gt; .  Invoke `python setup.py&lt;br /&gt;install` to install the library into the local python&apos;s site-packages&lt;br /&gt;directory.  Alternatively you may simply copy the guitest subdirectory to your&lt;br /&gt;project&apos;s main source directory.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Getting Started&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Consider this example ::&lt;br /&gt;&lt;pre&gt;
  import gtk

  class HelloWorld(object):

      def __init__(self):
          self.window = gtk.Window()
          self.button = gtk.Button(&quot;Hello&quot;)
          self.window.add(self.button)
          self.window.show_all()

      def main(self):
          gtk.main()

  if __name__ == &apos;__main__&apos;:
      helloworld = HelloWorld()
      helloworld.main()
&lt;/pre&gt;&lt;br /&gt;Now think what are the things you have to test.  Let&apos;s say you want to make&lt;br /&gt;sure that button is a child of window.  And you want to test the label of&lt;br /&gt;button is &quot;Hello&quot;.&lt;br /&gt;&lt;br /&gt;Just look in to this code, should be very easy to understand. ::&lt;br /&gt;&lt;pre&gt;
  import unittest
  import gtk
  from guitest.gtktest import GtkTestCase

  import hello1


  class TestHelloWorld(GtkTestCase):

      def test_simple_run(self):
          helloworld = hello1.HelloWorld()

      def test_button(self):
          helloworld = hello1.HelloWorld()
          button = helloworld.window.get_child()
          assert type(button) == gtk.Button

      def test_button_text(self):
          helloworld = hello1.HelloWorld()
          button = helloworld.window.get_child()
          assert button.get_label() == &quot;Hello&quot;


  def test_suite():
      suite = unittest.TestSuite()
      suite.addTest(unittest.makeSuite(TestHelloWorld))
      return suite


  if __name__ == &apos;__main__&apos;:
      unittest.main()
&lt;/pre&gt;&lt;br /&gt;The test case class is inheriting from ``GtkTestCase``.  `test_simple_run` is&lt;br /&gt;just running the app.  Other two test cases are self explanatory, yes! you&lt;br /&gt;should be familiar with gtk api, that&apos;s all.&lt;br /&gt;&lt;br /&gt;When testing gui, dialog handlers will be very usefull.  We will extend the&lt;br /&gt;first example::&lt;br /&gt;&lt;pre&gt;
  import gtk

  class HelloWorld(object):

      def __init__(self):
          self.window = gtk.Window()
          self.button = gtk.Button(&quot;Hello&quot;)
          self.button.connect(&quot;clicked&quot;, self.on_button_clicked)
          self.window.add(self.button)
          self.window.show_all()

      def on_button_clicked(self, *args):
          dlg = gtk.MessageDialog(None, 0, gtk.MESSAGE_INFO, gtk.BUTTONS_OK)
          dlg.set_markup(&quot;OK&quot;)
          ret = dlg.run()
          dlg.destroy()
          return ret

      def main(self):
          gtk.main()

  if __name__ == &apos;__main__&apos;:
      helloworld = HelloWorld()
      helloworld.main()
&lt;/pre&gt;&lt;br /&gt;Here is setting a dialog handler for &apos;Hello&apos; button and testing the label text::&lt;br /&gt;&lt;pre&gt;
  import unittest
  import gtk
  from guitest.gtktest import GtkTestCase, guistate

  import hello2

  class TestHelloWorld(GtkTestCase):

      def test_button_clicked(self):
          helloworld = hello2.HelloWorld()
          button = helloworld.button
          guistate.dlg_handler = self.handle_hello_clicked
          button.emit(&quot;clicked&quot;)

      def handle_hello_clicked(self, dlg, *args):
          label = dlg.label
          if label.get_label() == &quot;OK&quot;:
              return gtk.RESPONSE_OK
          else:
              self.fail(&quot;Label is not &apos;OK&apos;&quot;)


  def test_suite():
      suite = unittest.TestSuite()
      suite.addTest(unittest.makeSuite(TestHelloWorld))
      return suite


  if __name__ == &apos;__main__&apos;:
      unittest.main()
&lt;/pre&gt;&lt;br /&gt;For experimenting this code, just change the assertion, &apos;label.get_label() ==&lt;br /&gt;&quot;OK&quot;&apos;.  If there is another dialog box coming after &apos;OK&apos; button clicked, you&lt;br /&gt;can add a new handler inside `handle_hello_clicked` function.  For example::&lt;br /&gt;&lt;pre&gt;
  def handle_hello_clicked(self, dlg, *args):
      label = dlg.label
      if label.get_label() == &quot;OK&quot;:
          guistate.dlg_handler = self.handle_ok_clicked
          return gtk.RESPONSE_OK
      else:
          self.fail(&quot;Label is not &apos;OK&apos;&quot;)
&lt;/pre&gt;</description>
  <comments>http://baijum81.livejournal.com/11598.html</comments>
  <category>pygtk</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/10942.html</guid>
  <pubDate>Mon, 17 Apr 2006 13:18:53 GMT</pubDate>
  <title>Characters per line for technical documentations</title>
  <link>http://baijum81.livejournal.com/10942.html</link>
  <description>I was wondering what will be the best choice for the number of&lt;br /&gt;characters per line for text based technical documentations.&lt;br /&gt;&lt;br /&gt;Well, better to reduce the scope of question.  Ok, let it be a&lt;br /&gt;documentation for Python package/product written using&lt;br /&gt;ReStructuredText.&lt;br /&gt;&lt;br /&gt;My choice is now 80 characters.  Any reason to reduce that&lt;br /&gt;or not use a character limit at all?&lt;br /&gt;&lt;br /&gt;Python PEPs are using 72 characters, is there any style&lt;br /&gt;recommendation from Python coding or other standards?&lt;br /&gt;&lt;br /&gt;I started thinking about this from&lt;br /&gt;&lt;a href=&quot;https://launchpad.net/products/bzr/+bug/39657&quot;&gt;https://launchpad.net/products/bzr/+bug/39657&lt;/a&gt;</description>
  <comments>http://baijum81.livejournal.com/10942.html</comments>
  <category>python</category>
  <category>observation</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/9774.html</guid>
  <pubDate>Mon, 16 Jan 2006 04:02:14 GMT</pubDate>
  <title>A test post, my first post to planet!</title>
  <link>http://baijum81.livejournal.com/9774.html</link>
  <description>I am Baiju M from Kerala (&lt;a href=&quot;http://en.wikipedia.org/wiki/Kerala&quot;&gt;http://en.wikipedia.org/wiki/Kerala&lt;/a&gt;)&lt;br /&gt;A relatiely new Python programmer, hmm.. now two years :)&lt;br /&gt;I am working for a small company based in Calicut,&lt;br /&gt;before one and half years (when I joined here) our&lt;br /&gt;main language was VB.  Now for almost all projects we are using&lt;br /&gt;Python, now we are Python Powerd! .  For our GUI apps we are using&lt;br /&gt;PyGTK and for web we decided to use Zope3 (not yet started though).&lt;br /&gt;I hope this is enough for now.</description>
  <comments>http://baijum81.livejournal.com/9774.html</comments>
  <category>life</category>
  <category>python</category>
  <lj:security>public</lj:security>
</item>
<item>
  <guid isPermaLink='true'>http://baijum81.livejournal.com/7646.html</guid>
  <pubDate>Fri, 02 Sep 2005 07:29:12 GMT</pubDate>
  <title>getdefault method for python dictionary</title>
  <link>http://baijum81.livejournal.com/7646.html</link>
  <description>In this blog:&lt;br /&gt;&lt;br /&gt;    &lt;a href=&quot;http://blogs.nuxeo.com/sections/blogs/ruslan_spivak/2005_09_01_btrees-setdefault&quot;&gt;http://blogs.nuxeo.com/sections/blogs/ruslan_spivak/2005_09_01_btrees-setdefault&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Blogger says that Python&apos;s dictionary method, &apos;setdefault&apos; without explicit default&lt;br /&gt; is confusing and useless.  Now I think there should be a &apos;getdefault&apos; method&lt;br /&gt;which also requires two explicit arguments, it will return explicit default&lt;br /&gt;if no key exists.&lt;br /&gt;&lt;br /&gt;Here is an example:&lt;br /&gt;&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; d = {1: None}
&amp;gt;&amp;gt;&amp;gt; print d.getdefault(1, &apos;Hi&apos;)
None
&amp;gt;&amp;gt;&amp;gt; print d.getdefault(2, &apos;Hi&apos;)
&apos;Hi&apos;
&lt;/pre&gt;&lt;br /&gt;Hmm.. there is already a &apos;get&apos; method. If we have &apos;getdefault&apos;&lt;br /&gt; then &apos;get&apos; can be deprecated, Here is the reason:&lt;br /&gt;&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; d = {1: None}
&amp;gt;&amp;gt;&amp;gt; print d.get(1)
None
&amp;gt;&amp;gt;&amp;gt; print d.get(2)
None
&lt;/pre&gt;&lt;br /&gt;See, here I didn&apos;t thought about any use cases.</description>
  <comments>http://baijum81.livejournal.com/7646.html</comments>
  <category>python</category>
  <category>observation</category>
  <lj:security>public</lj:security>
</item>
</channel>
</rss>
