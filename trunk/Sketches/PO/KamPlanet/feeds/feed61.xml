<?xml version="1.0" encoding="iso-8859-1"?>

<rdf:RDF
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:admin="http://webns.net/mvcb/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns="http://purl.org/rss/1.0/">

  <channel rdf:about="http://www.mnot.net/blog/">
    <title>mnot&amp;#8217;s Web log: Python</title>
    <link>http://www.mnot.net/blog/Python/index.html</link>
    <description>&amp;#8220;Design depends largely on constraints.&amp;#8221; &amp;#8212; Charles Eames</description>
    <dc:language>en-us</dc:language>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2005-10-18T17:43:19+10:00</dc:date>
    <admin:generatorAgent rdf:resource="http://www.movabletype.org/?v=2.64" />
    <admin:errorReportsTo rdf:resource="mailto:mnot@mnot.net"/>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <sy:updateBase>2000-01-01T12:00+00:00</sy:updateBase>
    <items>
      <rdf:Seq>
        <rdf:li rdf:resource="http://www.mnot.net/blog/2005/10/18/libxslt_web" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2005/09/05/feed_history" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2005/08/29/sparta" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2005/03/17/sparta" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/12/15/python_media_type" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/12/06/sparta" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/08/21/sparta" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/08/08/pythonification" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/07/31/http_py" />
        <rdf:li rdf:resource="http://www.mnot.net/blog/2004/07/26/xmlfragment" />

      </rdf:Seq>
    </items>
  </channel>

  <item rdf:about="http://www.mnot.net/blog/2005/10/18/libxslt_web">
    <title>XSLT for the Rest of the Web</title>
    <description>I&amp;#8217;ve raved before about how useful the XSLT document() function is, once you get used to it. However, the stars have to be aligned just so to use it; the...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Sylvain Hellegouarch,
                   M. David Peterson,
                   M. David Peterson,
                   Sylvain Hellegouarch,
                   Bob DuCharme,
                   Mark Nottingham,
                   l.m.orchard,
                   Mark Nottingham,
                   Daniel Veillard,
                   Mark Nottingham,
                   Terris Linenbach,
                   l.m.orchard,
        
        see <a href="http://www.mnot.net/blog/2005/10/18/libxslt_web">this entry's page</a>.)</p>
      
<p>I&#8217;ve raved before about <a href="http://www.mnot.net/blog/2005/02/22/xslt_integration">how useful the XSLT document() function is</a>, once you get used to it. However, the stars have to be aligned just <em>so</em> to use it; the Web site can&#8217;t use cookies for anything important, and the content you&#8217;re interested in has to be available in well-formed XML.</p>

<p>While that&#8217;s all fine and good on some higher-plane, utopian, RESTful, stateless, DTD- and Schema- described, Cool URIish Web, it&#8217;s not the useful on the Web that most of us surf every day. Don&#8217;t get me wrong &#8212; I believe in all (OK, <em>most</em>) of those things, but most of the data I&#8217;m aching to get my automated fingers on doesn&#8217;t live there (yet).</p>

<p>So, what to do? While there are toolkits out there for scraping ill-formed HTML, they&#8217;re usually very language-specific, fairly procedural, and don&#8217;t let me leverage the considerable value in the XML stack. <strong>I want a tool that lets me work with the Web natively in XSLT at a pretty low level</strong>. Which leads to the question,</p>

<h4>What Happens When You Glue XSLT and HTML Tidy Together?</h4> 

<p>After looking around a bit and a few false starts, here&#8217;s what I came up with; <a href="http://www.mnot.net/python/libxslt_web.py">libxslt_web</a>. It&#8217;s a set of extension functions for the very fast, very powerful and very badly documented libxslt, companion to <a href="http://www.xmlsoft.org/" class="offsite">libxml2</a>. What do they do? Here&#8217;s the list so far;</p>

<ul><li><strong>get(</strong>uri<strong>)</strong> &#8212; HTTP GET the URI, returning the response headers and body as a nodeset.</li><li><strong>post(</strong>uri, body, content_type<strong>)</strong> &#8212; HTTP POST the body, using content_type, to URI. Return the response headers and body as a nodeset.</li><li><strong>tidy_parse(</strong>node<strong>)</strong> &#8212; parse the node&#8217;s content using HTML Tidy and return a nodeset. No matter what.</li><li><strong>form_encode(</strong>node<strong>)</strong> &#8212; encode the node&#8217;s children using urlencoding (see example in the code).</li></ul>

<p>GET and POST both allow access to the HTTP response headers that came back, as well as the body. </p>

<h4>What Next?</h4> 
<p>I&#8217;ve already played around with scraping my Amazon shopping cart and some bank accounts; one of my main use cases for this is to automate the process of downloading my QIF files from different accounts, so I don&#8217;t have to do the Dance of the Thousand Clicks every month to get at my own data. It strikes me that it would also be trivial to implement a <a href="http://microformats.org/" class="offsite">microformat</a> parser using this technique.</p>

<p>I&#8217;ve got a few ideas of where it should go next; there are a number of facets of HTTP that it ignores right now (mostly as a result of deficiencies in Python&#8217;s <a href="http://docs.python.org/lib/module-urllib2.html" class="offsite">urllib2</a>). Suggestions and feedback are welcome; I&#8217;m especially interested in efforts to implement something similar in other XSLT engines.</p>

<p><strong>P.S.</strong> If you&#8217;re installing on OSX, try <a href="http://darwinports.opendarwin.org/" class="offsite">darwinports</a>; just port install python (you need 2.4); port install libxml2; port install libxslt and then manually install <a href="http://www.egenix.com/files/python/mxTidy.html" class="offsite">mxTidy</a>.</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2005/10/18/libxslt_web</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2005-10-18T17:43:19+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2005/09/05/feed_history">
    <title>Feed History -04</title>
    <description> Feed History draft -04 is out, with the only major change being the replacement of fh:stateful with fh:incremental, with corresponding changes throughout the document, to make the concepts a...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Robert Sayre,
        
        see <a href="http://www.mnot.net/blog/2005/09/05/feed_history">this entry's page</a>.)</p>
      
<p>
<a href="http://www.ietf.org/internet-drafts/draft-nottingham-atompub-feed-history-04.txt" class="offsite">Feed History draft -04</a> is out, with the only major change being the replacement of <code>fh:stateful</code> with <code>fh:incremental</code>, with corresponding changes throughout the document, to make the concepts a bit clearer.
</p><p>
This revision also makes cardinality, relative URIs and white space handling more explicit, and adds an acknowledgements section as promised.
</p><p>
On the implementation front, here&#8217;s a <a href="http://www.mnot.net/rss/history/feed_history.py">quick-n-dirty Python script</a> that demonstrates reconstruction of an incremental feed (RSS or Atom); while it&#8217;s more prototype code than something you&#8217;d want to deploy, it should give an idea of the effort involved for implementation on the client-side, and I&#8217;m more than happy to take patches.
</p>
<p>You use it by first calling it with the name of the local store (just a Python pickle) you want to use, along with the feed URI;</p>
<pre class="example">~&gt; ./feed_history.py store http://www.mnot.net/blog/index.rdf</pre>
<p>and then, to update the feed subsequently, you just call it with the store name;</p>
<pre class="example">~&gt; ./feed_history.py store</pre>
<p>Each time you call it, it&#8217;ll walk back archives as necessary and then spit out the complete list of <code>title</code>s in the feed.</p><p>
I&#8217;ve also updated the <a href="http://www.mnot.net/blog/2005/08/15/history_implementation">Putting History in Your Feed entry</a>; there wasn&#8217;t any change necessary for -04, but there was a bug in the instructions regarding <code>fh:prev</code> in the subscription feed.
</p><p>
BTW, Feed History is also referenced in the latest <a class="offsite" href="http://groups.yahoo.com/group/rss-media/">Media RSS</a> specification as a Best Practice. Cool!
</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2005/09/05/feed_history</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2005-09-05T22:29:27+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2005/08/29/sparta">
    <title>sparta.py 0.8</title>
    <description> I&amp;#8217;m happy to announce that version 0.8 of sparta, a simple API for RDF, is now available. As always, feedback and suggestions are appreciated. This revision requires rdflib 2.2.1,...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Elias Torres,
                   Mark Nottingham,
                   eikeon,
                   Cecelia Hickel,
                   Michel Pelletier,
                   Cecelia Hickel,
        
        see <a href="http://www.mnot.net/blog/2005/08/29/sparta">this entry's page</a>.)</p>
      
<p>
I&#8217;m happy to announce that version 0.8 of <a href="http://www.mnot.net/sw/sparta/">sparta</a>, a simple API for RDF, is now available. As always, feedback and suggestions are appreciated.
</p><p>
This revision requires <a href="http://rdflib.net/" class="offsite">rdflib</a> 2.2.1, as the APIs sparta relied upon have changed.
</p><p>
It also adds a new method on the factory, <code>addAlias</code>, that lets you bypass the prefix_localname convention for URIs that don&#8217;t map well to python tokens. See spartaTest.py for an example of its use. Thanks to <a href="http://www.dehora.net/" class="offsite">Bill de h&#211;ra</a> for the suggestion and a prototype patch.
</p><p>
Looking forward, I&#8217;m looking to see if there&#8217;s anything special I should do to add support for contexts directly, or whether I should just rely on the underlying store. If you have any ideas about that, I&#8217;d love to hear them.
</p>

<p><strong>P.S.</strong> I&#8217;ve also gone ahead and made sparta a <a href="http://www.mnot.net/sw/sparta/dist/">proper installation package</a>; gotta love distutils. An installer for 0.72 is also available, in case you&#8217;re still on an older revision of rdflib.</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2005/08/29/sparta</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2005-08-29T21:31:09+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2005/03/17/sparta">
    <title>Sparta.py 0.7</title>
    <description> I&amp;#8217;m happy to announce that version 0.7 of sparta.py, a simple API for RDF, is now available. As always, feedback and suggestions are appreciated. My goal for this release...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Danny,
                   Henry Story,
        
        see <a href="http://www.mnot.net/blog/2005/03/17/sparta">this entry's page</a>.)</p>
      
<p>
I&#8217;m happy to announce that version 0.7 of <a href="http://www.mnot.net/sw/sparta/">sparta.py</a>, a simple API for RDF, is now available. As always, feedback and suggestions are appreciated.
</p><p>
My goal for this release was to clean up cardinality. In particular, I wanted to make Sparta usable with the <a href="http://semtext.org/atom/" class="offsite">Atom OWL work</a> that&#8217;s been going on. Unfortunately, it&#8217;s difficult to show &#8212; both because Atom is a moving target, and due to a few flaws in the <a href="http://semtext.org/atom/xslt/atom2atomrdf.xslt" class="offsite">stylesheet</a> and <a href="http://semtext.org/atom/atom.html" class="offsite">model</a> &#8212; but with a little tweaking, I believe it&#8217;ll be pretty straightforward once Atom settles down and they catch up.
</p><h4>
Changes
</h4><p>
The most obvious change in this version is in how cardinality is determined. After actually reading the OWL docs, I think I&#8217;ve done it correctly; an object will be considered unique (thereby giving you direct access to it, rather than through a ResourceSet), if:
</p><ol>
<li>The predicate is an <a href="http://www.w3.org/TR/owl-ref/#FunctionalProperty-def" class="offsite">owl:FunctionalProperty</a>, or</li>
<li>The subject is subclassed to have an owl:Restriction on that property with either an <a href="http://www.w3.org/TR/owl-ref/#maxCardinality-def" class="offsite">owl:MaxCardinality</a> or an <a href="http://www.w3.org/TR/owl-ref/#cardinality-def" class="offsite">owl:cardinality</a> of &#8220;1&#8221;.</li>
</ol><p>
Practically speaking, this means that where you previously said that a property had owl:maxCardinality of &#8220;1&#8221; to work with Sparta, you&#8217;ll now need to say it has an rdf:type of owl:FunctionalProperty.
</p><p>
Also, __init__ is a little more picky about the properties that you instantiate it with; if something isn&#8217;t considered unique (as per above), you&#8217;ll need to wrap it in a list; e.g.,
</p><pre class="example">bob = Thing(None, rdf_type=["people_Person"], person_age='23')
</pre><p>
assuming that person_age is constrained in cardinality, and rdf_type isn&#8217;t.
</p><h4>
Enhancements
</h4><p>
Assignment can now copy between different stores, so if you&#8217;re jugging two rdf datastores with Sparta, you can do things like 
</p><pre class="example">bob = StoreOneThing("person_bob")
mary = StoreTwoThing("person_mary")
bob.person_wife = mary
</pre><p>
and it will work. This involved adding the copyTo method, which supports directly copying statements from one store to the other.
</p><p>
You can also pass a URI string when working with attributes, which is helpful if you don&#8217;t know what prefix to use with it. Although this isn&#8217;t too useful with direct access (Python syntax doesn&#8217;t allow object properties named bob.http://example.com/person#wife), it is useful with getattr and friends (e.g., getattr(bob, &#8220;http://example.com/person#wife&#8221;)).
</p><p>
Rich comparison support means you can now compare objects and know if they represent the same underlying RDF node; e.g.,
</p><pre class="example">if bob.wife == Thing("person_mary"):
...
</pre><p>
Finally, one under-the-covers change that should make Sparta a lot more compatible with existing, real-world RDF is that it now does the right thing when nodes have multiple rdf:type and rdfs:range values. The currently implementation is correct if inefficient, but I expect optimisation will be fairly straightforward.
</p><h4>
What&#8217;s Next
</h4><p>
I&#8217;m not going to say that this is feature-complete, because I&#8217;ve said that too many times before. I still need to dig into RDF and OWL a bit more to see where else I can find nice things to do, and still want to think about typing list members. 
</p><p>
After the API and functionality are stable, I&#8217;ll look at more documentation, refactoring, optimisation, and documentation, as well as a <a href="http://redland.opensource.ac.uk/" class="offsite">Redland</a> back end.
</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2005/03/17/sparta</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2005-03-17T21:56:57+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/12/15/python_media_type">
    <title>text/python?</title>
    <description> I&amp;#8217;m thinking about whether it would be a good idea to have a media type for Python source files, call it &amp;#8220;text/python.&amp;#8221; The main benefit that I see to...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Ian Bicking,
                   Manfred Stienstra,
                   Mark Nottingham,
                   Ian Bicking,
                   Mark Nottingham,
                   Paul Hoffman,
                   Damian Cugley,
                   Manfred Stienstra,
                   Paul Sowden,
        
        see <a href="http://www.mnot.net/blog/2004/12/15/python_media_type">this entry's page</a>.)</p>
      
<p>
I&#8217;m thinking about whether it would be a good idea to have a media type for Python source files, call it &#8220;text/python.&#8221;
</p><p>
The main benefit that I see to doing this is the definition of a fragment identifier syntax; i.e., what the bit after the &#8216;#&#8217; refers to. This would allow URIs to point to specific functions and classes in Python source files, which would be very useful when documenting code.
</p><p>
It would also allow some cool import tricks (if I read <a class="offsite" href="http://www.python.org/peps/pep-0302.html">PEP 302</a> correctly, this is possible now, and will soon be pretty easy to enable), such as;
</p>
<pre class="example">import "http://www.mnot.net/sw/sparta/sparta.py" as sparta</pre>
<p>
or even 
</p>
<pre class="example">import "http://www.mnot.net/sw/sparta/sparta.py#ThingFactory" as ThingFactory</pre>
<p>
Some client-side persistent caching could make this a really nice way to distribute software, if properly thought out. It&#8217;s also one more step towards <a class="offsite" href="http://www.w3.org/2002/Talks/0206-python/all.htm">Webizing Python</a>. 
</p><p>
There are also some smaller, but nice, benefits, like being able to use the media type, rather than content sniffing, for syntax colouring, dispatching to Python editors straight off the Web, and being able to specify the encoding of the source in a way that&#8217;s well-aligned with the method that Python already defines. 
</p><p>
Thoughts? I&#8217;m considering writing an Internet-Draft and/or a PEP, but wanted to get some informal feedback first.
</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/12/15/python_media_type</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-12-15T06:28:11+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/12/06/sparta">
    <title>Sparta.py 0.6: RDF (and RSS!) Made Easy</title>
    <description><![CDATA[<p>
Based on feedback (thanks, John), it's now mapped to an object that implements a subset of the interface of sets.Set, and produces a full sets.Set when you call the copy() method.  rdf:Seq is mapped to a list, joining rdf:List; this allows Sparta to work with RSS 1.0, along with other formats that use Seq.  The factory takes an optional schema_store argument, so you can store schema hints for Spara separately, if you wish.
</p>]]></description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Danny,
        
        see <a href="http://www.mnot.net/blog/2004/12/06/sparta">this entry's page</a>.)</p>
      
<p>
Version 0.6 of sparta.py is <a href="http://www.mnot.net/sw/sparta/">now available</a>. Changes include:
</p>
<ul>
<li>Before, a property that didn&#8217;t have an owl:maxCardinality of &#8220;1&#8221; was mapped to a Python generator. Based on feedback (thanks, John), it&#8217;s now mapped to an object that implements a subset of the <a class="offsite" href="http://docs.python.org/lib/module-sets.html">sets.Set</a> interface, and produces a full sets.Set when you call the copy() method.</li>
<li>rdf:Seq is mapped to a list, joining rdf:List; this allows Sparta to work with RSS 1.0, along with other formats that use Seq.</li>
<li>The factory takes an optional schema_store argument, so you can store schema hints for Spara separately, if you wish.</li>
</ul>
<p>A nice example is RSS 1.0 parsing; see <a href="http://www.mnot.net/sw/sparta/rss_test.py">rss_test.py</a>, which makes RSS pretty darned easy:</p>
<pre class="example">blog = Thing(URI(blog_uri))
for item in blog.rss_items:
    print "*", item.rss_title
    print indent(item.rss_description)</pre>
<p>I like this so much that I&#8217;m considering moving away from other RSS parsing approaches and just normalising everything to RSS1.0 (maybe with XSLT) and shoving it into this.</p>
<h3>Plans</h3>
<p>I&#8217;ve got good feedback on this so far. I think the main things that need to be done before 1.0 are:</p>
<ul>
  <li><strong>Reconsidering instantiation</strong>; Right now, there&#8217;s a hack in the instantiation of a Thing that&#8217;s a little ugly; e.g., <tt>foo = Thing(&#8220;foo_bar&#8221;, rdf_type=my_widget)</tt>; here, rdf_type is really a set, and should raise a TypeError. I either need another way to conveniently instantiate such properties, or get rid of this &#8220;feature.&#8221;</li>
  <li><strong>Support for all relevant Schema types</strong>, namely those related to dates and times. This will probably wait for <a class="offsite" href="http://www.python.org/peps/pep-0321.html">PEP 321</a> to be completed.</li>
  <li><strong>Getting type information from rdf:type</strong>; this will require Sparta to <strong>know about multiple types for a single node</strong>, because it might already have type information from rdfs:range. In the long run, this is good, because nodes can have multiple types (e.g., it&#8217;s both a car and a Volkswagen), but it&#8217;s a little tricky to implement well.</li>
  <li><strong>Support for at least one more store</strong>, like <a class="offsite" href="http://redland.opensource.ac.uk/">Redland</a>.</li>
  <li>Better documentation, more format tests, and any associated refactoring and bugfixes.</li>
</ul>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/12/06/sparta</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-12-06T17:42:05+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/08/21/sparta">
    <title>sparta.py 0.5: RDF made easy</title>
    <description>Version 0.5 of sparta.py is now available; with this release, it&apos;s roughly feature-complete.</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Kendall Clark,
        
        see <a href="http://www.mnot.net/blog/2004/08/21/sparta">this entry's page</a>.)</p>
      
<p>Version 0.5 of <a href="http://www.mnot.net/python/sparta">sparta.py</a> is now available; with this release, I think it&#8217;s roughly feature-complete.</p>

<p>sparta is a Python wrapper API for RDF libraries that allows you to easily access and manipulate RDF data. In particular, it now:</p>

<ul><li>makes RDF properties available as object attributes that can be get, set and deleted</li><li>coerces literals&#8217; types to the appropriate Python types</li><li>exposes <a class="offsite" href="http://www.w3.org/TR/rdf-schema/#ch_collectionvocab">RDF lists</a> as Python lists</li></ul>

<p>See <a href="http://www.mnot.net/python/sparta/spartaTest.py">spartaTest.py</a> and its output,<a href="http://www.mnot.net/python/sparta/spartaTest.txt"> spartaTest.txt</a> for more information. Note that I said &#8220;RDF libraries&#8221; above; the next step for sparta is to wrap <a class="offsite" href="http://www.redland.opensource.ac.uk/">Redland</a> as well as <a class="offsite" href="http://rdflib.net/">rdflib</a>.</p>

<p>A couple of non-compatible changes have been made in this round. By default, properties are exposed as <a class="offsite" href="http://docs.python.org/tut/node11.html#SECTION00111000000000000000000">generators</a>. However, if the owl:maxCardinality of that property is &#8220;1&#8221;, it will be exposed as a simple, non-generator value. Also, typing is no longer inferred by the rdf:type of a property; it&#8217;s now inferred by its rdfs:range<a href="#range-note">*</a>.</p>

<p><a href="http://www.mnot.net/blog/2004/05/15/sparta">Once again</a>, this is experimental software, and isn&#8217;t yet ready for production use; use at your own risk. </p>

<p><span class="detail" id="range-note">* I understand that the use of rdfs:range to type a literal is somewhat controversial; I get conflicting advice about whether it&#8217;s legal. However, I like it, and I don&#8217;t think it breaks anything; if anyone can give me a real-world use case where this specific use of it causes a problem, I&#8217;d love to hear about it.</span></p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/08/21/sparta</link>
    <dc:subject>Semantic Web</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-08-21T19:35:03+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/08/08/pythonification">
    <title>Resistance is Futile</title>
    <description>Bill points out the inevitability of the Pythonification of the world. I couldn&amp;#8217;t agree more; if you listen to the whispers in the halls, all of the old objections are...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   Paul Downey,
                   Sean McGrath,
                   Randy Charles Morin,
                   Marc g,
                   d,
                   Mark Nottingham,
                   Marc g,
                   Ian Bicking,
                   L,
                   jorjun,
                   Mike Kozlowski,
                   Mark Nottingham,
                   Baczek,
                   wkh,
                   Ian Bicking,
                   rfjason,
        
        see <a href="http://www.mnot.net/blog/2004/08/08/pythonification">this entry's page</a>.)</p>
      
<p>Bill points out <a class="offsite" href="http://www.dehora.net/journal/2004/08/python_will_assimilate_you.html">the inevitability of the Pythonification of the world</a>. I couldn&#8217;t agree more; if you listen to the whispers in the halls, all of the old objections are falling away, and people are taking a serious look at dynamically typed languages.</p>

<p>Here&#8217;s a little tip; rather than gnashing your teeth holding onto the remnants of big, old statically-typed, clumsily compiled languages, instead of flirting with halfway measures and Johnny-come-lately languages, stick with <a class="offsite" href="http://www.python.org/">the real thing</a>. </p>

<p>Most of the really talented people I know say &#8220;oh, yeah, I&#8217;ve been meaning to get into Python, I just haven&#8217;t had any time.&#8221; Boys and girls, the train is leaving the station&#8230; </p>

<p><span class="detail">(Yes, Don, this means you. And Dave. And Chris.)</span></p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/08/08/pythonification</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-08-08T08:47:26+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/07/31/http_py">
    <title>The Whole Web in a Python Dictionary</title>
    <description>A few days ago I blogged a straw-man API for client-side HTTP based on dictionaries. This turns out to be well-aligned with a project I&amp;#8217;ve had on the back burner...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   l.m.orchard,
                   Ian Bicking,
                   Lion Kimbro,
                   Mark Nottingham,
                   Mike D,
                   Mike D,
                   Mark Nottingham,
                   anthony baxter,
        
        see <a href="http://www.mnot.net/blog/2004/07/31/http_py">this entry's page</a>.)</p>
      
<p>A few days ago I <a href="http://www.mnot.net/blog/2004/07/26/xmlfragment">blogged</a> a straw-man API for client-side HTTP based on dictionaries. This turns out to be well-aligned with a project I&#8217;ve had on the back burner for a while; coming up with some Python APIs for HTTP that are <strong>usable</strong>, <strong>encourage good practice</strong>, and <strong>well-aligned with the specifications</strong>. </p>

<p>So, a first prototype is <a href="http://www.mnot.net/python/http/">now available</a>, with three modules defined; <a href="http://www.mnot.net/python/http/message.py">http.message</a>, which defines common constructs for HTTP messages and their payloads, <a href="http://www.mnot.net/python/http/status.py">http.status</a>, which enumerates the defined HTTP response status codes as exceptions to be raised during processing, and <a href="http://www.mnot.net/python/http/client.py">http.client</a>, which currently contains a dictionary-like class along the lines <a href="http://www.mnot.net/blog/2004/07/26/xmlfragment">discussed before</a>.</p>

<p>For example, the following GETs the Apple home page, PUTs its representation to a fictional site, and then DELETEs it. When we try to access the new location, an exception corresponding to the HTTP error code is raised.</p>

<pre class="example">&gt;&gt;&gt; from http.client import Dict
&gt;&gt;&gt; web = Dict()
&gt;&gt;&gt; apple = web['http://www.apple.com/']
&gt;&gt;&gt; apple.__class__ 
&lt;class http.message.Representation at 0x676c0&gt;
&gt;&gt;&gt; web['http://www.example.org/apple.html'] = apple
&gt;&gt;&gt; del web['http://www.example.org/apple.html']
&gt;&gt;&gt; new_apple = web['http://www.example.org/apple.html']
Traceback (most recent call last):
  File "", line 1, in ?
  File "http/client.py", line 50, in __getitem__
    response = dereference(request)
  File "http/client.py", line 97, in dereference
    raise response
http.status.NotFound
&gt;&gt;&gt;</pre>

<p>The one difference to my previous straw-man is in POST, which now goes like this:</p>

<pre class="example">&gt;&gt;&gt; from http import message
&gt;&gt;&gt; thing = message.Representation()
&gt;&gt;&gt; thing.body = "hello. this is the POST body."
&gt;&gt;&gt; thing.headers['content-type'] = "text/plain"
&gt;&gt;&gt; thing_creation_result = web('http://www.example.org/thingCreator', thing)</pre>

<p>This library is barely usable and I have a lot of plans for it, as can be seen in its TODO list. First and foremost is to support HTTP authentication, so that the PUT and DELETE functionality are more practically usable.</p>

<p>Comments and suggestions appreciated.</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/07/31/http_py</link>
    <dc:subject>Python</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-07-31T14:15:03+10:00</dc:date>
  </item>
  <item rdf:about="http://www.mnot.net/blog/2004/07/26/xmlfragment">
    <title>Dictionary as API?</title>
    <description>From the Daily Python URL comes another noteworthy API for XML; XMLFragment. I haven&amp;#8217;t tried it yet (it doesn&amp;#8217;t appear to be separately available, hint, hint), but I like the...</description>
    <content:encoded><![CDATA[
              <p>(for comments by:
                   James Antill,
                   l.m.orchard,
                   Mark,
                   Damian Cugley,
                   Terris Linenbach,
                   James Tauber,
        
        see <a href="http://www.mnot.net/blog/2004/07/26/xmlfragment">this entry's page</a>.)</p>
      
<p>From the <a class="offsite" href="http://www.pythonware.com/daily/index.htm#109022747676038210">Daily Python URL</a> comes another noteworthy API for XML; <a class="offsite" href="http://www.xmldatabases.org/WK/blog/1964_XPath_based_Python_Dictionaries.item">XMLFragment</a>. I haven&#8217;t tried it yet (it doesn&#8217;t appear to be separately available, hint, hint), but I like the look of it.</p>

<p>There are two interesting things going on here. First of all, XMLFragment basically gives up on modelling the complexity of XML in the language, instead punting to XPath. I think that&#8217;s a reasonable choice; it&#8217;s arguably more intuitive and simple than anything you could do with an object model or similar approach (unless you modify the language itself, as E4X did, and even then, the footprint is pretty big). By leveraging an existing standard, XMLFragment minimises the amount that developers have to learn to use it, and maximises the chances that they&#8217;ll be able to reuse that knowledge elsewhere. Neat.</p>

<p>This will live or die on performance, of course, but there are some pretty fast XPath engines out there (e.g., libxml2) to plug into the back end.</p>

<p>The other intriguing thing is XMLFragment&#8217;s use of dictionaries. Ninety-nine out of a hundred developers would have made this an object or a set of function calls; instead, Kimbro Staken has us treating XML as a data structure. This is a subtle but important difference with echoes of RESTfulness; by making it into an addressable data structure, instead of an opaque object that you pass arguments to, the focus is on the data, rather than the processor. This approach should also make it easy to layer in things like a generic dictionary caching mechanism.</p>

<p>Without using the code (that&#8217;s another hint, Kimbro; can we please have it as a separate library?), it&#8217;s hard to say how well this approach will work. One other interesting way to use this techique, however, might be for a Web client library, e.g.,</p>

<pre class="example">web = UriResolver()
mnot = web['http://www.mnot.net/']      # GET
mark = mnot.replace("mnot", "Mark")
web['http://www.mnot.net/'] = mark      # PUT
del web['http://www.mnot.net/old']      # DELETE
bob = WebRepresentation("&lt;new_user&gt;bob&lt;/new_user&gt;", "text/xml")  
web['http://www.mnot.net/userCreator'](bob)   # POST</pre>

<p>There are a lot of details to work out here, of course, but I must say I like the feel of using a dictionary here.</p>]]></content:encoded>
    <link>http://www.mnot.net/blog/2004/07/26/xmlfragment</link>
    <dc:subject>XML</dc:subject>
    <dc:creator>Mark Nottingham</dc:creator>
    <dc:date>2004-07-26T21:32:26+10:00</dc:date>
  </item>


</rdf:RDF>