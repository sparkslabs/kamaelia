<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-8926331206762568433</id><updated>2008-05-27T16:20:09.177+02:00</updated><title type='text'>The Py Side of Life</title><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>31</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-3637859681378237375</id><published>2008-04-27T22:19:00.002+02:00</published><updated>2008-04-27T22:23:30.379+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='sphinx'/><title type='text'>Sphinx 0.2 released</title><content type='html'>After a few weeks' bug-fixing releases, I've now released &lt;a href="http://sphinx.pocoo.org"&gt;Sphinx&lt;/a&gt; 0.2. The list of changes is &lt;a href="http://sphinx.pocoo.org/changes.html"&gt;here&lt;/a&gt; &amp;ndash; most are designed to make Sphinx more flexible to meet your documentation needs too.&lt;br /&gt;&lt;br /&gt;Download it from &lt;s&gt;Cheese Shop&lt;/s&gt;&lt;a href="http://pypi.python.org/pypi/Sphinx"&gt;PyPI&lt;/a&gt; as usual.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/04/sphinx-02-released.html' title='Sphinx 0.2 released'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=3637859681378237375' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/3637859681378237375/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/3637859681378237375'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/3637859681378237375'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-6469895469092981952</id><published>2008-04-20T22:00:00.002+02:00</published><updated>2008-04-20T22:17:48.563+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='german'/><title type='text'>German Python 3000 talk</title><content type='html'>If someone is interested, &lt;a href="http://pocoo.org/~gbrandl/py3ktalk.pdf"&gt;here are some slides&lt;/a&gt; of a (German) talk about Python 3000 I gave at the Munich User Group.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/04/german-python-3000-talk.html' title='German Python 3000 talk'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=6469895469092981952' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/6469895469092981952/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/6469895469092981952'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/6469895469092981952'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-339055168333785588</id><published>2008-03-29T10:55:00.005+01:00</published><updated>2008-04-06T21:32:04.454+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>AST compilation from Python</title><content type='html'>Thanks to Thomas Lee, we have now in the Python trunk a built-in way to modify the Abstract Syntax Tree compiled from a piece of Python source, and to compile that to an executable code object.&lt;br /&gt;&lt;br /&gt;Quick example:&lt;br /&gt;&lt;pre&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;_ast&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# A dumb source snippet&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;source &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #BA2121"&gt;&amp;quot;print 5 + 8&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# Compile using the special PyCF_ONLY_AST flag to get an AST&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #008000"&gt;compile&lt;/span&gt;(source, &lt;span style="color: #BA2121"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;, _ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;PyCF_ONLY_AST)&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# The toplevel node is always a Module for &amp;quot;exec&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast&lt;br /&gt;&lt;span style="color: #808080"&gt;&amp;lt;_ast.Module object at 0xb7b00edc&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# Each AST node has different attributes (see the docs)&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;body&lt;br /&gt;&lt;span style="color: #808080"&gt;[&amp;lt;_ast.Print object at 0xb7b020a4&amp;gt;]&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# The Print node has a list of values -- expressions to print&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;body[&lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;values&lt;br /&gt;&lt;span style="color: #808080"&gt;[&amp;lt;_ast.BinOp object at 0xb7b02114&amp;gt;]&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# This is the addition operator between 5 and 8&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;body[&lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;values[&lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;op&lt;br /&gt;&lt;span style="color: #808080"&gt;&amp;lt;_ast.Add object at 0xb7c98504&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# Now, replace the operator with subtraction ...&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;body[&lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;values[&lt;span style="color: #666666"&gt;0&lt;/span&gt;]&lt;span style="color: #666666"&gt;.&lt;/span&gt;op &lt;span style="color: #666666"&gt;=&lt;/span&gt; _ast&lt;span style="color: #666666"&gt;.&lt;/span&gt;Sub()&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# ... and compile the resulting AST&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;code &lt;span style="color: #666666"&gt;=&lt;/span&gt; &lt;span style="color: #008000"&gt;compile&lt;/span&gt;(ast, &lt;span style="color: #BA2121"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #408080; font-style: italic"&gt;# Voila:&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #000080; font-weight: bold"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style="color: #008000; font-weight: bold"&gt;exec&lt;/span&gt; code&lt;br /&gt;&lt;span style="color: #808080"&gt;-3&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;From this, you should be able to work out how to write AST manipulation code that actually makes sense :)&lt;br /&gt;&lt;br /&gt;The &lt;a href="http://docs.python.org/dev/library/_ast"&gt;_ast documentation&lt;/a&gt; gives you an idea which classes and attributes are available for individual AST elements.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/03/ast-compilation-from-python.html' title='AST compilation from Python'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=339055168333785588' title='8 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/339055168333785588/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/339055168333785588'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/339055168333785588'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-1690177998505891947</id><published>2008-03-28T21:19:00.002+01:00</published><updated>2008-03-28T21:35:03.073+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pygments'/><title type='text'>Using Pygments with less</title><content type='html'>The de-facto standard UNIX pager &lt;tt&gt;less&lt;/tt&gt; supports an environment variable called &lt;tt&gt;LESSOPEN&lt;/tt&gt; that can be set to the name of an input preprocessor.  It is normally used to transparently view compressed files etc., but of course it can also colorize your source files using Pygments!&lt;br /&gt;&lt;br /&gt;If you use Gentoo Linux, most of the work needed to set this up has already been done for you -- you just need to set&lt;br /&gt;&lt;pre&gt;export LESSOPEN="|lesspipe.sh %s"&lt;br /&gt;export LESSCOLORIZER=pygmentize&lt;/pre&gt;&lt;br /&gt;and make sure your &lt;tt&gt;LESS&lt;/tt&gt; variable contains &lt;tt&gt;-r&lt;/tt&gt; or &lt;tt&gt;-R&lt;/tt&gt; so that the raw ANSI color codes are passed through by less. Gentoo's lesspipe.sh script will then automatically call Pygments for source code files.&lt;br /&gt;&lt;br /&gt;On other platforms, you can set up a &lt;tt&gt;lesspipe.sh&lt;/tt&gt; script yourself; it should look roughly like this:&lt;br /&gt;&lt;pre&gt;#!/bin/sh&lt;br /&gt;case "$1" in&lt;br /&gt;   # add all extensions you want to handle here&lt;br /&gt;   *.awk|*.groff|*.java|*.js|*.m4|*.php|*.pl|*.pm|*.pod|*.sh|\&lt;br /&gt;   *.ad[asb]|*.asm|*.inc|*.[ch]|*.[ch]pp|*.[ch]xx|*.cc|*.hh|\&lt;br /&gt;   *.lsp|*.l|*.pas|*.p|*.xml|*.xps|*.xsl|*.axp|*.ppd|*.pov|\&lt;br /&gt;   *.diff|*.patch|*.py|*.rb|*.sql|*.ebuild|*.eclass)&lt;br /&gt;      pygmentize "$1" ;;&lt;br /&gt;   *) exit 0;;&lt;br /&gt;esac&lt;/pre&gt;&lt;br /&gt;Then &lt;tt&gt;export LESSOPEN="|lesspipe.sh %s"&lt;/tt&gt; and enjoy colored viewing!</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/03/using-pygments-with-less.html' title='Using Pygments with less'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=1690177998505891947' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/1690177998505891947/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/1690177998505891947'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/1690177998505891947'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-1475738129128933692</id><published>2008-03-25T21:20:00.003+01:00</published><updated>2008-03-27T09:40:57.145+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='linux'/><title type='text'>Interesting facts about the Linux file system</title><content type='html'>Sometimes you get lucky.  &lt;i&gt;(Warning: dramatic events ahead.)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;I was playing a large video file with mplayer when I made the mistake to delete it because of a command line accident (note to self: relying on the shell history to do what you mean is &lt;i&gt;evil&lt;/i&gt;).  First I thought "nice, now I can download the whole 500 MB again", but I realized that the file must still be available somewhere on disk because mplayer still needs to access it.&lt;br /&gt;&lt;br /&gt;Helpful people from IRC pointed me to &lt;tt&gt;/proc/&lt;span style="font-style: italic;"&gt;pid&lt;/span&gt;/fd/&lt;/tt&gt; which is a directory with symlinks to open files, but didn't believe it would do any good because the symlink's target is already gone.&lt;br /&gt;&lt;br /&gt;Not one to give up easily, I looked into there, and the listing looked like that:&lt;br /&gt;&lt;pre&gt;$ ls -l /proc/&lt;span style="font-style: italic;"&gt;pid&lt;/span&gt;/fd&lt;br /&gt;total 0&lt;br /&gt;dr-x------ 2 gbr users  0 Mar 25 21:28 .&lt;br /&gt;dr-xr-xr-x 5 gbr users  0 Mar 25 21:27 ..&lt;br /&gt;lrwx------ 1 gbr users 64 Mar 25 21:28 0 -&gt; /dev/pts/7&lt;br /&gt;lrwx------ 1 gbr users 64 Mar 25 21:28 1 -&gt; /dev/pts/7&lt;br /&gt;lrwx------ 1 gbr users 64 Mar 25 21:28 2 -&gt; /dev/pts/7&lt;br /&gt;lr-x------ 1 gbr users 64 Mar 25 21:28 3 -&gt; /home/gbr/video.mov (deleted)&lt;br /&gt;...&lt;/pre&gt;Curious. Not the usual "broken symlink" view. And indeed, I could open the file and copy its contents somewhere safe. Isn't that nice?</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/03/interesting-facts-about-linux-file.html' title='Interesting facts about the Linux file system'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=1475738129128933692' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/1475738129128933692/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/1475738129128933692'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/1475738129128933692'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-5451010815436975113</id><published>2008-03-23T16:05:00.002+01:00</published><updated>2008-03-23T16:11:36.017+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='docs'/><category scheme='http://www.blogger.com/atom/ns#' term='sphinx'/><title type='text'>Sphinx, take 2</title><content type='html'>I've just uploaded a new Sphinx release to PyPI. It should now be compatible with docutils SVN snapshots, as opposed to only docutils 0.4.  If you still find problems with some SVN version, let me know!&lt;br /&gt;&lt;br /&gt;Also new are some improvements in the doctest and autodoc extensions, see the CHANGES file.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/03/sphinx-take-2.html' title='Sphinx, take 2'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=5451010815436975113' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/5451010815436975113/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/5451010815436975113'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/5451010815436975113'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-9185138739609782760</id><published>2008-03-21T18:50:00.003+01:00</published><updated>2008-03-21T19:13:26.565+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='docs'/><category scheme='http://www.blogger.com/atom/ns#' term='sphinx'/><title type='text'>Sphinx is released!</title><content type='html'>I'm delighted to announce that the Sphinx library, used to build the &lt;a href="http://docs.python.org/dev"&gt;new Python documentation&lt;/a&gt; (for 2.6 and 3.0), is now released for general use.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;What is it?&lt;/h2&gt;Sphinx is a tool that makes it easy to create intelligent and beautiful documentation for Python projects (or other documents consisting of multiple reStructuredText source files).&lt;br /&gt;&lt;br /&gt;Its website is &lt;a href="http://sphinx.pocoo.org/"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;h2&gt;What does it do?&lt;/h2&gt;Sphinx is not an API documentation generator like Epydoc.  Instead, its focus is on hand-written documentation, such as the Python one.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Main output formats: HTML (including HTML Help) and LaTeX&lt;/li&gt;&lt;li&gt;Extensive cross-references: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information&lt;/li&gt;&lt;li&gt;Hierarchical structure: easy definition of a document tree, with automatic links to siblings, parents and children&lt;/li&gt;&lt;li&gt;Automatic indices: general index as well as a module index&lt;/li&gt;&lt;li&gt;Code handling: automatic highlighting using the &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; highlighter&lt;/li&gt;&lt;li&gt;Goodies such as changes overview, and external link checking&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What else?&lt;/h2&gt;Various extensions are available and in development:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://sphinx.pocoo.org/ext/autodoc.html"&gt;autodoc&lt;/a&gt;: pulls in documentation from docstrings that are written in reST, to avoid having to maintain multiple documentation locations&lt;/li&gt;&lt;li&gt;&lt;a href="http://sphinx.pocoo.org/ext/doctest.html"&gt;doctest&lt;/a&gt;: automatically tests snippets in the documentation in doctest fashion&lt;/li&gt;&lt;li&gt;coverage: documentation coverage checker&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'd like to thank everyone who has given it a try so far and provided me with valuable suggestions and patches: Uli Fouquet, Andre Roberge, Armin Ronacher,  Tim Golden and Mark Summerfield.&lt;/p&gt;&lt;p&gt;Now back to documenting new 2.6 features...&lt;/p&gt;</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/03/sphinx-is-released.html' title='Sphinx is released!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=9185138739609782760' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/9185138739609782760/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/9185138739609782760'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/9185138739609782760'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-4545544663232254449</id><published>2008-02-17T20:30:00.002+01:00</published><updated>2008-02-18T21:10:22.769+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='py3k'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>New in Python 3: Extended unpacking</title><content type='html'>A little new feature in Python 3 that many overviews don't tell you about: &lt;b&gt;extended unpacking&lt;/b&gt;.  In a way, it complements starred function parameters and is therefore a straightforward extension to the syntax.&lt;br /&gt;&lt;br /&gt;In a nutshell:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&gt;&gt;&gt; a, *b = range(5)&lt;br /&gt;&gt;&gt;&gt; a&lt;br /&gt;0&lt;br /&gt;&gt;&gt;&gt; b&lt;br /&gt;[1, 2, 3, 4]&lt;br /&gt;&lt;br /&gt;&gt;&gt;&gt; *a, b = range(5)&lt;br /&gt;&gt;&gt;&gt; a&lt;br /&gt;[0, 1, 2, 3]&lt;br /&gt;&gt;&gt;&gt; b&lt;br /&gt;4&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;It works with any iterable on the right hand side, while the starred target on the &lt;s&gt;right&lt;/s&gt;left hand side always gets assigned a list.  There may be at most one starred target.&lt;br /&gt;&lt;br /&gt;There must be at least enough items in the iterable to assign one to all non-starred targets; the starred one will then be assigned an empty list.&lt;br /&gt;&lt;br /&gt;More in &lt;a href="http://www.python.org/dev/peps/pep-3132"&gt;PEP 3132&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/10/new-in-python-3-extended-unpacking.html' title='New in Python 3: Extended unpacking'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=4545544663232254449' title='13 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/4545544663232254449/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/4545544663232254449'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/4545544663232254449'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-7736602729895328174</id><published>2008-02-17T20:16:00.002+01:00</published><updated>2008-02-17T20:31:32.414+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='emacs'/><title type='text'>There are many things you can say about Emacs...</title><content type='html'>... but you can't say it's ugly. Not anymore. The "unicode" branch of Emacs 23 is now merged with the CVS trunk, and quite stable (I've been using it for months, without apparent problems).&lt;br /&gt;&lt;br /&gt;Here are two examples of what a modern Emacs might look like, one editing Python code (with ECB, Org mode agenda and integrated interpreter), one editing reST documentation (with occur-mode).&lt;br /&gt;&lt;br /&gt;&lt;a href="http://pocoo.org/%7Egbrandl/emacs2.png"&gt;&lt;img src="http://pocoo.org/%7Egbrandl/emacs2t.png" /&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href="http://pocoo.org/%7Egbrandl/emacs3.png"&gt;&lt;img src="http://pocoo.org/%7Egbrandl/emacs3t.png" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;So it's not ugly anymore. It doesn't need hundreds of megabytes of memory either. It's &lt;a href="http://pymacs.progiciels-bpi.ca/"&gt;scriptable in Python&lt;/a&gt;. It makes you use those 90% of your keyboard you didn't even know exists. So, what's your excuse not to use it? ;-)&lt;br /&gt;&lt;br /&gt;Obligatory links: &lt;a href="http://gnu.org/software/emacs"&gt;the homepage&lt;/a&gt; or, for more and advanced stuff, the comprehensive &lt;a href="http://emacswiki.org"&gt;Wiki&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;(Yes, my .emacs is &lt;a href="http://pocoo.org/~gbrandl/dotemacs"&gt;here&lt;/a&gt;.)</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/02/there-are-many-things-you-can-say-about.html' title='There are many things you can say about Emacs...'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=7736602729895328174' title='25 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/7736602729895328174/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/7736602729895328174'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/7736602729895328174'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-1912737899201812251</id><published>2008-01-21T15:56:00.001+01:00</published><updated>2008-01-21T16:07:20.163+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='docs'/><title type='text'>What do you look for in a documentation tool?</title><content type='html'>In the last few days, I've tried to decouple Python's new documentation tool (called "Sphinx") from Python itself, so that other projects can use it too.&lt;br /&gt;&lt;br /&gt;I know that the Python world is not short of documentation tools, but it would be a waste of effort not to make this small step and offer another hopefully useful tool to the community.&lt;br /&gt;&lt;br /&gt;If you didn't pay attention to the new docs yet (see &lt;a href="http://docs.python.org/dev"&gt;http://docs.python.org/dev&lt;/a&gt; for a daily build), these are some of the main features (implemented as needed for Python core docs):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Doc source is written in reStructuredText with some custom reST markup&lt;/li&gt;&lt;li&gt;Output formats are currently HTML, Windows HTML help, LaTeX&lt;/li&gt;&lt;li&gt;Easy definition of a document hierarchy&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Automatic cross-linking of object names, terms and more information items&lt;/li&gt;&lt;li&gt;Index and module index building&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Automated source highlighting&lt;/li&gt;&lt;/ul&gt;All in all it's a good choice if your documentation consists of reST files that you want to arrange into a consistent tree of docs.&lt;br /&gt;&lt;br /&gt;What's different to many other documentation tools is that no generation of docs from docstrings is currently supported (Python never did this, all documentation is maintained separately). Of course, it's not impossible to add that capability, and &lt;a href="http://lucumr.pocoo.org/"&gt;Armin&lt;/a&gt; is looking into that already.&lt;br /&gt;&lt;br /&gt;Therefore, I ask those of you who would be interested in using Sphinx for their projects: &lt;span style="font-weight: bold;"&gt;What features would you  need/want/like?&lt;/span&gt; (Except for documentation, which is currently restricted to &lt;a href="http://docs.python.org/dev/documenting"&gt;this document&lt;/a&gt; and will be extended soon.)</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/01/what-do-you-look-for-in-documentation.html' title='What do you look for in a documentation tool?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=1912737899201812251' title='10 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/1912737899201812251/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/1912737899201812251'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/1912737899201812251'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-235504813316915635</id><published>2008-01-21T15:47:00.000+01:00</published><updated>2008-01-21T15:55:59.217+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Python Bug Days</title><content type='html'>If you didn't notice, last Saturday was a Python bug day. It was quite a success (35 bugs closed) and Christian Heimes and I continued on Sunday, closing 50 more bugs, mainly old ones that didn't apply anymore. A few new developers joined and contributed patches -- hopefully we'll see them again.&lt;br /&gt;&lt;br /&gt;Because of that, and in the face of 1700+ open issues (don't worry though, many are "just" feature requests...), we're beginning to tentatively set up the bug day as a monthly institution -- the next will be on February 23.&lt;br /&gt;&lt;br /&gt;If you're unfamiliar with the bug day concept: as many core developers as possible meet, discuss bugs and fix them (if possible). Therefore, it's also an opportunity for non-regular contributors to join in, get attention to their patches and fix problems. Why not you too next time?</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2008/01/python-bug-days.html' title='Python Bug Days'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=235504813316915635' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/235504813316915635/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/235504813316915635'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/235504813316915635'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-7391255934598394399</id><published>2007-12-19T16:11:00.001+01:00</published><updated>2007-12-19T16:13:43.651+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pypy'/><title type='text'>German PyPy talk</title><content type='html'>I've recently given a talk about &lt;a href="http://codespeak.net/pypy"&gt;PyPy&lt;/a&gt; at the Munich Python User Group meeting.&lt;br /&gt;The slides (in German) are &lt;a href="http://pocoo.org/%7Egbrandl/pypy.pdf"&gt;here&lt;/a&gt;.&lt;span style="display: block;" id="formatbar_Buttons"&gt;&lt;span class="on down" style="display: block;" id="formatbar_CreateLink" title="" onmouseover="ButtonHoverOn(this);" onmouseout="ButtonHoverOff(this);" onmouseup="" onmousedown="CheckFormatting(event);FormatbarButton('richeditorframe', this, 8);ButtonMouseDown(this);"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;BTW: There's also a &lt;a href="http://morepypy.blogspot.com/"&gt;PyPy blog&lt;/a&gt;, if you want to stay up-to-date...</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/12/german-pypy-talk.html' title='German PyPy talk'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=7391255934598394399' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/7391255934598394399/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/7391255934598394399'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/7391255934598394399'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-2167617983427964095</id><published>2007-12-09T22:54:00.000+01:00</published><updated>2007-12-09T22:56:18.900+01:00</updated><title type='text'>Werkzeug 0.1</title><content type='html'>If you're not a friend of large web frameworks but prefer to use small agile libraries to roll your own, &lt;a href="http://werkzeug.pocoo.org"&gt;Werkzeug&lt;/a&gt; may be the WSGI adapter of choice for you. Armin just released version 0.1, and here is the feature list:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Provides Request and Response objects for WSGI&lt;/li&gt;&lt;li&gt;Handles file uploads by using temporary files for incoming data.&lt;/li&gt;&lt;li&gt;Provides a middleware for static data for development purposes&lt;/li&gt;&lt;li&gt;Tiny wrapper around wsgiref for easier development (autoreload, optional&lt;br /&gt;        multithreaded enviornment)&lt;/li&gt;&lt;li&gt;Unicode aware data processing. Just use unicode everywhere, werkzeug&lt;br /&gt;        handles that for you.&lt;/li&gt;&lt;li&gt;Mini template engine. Sometimes string formattings just are not enough&lt;br /&gt;        and real template engines are too big for that tiny task.&lt;/li&gt;&lt;li&gt;Context locals.  Don’t pass request/user/database connections and&lt;br /&gt;        other objects around.  Put them on a global context local object and&lt;br /&gt;        werkzeug makes sure that everyting is cleaned up end delivered well.&lt;/li&gt;&lt;li&gt;Test utilities.  Create fake WSGI environments and requests to test&lt;br /&gt;        your application.&lt;/li&gt;&lt;li&gt;Interactive debugger.  Application dies with an error? Hook the debugger&lt;br /&gt;        in and inspect every frame.&lt;/li&gt;&lt;/ul&gt;More at &lt;a href="http://lucumr.pocoo.org/cogitations/2007/12/09/werkzeug-01-released/"&gt;his blog&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/12/werkzeug-01.html' title='Werkzeug 0.1'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=2167617983427964095' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/2167617983427964095/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/2167617983427964095'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/2167617983427964095'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-5318068922271184047</id><published>2007-12-07T21:01:00.000+01:00</published><updated>2007-12-07T21:08:05.560+01:00</updated><title type='text'>Python 3.0a2, new tasks in GHOP</title><content type='html'>Two updates:&lt;br /&gt;&lt;ol&gt;&lt;br /&gt;&lt;li&gt; Guido just released Python 3.0 alpha 2, to be downloaded at the usual locations -- get it and check it out! There was quite a lot of work behind the scenes, and lots of bugs have been fixed. The core changes are now almost done, next step is the library.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt; Titus has added 100 new tasks to Python's GHOP tracker! Considering the speed with which the students claimed and completed the first 60-something tasks, let's see if they last until Monday ;)&lt;br /&gt;&lt;br /&gt;(Ah yes, and there is a &lt;a href="http://google-code-updates.blogspot.com/2007/12/in-just-seven-days.html"&gt;video with Guido on Google Code's blog&lt;/a&gt;!)&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/12/python-30a2-new-tasks-in-ghop.html' title='Python 3.0a2, new tasks in GHOP'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=5318068922271184047' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/5318068922271184047/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/5318068922271184047'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/5318068922271184047'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-2153408699988637483</id><published>2007-12-02T00:21:00.000+01:00</published><updated>2007-12-02T00:29:11.260+01:00</updated><title type='text'>GHOP coming along nicely</title><content type='html'>The &lt;a href="http://pyside.blogspot.com/2007/11/announcement-google-highly-open.html"&gt;Google contest for pre-college students &lt;/a&gt;is now running for a few days, and we (the PSF) have had already quite a lot of response.&lt;br /&gt;&lt;br /&gt;Of our initial 60-something tasks, we've only 45 left open, and only 8 are unclaimed so far. That means that we're running out of tasks!&lt;br /&gt;&lt;br /&gt;You saw it coming, didn't you? Because this is &lt;span style="font-weight: bold;"&gt;your&lt;/span&gt; chance to get involved. Everyone can suggest tasks (see the &lt;a href="http://code.google.com/p/google-highly-open-participation-psf/wiki/NewTaskGuidelines"&gt;wiki page&lt;/a&gt; on how exactly) and help out as a mentor, reviewing submissions and answering questions from students.&lt;br /&gt;&lt;br /&gt;If you have some time and ideas, join and help making this a success for both Python and the students!</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/12/ghop-coming-along-nicely.html' title='GHOP coming along nicely'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=2153408699988637483' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/2153408699988637483/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/2153408699988637483'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/2153408699988637483'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-8188208654296801181</id><published>2007-11-28T17:31:00.000+01:00</published><updated>2007-11-28T17:39:31.345+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='ghop'/><title type='text'>Announcement: the Google Highly Open Participation Contest</title><content type='html'>&lt;a class="reference image-reference" href="http://code.google.com/opensource/ghop/2007-8"&gt;&lt;img alt="logo" src="http://ivory.idyll.org/permanent/ghoplogo.jpg" style="height: 200px;" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The Highly Open Participation Contest is part of a new Google Open Source program, an effort to bring together pre-college students and open-source development. The contestants are completing various tasks (that will be a contribution to the respective project) and for that can get prizes and rewards from Google.&lt;br /&gt;&lt;br /&gt;The PSF has been invited to this — you can read the official announcement of the PSF's involvement over on the &lt;a class="reference" href="http://pyfound.blogspot.com/"&gt;Python Software Foundation blog&lt;/a&gt; (in a bit), or read about the overall Google Highly Open Participation Contest &lt;a class="reference" href="http://code.google.com/opensource/ghop/2007-8"&gt;at the official announcement&lt;/a&gt;.  Python's GHOP project page is &lt;a class="reference" href="http://code.google.com/p/google-highly-open-participation-psf/"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I've been involved in it for a couple of weeks, mainly contributing tasks (in the docs area, no surprise there), and now I'll serve as a mentor for whoever is audacious enough to tackle a task ;-)&lt;br /&gt;&lt;br /&gt;That said, if you look at the &lt;a class="reference" href="http://code.google.com/p/google-highly-open-participation-psf/issues/list"&gt;list of tasks&lt;/a&gt; and think you know another one in the same spirit, let us know!&lt;br /&gt;&lt;br /&gt;I'm really looking forward to the results and hope that both students and Python can benefit from Google's engagement.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/11/announcement-google-highly-open.html' title='Announcement: the Google Highly Open Participation Contest'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=8188208654296801181' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/8188208654296801181/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/8188208654296801181'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/8188208654296801181'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-7861890173898887292</id><published>2007-10-14T22:49:00.000+02:00</published><updated>2007-10-15T14:38:53.012+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='pygments'/><title type='text'>Pygments 0.9 "Herbstzeitlose" released</title><content type='html'>I've just uploaded the &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; 0.9 packages to &lt;a href="http://pypi.python.org/pypi/Pygments"&gt;CheeseShop&lt;/a&gt;. Highlights in this release are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Lexers added:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;  Erlang&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;ActionScript&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Literate Haskell&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Common Lisp&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Various assembly languages&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Gettext catalogs&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Squid configuration&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Debian control files&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;MySQL-style SQL&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;MOOCode&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Lexers improved:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Greatly improved the Haskell and OCaml lexers.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Improved the Bash lexer's handling of nested constructs.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The C# and Java lexers exhibited abysmal performance with some input code; this should now be fixed.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The IRC logs lexer is now able to colorize weechat logs too.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The Lua lexer now recognizes multi-line comments.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Fixed bugs in the D and MiniD lexer.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;The encoding handling of the command line mode (pygmentize) was enhanced. You shouldn't get UnicodeErrors from it anymore if you don't give an encoding option.&lt;/li&gt;&lt;li&gt;Added a &lt;span style="font-family: courier new;"&gt;-P&lt;/span&gt; option to the command line mode which can be used to give options whose values contain commas or equals signs.&lt;/li&gt;&lt;li&gt;Added 256-color terminal formatter.&lt;/li&gt;&lt;li&gt;Added an experimental SVG formatter.&lt;/li&gt;&lt;li&gt;Added the &lt;span style="font-family: courier new;"&gt;lineanchors&lt;/span&gt; option to the HTML formatter, thanks to Ian Charnas for the idea.&lt;/li&gt;&lt;li&gt;Gave the line numbers table a CSS class in the HTML formatter.&lt;/li&gt;&lt;li&gt;Added a Vim 7-like style.&lt;/li&gt;&lt;/ul&gt;I want to express my gratitude to all contributors who helped to build this impressive feature list for 0.9. Thanks!</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/10/pygments-09-released.html' title='Pygments 0.9 &quot;Herbstzeitlose&quot; released'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=7861890173898887292' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/7861890173898887292/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/7861890173898887292'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/7861890173898887292'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-3452562694237224211</id><published>2007-10-13T17:56:00.000+02:00</published><updated>2007-10-13T20:32:01.284+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='py3k'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Bytes are not just numbers</title><content type='html'>In &lt;a href="http://pyside.blogspot.com/2007/10/string-types-in-python-3.html#c1365606426199358012"&gt;this&lt;/a&gt; comment, mathrick said that bytes are "&lt;b&gt;not&lt;/b&gt; characters, they are numbers, uppercasing them makes no sense".&lt;br /&gt;&lt;br /&gt;Guido does not mention in &lt;a href="http://www.python.org/dev/peps/pep-3137"&gt;PEP 3137&lt;/a&gt; why the &lt;span style="font-family: courier new;"&gt;upper()&lt;/span&gt;, &lt;span style="font-family: courier new;"&gt;lower()&lt;/span&gt; etc. methods are added back to the Python 3 &lt;span style="font-family: courier new;"&gt;bytes&lt;/span&gt; and &lt;span style="font-family: courier new;"&gt;buffer&lt;/span&gt; types.&lt;br /&gt;&lt;br /&gt;The way I see it is that bytes are integers, but not &lt;span style="font-style: italic;"&gt;just&lt;/span&gt; integers: each integer in the 0-127 range has a fixed character attached to it, which is also why you can construct a bytes object with &lt;span style="font-family: courier new;"&gt;b"ABC"&lt;/span&gt;, with only printable ASCII characters allowed in the literal.  So it actually makes sense for me to provide operations on these characters, as well as it makes sense not to use the locale for them.&lt;br /&gt;&lt;br /&gt;On a related note, there were suggestions for another new literal, a character literal: &lt;span style="font-family: courier new;"&gt;c"A"&lt;/span&gt; would mean the same as &lt;span style="font-family: courier new;"&gt;ord("A")&lt;/span&gt;, so that you could do something like &lt;span style="font-family: courier new;"&gt;bytesobj[i] == c"A"&lt;/span&gt;.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/10/bytes-are-not-just-numbers.html' title='Bytes are not just numbers'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=3452562694237224211' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/3452562694237224211/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/3452562694237224211'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/3452562694237224211'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-189575840393229240</id><published>2007-10-08T21:30:00.000+02:00</published><updated>2007-10-08T23:04:59.967+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='py3k'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>String types in Python 3</title><content type='html'>For a while, there were only two string-like types planned for Python 3, and the Alpha 1 shipped with them:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family:courier new;"&gt;str&lt;/span&gt;, which is an immutable string of Unicode characters (what was &lt;span style="font-family:courier new;"&gt;unicode&lt;/span&gt; in Python 2)&lt;/li&gt;&lt;li&gt;&lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt;, which is a mutable array of bytes (a sequence whose items are integers), with no equivalent in Python 2&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;These two would not be as interchangeable as &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt; and &lt;span style="font-family:courier new;"&gt;unicode&lt;/span&gt; were in Python 2: comparison between these two would raise &lt;span style="font-family:courier new;"&gt;TypeError&lt;/span&gt;, and bytes would have much less methods than the old &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt; type had.&lt;br /&gt;&lt;br /&gt;However, several issues arised with having only a mutable bytes array:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The new &lt;span style="font-family:courier new;"&gt;b"..."&lt;/span&gt; literal would produce a mutable object, in contrast to the other &lt;span style="font-family:courier new;"&gt;"..."&lt;/span&gt;-type literals.&lt;/li&gt;&lt;li&gt;Bytes objects couldn't be used as dictionary keys because of mutability - you'd have to decode them to some Unicode string first which doesn't make sense in many places.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;How to represent code - Python bytecode is, well, bytes, but having mutable bytecode arrays attachted to code objects is questionable from a security standpoint.&lt;/li&gt;&lt;/ul&gt;Therefore, summarizing the discussion and his thoughts about the matter, Guido wrote &lt;a href="http://www.python.org/dev/peps/pep-3137"&gt;PEP 3137&lt;/a&gt;, which will be implemented before Alpha 2 is released. It features these changes:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Now we have three string types: &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt;, unchanged as immutable Unicode string, &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt;, almost completely the same as the Python 2 &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt;, with &lt;span style="font-family:courier new;"&gt;b"..."&lt;/span&gt; literals yielding &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt;, and &lt;span style="font-family:courier new;"&gt;buffer&lt;/span&gt;, renamed from Alpha 1's &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;Bytes and buffer objects regain the old string methods &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt; lost, e.g. &lt;span style="font-family:courier new;"&gt;upper()&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;Comparison between &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt; and &lt;span style="font-family:courier new;"&gt;bytes/buffer&lt;/span&gt; always yields &lt;span style="font-family:courier new;"&gt;False&lt;/span&gt;, &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt; and &lt;span style="font-family:courier new;"&gt;buffer&lt;/span&gt; can be compared.&lt;/li&gt;&lt;li&gt;However, indexing &lt;span style="font-family:courier new;"&gt;bytes&lt;/span&gt; and &lt;span style="font-family:courier new;"&gt;buffer&lt;/span&gt; will still give an integer.&lt;/li&gt;&lt;li&gt;The old, underused &lt;span style="font-family:courier new;"&gt;buffer&lt;/span&gt; function will be gone, the new "buffer interface" has a new &lt;span style="font-family:courier new;"&gt;memoryview&lt;/span&gt; function instead.&lt;/li&gt;&lt;/ul&gt;That way, porting from Python 2 is quite easy, provided you have already used &lt;span style="font-family:courier new;"&gt;unicode&lt;/span&gt; and &lt;span style="font-family:courier new;"&gt;str&lt;/span&gt; where they belong: change &lt;span style="font-family:courier new;"&gt;u"..."&lt;/span&gt; literals to &lt;span style="font-family:courier new;"&gt;"..." &lt;/span&gt;and &lt;span style="font-family:courier new;"&gt;"..."&lt;/span&gt; literals to &lt;span style="font-family:courier new;"&gt;b"..."&lt;/span&gt;. Look at cases where you could use a mutable byte string and use &lt;span style="font-family:courier new;"&gt;buffer&lt;/span&gt; there.&lt;span style="font-weight: bold;"&gt;&lt;/span&gt;</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/10/string-types-in-python-3.html' title='String types in Python 3'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=189575840393229240' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/189575840393229240/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/189575840393229240'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/189575840393229240'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-3421551084851358454</id><published>2007-10-08T20:39:00.001+02:00</published><updated>2007-10-09T21:11:00.126+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='haskell'/><title type='text'>A venture into functional programming</title><content type='html'>I've recently decided to take a time-out from Python development and immerse myself in the group of languages that's usually called "functional programming languages"; they had always sounded very interesting (because different) to me, but I couldn't muster the time and will to look at them in depth.&lt;br /&gt;&lt;br /&gt;I decided to skip Lisp, having encountered some Emacs Lisp code in the past, looked at OCaml and Erlang and finally stuck with &lt;a href="http://www.haskell.org/"&gt;Haskell&lt;/a&gt;. Why? I think it was because Haskell is the most "different" of all those languages, and I wanted to learn something as "different" as possible.&lt;br /&gt;&lt;span style="font-size:85%;"&gt;&lt;br /&gt;(If you already know Haskell, you can skip the following explanations.)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;What makes it "different"? Among the fundamental design decisions that make Haskell pretty unique (among the more or less well-known languages) are &lt;span style="font-style: italic;"&gt;purity&lt;/span&gt; and &lt;span style="font-style: italic;"&gt;laziness&lt;/span&gt;. Let me explain these terms a bit (I hope I do them justice):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-style: italic;"&gt;Purity&lt;/span&gt; means that a function calculates its return value only from its arguments - it cannot have side effects, such as writing to global memory or printing to the screen. (Nevertheless, I/O is of course possible, and it does not violate this principle. How? See below.)&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-style: italic;"&gt;Laziness&lt;/span&gt; means that calculations are not done until their result is really needed. It is similar to generators producing the next item on request only, but ingrained in every part of the language. For example, laziness makes it possible to work with infinite lists. There is no &lt;span style="font-family:courier new;"&gt;map&lt;/span&gt; vs. &lt;span style="font-family:courier new;"&gt;imap&lt;/span&gt; distinction, the normal map is already lazy enough not to produce lists that are never needed.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;Despite the limitation that purity seems to pose on code, one is able to write quite formidable programs in Haskell, for a not-so-small part with the help of &lt;span style="font-style: italic;"&gt;monads&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;(Having uttered that magic word now, let me tell you that Simon Peyton Jones, one of Haskell's fathers, once said that the biggest mistake made in the introduction of monads into the language was to call them by such a scary name and not, for example, "warm fuzzy thing".)&lt;br /&gt;&lt;br /&gt;Monads may come from "the most abstract branch of mathematics called category theory" but are, in real life, a way to build &lt;span style="font-style: italic;"&gt;"computations"&lt;/span&gt; and stick them together in a specific way, so that the dull, repeated boilerplate code needed to stick them together is hidden by the monad. I won't say much more on them (yet - they say one of the duties of a new Haskell programmer is to write Another Monad Tutorial).&lt;br /&gt;&lt;br /&gt;Monads allow you to do I/O purely, to have mutable state, to parse text, to write nondeterministic functions easily or, for a more advanced example, to use Software Transactional Memory to manage concurrent threads.&lt;br /&gt;&lt;br /&gt;More stuff that makes Haskell fun(ctional):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The whole functional paradigma, meaning functions passed around everywhere, partial application made easy, recursion etc.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;The type system. It's based on Hindley-Milner, enriched with ad-hoc polymorphism facilities of type classes (think function overloading based on arguments as well as the return type), and allows type inference of the whole program. Static typing done right!&lt;/li&gt;&lt;li&gt;The nice mathematical-notation-like syntax, and the whitespace-based grouping.&lt;/li&gt;&lt;li&gt;The well-designed module system, including import statements!&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;In other words, you should try it out! It takes a while getting used to, especially if you have, like me, never really done functional programming (except what Python offers), but it is fun to write. More than once, I've had the feeling that Haskell and Python share a similar spirit of expression - to exaggerate, you write down pseudo-code, and it's executable already.&lt;br /&gt;&lt;br /&gt;After the first few steps (which included a primitive unpickler and such things), I ported a Python library to Haskell, namely &lt;span style="font-weight: bold;"&gt;CleverCSS&lt;/span&gt;, which is a preprocessor for CSS with variables and nesting enabling DRY, and after fighting with the Parsec parser generator a bit, it was a really pleasant exercise with lots of stuff learned.&lt;br /&gt;&lt;br /&gt;I also have to note that while the Python implementation had 1072 lines of code, the functional equivalent Haskell one is down at 760. You can look at &lt;a href="http://dev.pocoo.org/hg/clevercss-hs-main"&gt;the code in the repository&lt;/a&gt; or &lt;a href="http://sandbox.pocoo.org/clevercss-hs/"&gt;the documentation&lt;/a&gt; (it's also on &lt;a href="http://hackage.haskell.org/"&gt;Hackage&lt;/a&gt;, the Haskell package repository under the name &lt;span style="font-style: italic;"&gt;clevercss&lt;/span&gt;).&lt;br /&gt;&lt;br /&gt;Excellent sources for taking a more in-depth look at Haskell are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The videos of &lt;a href="http://blip.tv/file/324976/"&gt;a talk by Simon Peyton Jones&lt;/a&gt;, which are really worth watching, and fun!&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://darcs.haskell.org/yaht/yaht.pdf"&gt;This tutorial&lt;/a&gt;, which is very well structured.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;And everything on the &lt;a href="http://www.haskell.org/"&gt;haskell.org&lt;/a&gt; homepage.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;There is also a very nice, friendly and always-helpful IRC channel #haskell on Freenode.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/10/venture-into-functional-programming.html' title='A venture into functional programming'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=3421551084851358454' title='6 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/3421551084851358454/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/3421551084851358454'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/3421551084851358454'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-5883616884546981755</id><published>2007-08-31T18:29:00.000+02:00</published><updated>2007-10-13T22:22:34.243+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='py3k'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Python 3.0 alpha 1 released!</title><content type='html'>Today, Guido himself released the first alpha of Python 3.0, now available for download at &lt;a href="http://www.python.org/download/releases/3.0/"&gt;http://www.python.org/download/releases/3.0/&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Get it, test it, port your code (see &lt;a href="http://svn.python.org/view/sandbox/trunk/2to3/"&gt;http://svn.python.org/view/sandbox/trunk/2to3/&lt;/a&gt;) and report many, many bugs -- I want to be at 1500 by the time the final is released! :-)</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/08/python-30-alpha-1-released.html' title='Python 3.0 alpha 1 released!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=5883616884546981755' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/5883616884546981755/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/5883616884546981755'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/5883616884546981755'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-3290079994080369364</id><published>2007-08-17T19:45:00.000+02:00</published><updated>2007-08-17T19:49:36.520+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='docs'/><title type='text'>reST Python Documentation live</title><content type='html'>Much has happened since my call for documentation team members.&lt;br /&gt;&lt;br /&gt;The new docs have now taken over in the Python 2.6 and Python 3.0 branches of development, and the static HTML version can be viewed at&lt;br /&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/dev"&gt;http://docs.python.org/dev&lt;/a&gt; and &lt;a href="http://docs.python.org/dev/3.0"&gt;http://docs.python.org/dev/3.0&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The build process also has been simplified; now a simple "make html" should suffice on a sufficiently equipped system (which means, Python &gt;= 2.5 and Make present).</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/08/rest-python-documentation-live.html' title='reST Python Documentation live'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=3290079994080369364' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/3290079994080369364/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/3290079994080369364'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/3290079994080369364'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-4204562074480445383</id><published>2007-08-09T21:16:00.000+02:00</published><updated>2007-08-17T19:46:39.287+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='py3k'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>p3yk is dead, long live py3k!</title><content type='html'>Finally, Guido has killed the "p3yk" branch and renamed the "py3k-struni" branch to "py3k".&lt;br /&gt;&lt;br /&gt;This means that the "all strings are now unicode" transition is pretty complete, and deemed stable enough to be the new Python 3000 development branch. You can help weeding out the remaining bugs and failing tests by testing it too:&lt;br /&gt;&lt;br /&gt;Check out http://svn.python.org/projects/python/branches/py3k and start messing around with it!</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/08/p3yk-is-dead-long-live-py3k.html' title='p3yk is dead, long live py3k!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=4204562074480445383' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/4204562074480445383/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/4204562074480445383'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/4204562074480445383'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-5921412254925517462</id><published>2007-07-21T13:10:00.000+02:00</published><updated>2007-07-21T13:14:44.412+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='docs'/><title type='text'>Python documentation team looking for members!</title><content type='html'>[as posted to the Python mailing lists]&lt;br /&gt;&lt;br /&gt;Dear fellow Pythonistas,&lt;br /&gt;&lt;br /&gt;as you may have heard, Python is going to get a new documentation system soon [1].  As part of that effort, and in order to maintain the excellent quality of the docs, we are looking for members of the maintainers team. This is your chance to get involved with Python development!&lt;br /&gt;&lt;br /&gt;There will be two main objectives of the group, or maybe two subgroups can&lt;br /&gt;be formed:&lt;br /&gt;&lt;ul&gt;&lt;li&gt; Maintaining the documentation contents:&lt;br /&gt;&lt;ul&gt;&lt;li&gt; processing user submitted comments, bugs and patches&lt;br /&gt;&lt;/li&gt;&lt;li&gt; helping out developers with docs-related matters, keeping an eye on commits to ensure quality&lt;br /&gt;&lt;/li&gt;&lt;li&gt; keeping the docs up-to-date, e.g. write new sections for new Python 3000 features&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The docs source will be in reStructuredText, which is already known to a relatively high percentage of Python developers.&lt;br /&gt;&lt;br /&gt;The new online version of the docs will contain features to add comments and suggest changes, so it is expected that there will be some amount of user involvement.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt; Development of the toolset:&lt;br /&gt;&lt;ul&gt;&lt;li&gt; fixing bugs in the package&lt;br /&gt;&lt;/li&gt;&lt;li&gt; adding new output formats, e.g. info or pdf&lt;br /&gt;&lt;/li&gt;&lt;li&gt; adding new features to the web application&lt;br /&gt;&lt;/li&gt;&lt;li&gt; adapting it to new docutils features&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The software is written in pure Python. It is currently located in the docutils Subversion repository, at &lt;a class="moz-txt-link-freetext" href="http://svn.berlios.de/viewcvs/docutils/trunk/sandbox/py-rest-doc/"&gt;http://svn.berlios.de/viewcvs/docutils/trunk/sandbox/py-rest-doc/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The README file gives you a rough idea what you find there and how to get started, all other questions can be directed to &lt;a class="moz-txt-link-abbreviated" href="mailto:georg@python.org"&gt;georg@python.org&lt;/a&gt;, I'll answer them gladly.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;An additional objective in the near future will, of course, be handling the switch to the new system.&lt;br /&gt;&lt;br /&gt;Okay, so you've read until here? And you're interested in joining the team? Wow! Write to the &lt;a href="mailto:docs@python.org"&gt;docs@python.org&lt;/a&gt; and become a documentation maintainer!&lt;br /&gt;&lt;br /&gt;cheers,&lt;br /&gt;Georg&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] see &lt;a href="http://pyside.blogspot.com/2007/06/introducing-py-rest-doc.html"&gt;http://pyside.blogspot.com/2007/06/introducing-py-rest-doc.html&lt;/a&gt;&lt;span style="text-decoration: underline;"&gt;&lt;/span&gt; for some details, and &lt;a href="http://pydoc.gbrandl.de:3000/"&gt;http://pydoc.gbrandl.de:3000/&lt;/a&gt; [2] for a demo. (Commenting doesn't work yet, but it's worked upon fiercely...)&lt;br /&gt;&lt;br /&gt;[2] the demo server is a small vserver with the application served by a single wsgiref instance, and as such not fit to handle large amounts of requests, so it may well be that you don't get good reponse times.</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/07/python-documentation-team-looking-for.html' title='Python documentation team looking for members!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=5921412254925517462' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/5921412254925517462/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/5921412254925517462'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/5921412254925517462'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-8926331206762568433.post-4189391432399376372</id><published>2007-07-12T12:06:00.000+02:00</published><updated>2007-07-12T12:34:26.521+02:00</updated><title type='text'>1000!</title><content type='html'>Today I closed my 1000th Python tracker issue, after around 2 years of involvement. Yes, that's roughly 1/10 of all closed items on the SourceForge tracker; I can't believe it myself.&lt;br /&gt;&lt;br /&gt;Not that they all were hard to get closed, some pretty percentage were invalid bug reports or old, outdated patches, but I feel satisfied nevertheless that I was able to help the project so much.&lt;br /&gt;&lt;br /&gt;*goes back to work on the docs*</content><link rel='alternate' type='text/html' href='http://pyside.blogspot.com/2007/07/1000.html' title='1000!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=8926331206762568433&amp;postID=4189391432399376372' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/4189391432399376372/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pyside.blogspot.com/feeds/posts/default/4189391432399376372'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8926331206762568433/posts/default/4189391432399376372'/><author><name>Georg</name><uri>http://www.blogger.com/profile/14973145408214215809</uri><email>noreply@blogger.com</email></author></entry></feed>