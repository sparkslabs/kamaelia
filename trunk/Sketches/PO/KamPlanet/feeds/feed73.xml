<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet
			type="text/xsl"
			href="http://nedbatchelder.com/rssfull2html.xslt"
			media="screen"
		?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns="http://purl.org/rss/1.0/">
    <channel rdf:about="http://nedbatchelder.com//blog">
        <title>Ned Batchelder's blog</title>
        <link>http://nedbatchelder.com/blog</link>
        <description>Ned Batchelder's personal blog.</description>
        <dc:language>en-US</dc:language>
        <image rdf:resource="http://nedbatchelder.com/pix/rss-banner.gif"/>
        <items>
            <rdf:Seq>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200806/photoshop_blend_mode_math.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200806/280slides.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200806/dealing_with_experts.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200806/michigan_and_florida_flap.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/i_hate_browserscaled_images.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/i_love_radioshack.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/rex_parker_does_the_nyt_crossword_puzzle.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/ratatouille_and_pixar_technology.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/cog_21_and_newline_detection.html"/>
                
                    <rdf:li resource="http://nedbatchelder.com/blog/200805/bad_web_type_georgias_numerals.html"/>
                
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://nedbatchelder.com/pix/rss-banner.gif">
        <title>Ned Batchelder's blog</title>
        <link>http://nedbatchelder.com/blog</link>
        <url>http://nedbatchelder.com/pix/rss-banner.gif</url>
    </image>
    
    
    <item rdf:about="http://nedbatchelder.com/blog/200806/photoshop_blend_mode_math.html">
        <title>Photoshop blend mode math</title>
        <link>http://nedbatchelder.com/blog/200806/photoshop_blend_mode_math.html</link>
		
        <dc:date>2008-06-07T17:20:26-04:00</dc:date>
        <description><![CDATA[<p>I've used Photoshop and Gimp to do simple image manipulation, and have always
been fascinated and baffled by the blend modes, those mystifying choices for how
to combine two layers in an image.  Dodge? Burn? I could choose them and see what
happens, but what I really wanted was to understand them.
</p><p>Nathan Moinvaziri has concisely summed up the blend modes in the form of C macros:
<a class="offsite" href="http://www.nathanm.com/photoshop-blending-math/">Photoshop Blend Mode Math</a>.
I don't know if it really helps to see Dodge defined as:
</p><blockquote class="code"><tt>#define Blend_ColorDodge(A,B)	((uint8)((A == 255) ? A:((B &lt;&lt; 8) / (255 - A) &gt; 255) ? 255:((B &lt;&lt; 8) / (255 - A))))<br></tt></blockquote><p>but it at least gives me another way to look at the whole concept.</p><p>One of Nathan's sources for the basic information was Paul Dunn's
<a class="offsite" href="http://dunnbypaul.net/blends/">Insight into Photoshop 7.0 Blending Modes</a>,
which has visual aids and a more traditional math notation.
</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200806/280slides.html">
        <title>280slides</title>
        <link>http://nedbatchelder.com/blog/200806/280slides.html</link>
		
        <dc:date>2008-06-07T08:51:36-04:00</dc:date>
        <description><![CDATA[<p><a class="offsite" href="http://280slides.com">280 Slides</a> is an interesting application,
not so much because of what it does, but because of how it does it.
It's a nicely made presentation tool, but pretty basic as far as these things
go (no animations or transitions, for example). But the whole thing runs in your
browser, with no Flash, and has a nice snappy feel.  The most startling thing
though, is the language it is written in: something called Objective-J, an
Objective-C clone implemented in
<a class="offsite" href="http://280slides.com/Editor/1212807849/Frameworks/Objective-J/Objective-J.js">13Kb of JavaScript</a>,
executing in the browser.
</p><p>The rest of the application is delivered in .j files:</p><blockquote class="code"><tt>import &lt;SlideKit/SKPresentation.j&gt;<br>import "EditorController.j"<br><br>//...<br><br>@implementation Document : CPDocument<br><br>//...<br><br>- (CPData)dataOfType:(CPString)aType error:({CPError})anError<br>{<br>    var dictionary = [CPDictionary dictionary],<br>        data = [CPData dataWithString:@""],<br>        archiver = [[CPKeyedArchiver alloc] initForWritingWithMutableData:data];<br><br>    [archiver encodeObject:_presentation forKey:DocumentPresentationKey];<br>    [archiver finishEncoding];<br>    <br>    if (aType == DocumentExportType)<br>        return data;<br>    <br>    [data setString:"documentName=" + encodeURIComponent(_documentName) +<br>        "&amp;numSlides=" + [[_presentation slides] count] + "\n" + [data string]];<br>    <br>    return data;<br>}<br><br>//...<br><br>@end<br></tt></blockquote><p>Objective-J is one of those ideas which seems crazy at first, but then turns out
to be not impossible, and even do-able.  I wonder if it will be adopted by other
Mac developers as a way to on-ramp their skills to the web.</p><p>Ajaxian has an <a class="offsite" href="http://ajaxian.com/archives/an-interview-with-280-north-on-objective-j-and-cappuccino">interview
with the developers</a> (audio, unfortunately), and there's a lot of info in the comments there.
They'll be distributing the language as <a class="offsite" href="http://objective-j.org/">objective-j.org</a>.
</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200806/dealing_with_experts.html">
        <title>Dealing with experts</title>
        <link>http://nedbatchelder.com/blog/200806/dealing_with_experts.html</link>
		
        <dc:date>2008-06-03T10:08:10-04:00</dc:date>
        <description><![CDATA[<p>Driving to work today, I saw a truck for a disaster recovery firm.  On the back,
to announce their capabilities, it read,
</p><blockquote><div><p>FIRE | FLOOD | MOLD | EXPERTS</p></div></blockquote><p>The next time my house is overrun with experts, I'll know who to call!</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200806/michigan_and_florida_flap.html">
        <title>Michigan and Florida flap</title>
        <link>http://nedbatchelder.com/blog/200806/michigan_and_florida_flap.html</link>
		
        <dc:date>2008-06-01T08:12:35-04:00</dc:date>
        <description><![CDATA[<p>I've been amazed and disgusted watching the Democrats crawl toward the finish
line.  Yesterday's <a class="offsite" href="http://www.boston.com/news/nation/articles/2008/06/01/accord_furor_over_mich_fla_delegates/">decision about Michigan and Florida</a>
may have made it possible to end the Obama/Clinton mudfest, but Clinton is still
reserving the right to appeal the decision.  There are so many disgusting parts
of the whole mess:</p><ul>
    <li>Clinton proposing that the votes be taken at their face,
even though Obama wasn't on the ballot in Michigan because he did what they both
agreed to do: not run in those states,</li>
    <li>Clinton supporting that proposal by comparing this mess to Zimbabwe,</li>
    <li>The crazy primary scheduling process that caused the problem in the first place,</li>
    <li>Michigan and Florida residents blaming the DNC when the action was taken
    by their own state parties, and consequences were made very clear from the beginning.</li>
</ul><p>And the funniest part of all? Clinton supporters claiming they'll vote for
McCain if the delegates aren't reinstated.  One voter was quoted as saying she'd vote for
McCain because she couldn't stick with a party that would do this to Michigan and
Florida.  Guess what?  The Republican party made the exact same decision, for
the exact same reasons, they just didn't get the news coverage because it didn't
affect the outcome. BTW: I'd give a link to a press release about the RNC decision,
but <a class="offsite" href="http://gop.com">their website</a> seems to be all Obama all the time,
so there's no mention of it there.  The
<a class="offsite" href="http://www.gop.com/About/Rules11-20.htm">party rules</a> seem pretty clear, though:</p><blockquote><div><p>16.a.1: If a state or state party violates the Rules of the Republican Party
relating to the timing of the selection process resulting in the election of delegates
or alternate delegates to the national convention before the call to the national
convention is issued, then the number of delegates to the national convention from
that state shall be reduced by fifty percent (50%), and the corresponding alternate
delegates shall also be reduced.
</p></div></blockquote><p>and the <a class="offsite" href="http://www.democrats.org/page/-/pdf/20080515_allocation1pgr.pdf">Democrat's rules</a>
are just as unambiguous.  In fact, after reading these two clauses, I don't
understand why the original threat was to seat no delegates, or why there had
to be any "agreement" about what to do at all.  After all the turmoil, the parties
did just what they had said they would do over a year ago.</p><p>Clinton voters switching to McCain is either stupidity or spite, neither of
which is a good reason to vote for president.  Actually, come to think of it,
maybe Clinton supporters will feel at home in the GOP.  What with saying anything
to win, whining about the slant of the media, and exploiting electoral confusion
to get ahead, they might feel right at home in Bush's party.
</p><p>I just hope that Clinton will read the writing on the wall and do the right
thing soon. She has a chance here to save her reputation by doing what is good
for the party, though if she clings to the rock face by her fingernails much
longer, it's going to be very difficult for her to come out of this looking
good.</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/i_hate_browserscaled_images.html">
        <title>I hate browser-scaled images</title>
        <link>http://nedbatchelder.com/blog/200805/i_hate_browserscaled_images.html</link>
		
        <dc:date>2008-05-31T08:16:00-04:00</dc:date>
        <description><![CDATA[<p>When adding images to a web page, it's good practice to specify their height
and width explicitly, like so:
</p><blockquote class="code"><tt>&lt;img src='pix/nedsimpson.png' width='372' height='375'/&gt;<br></tt></blockquote><p align="center"><img src="http://nedbatchelder.com/pix/nedsimpson.png" alt="Me as a Simpson, natural size" width="372" height="375"></p><p>Providing the height and width means that the img tag can be properly laid out
before the image itself is loaded, so the page won't jump and wiggle as images
are pulled in.</p><p>The problem is that you might have the width and height wrong.  If you specify
them different than the actual width and height of the image, the browser will stretch
or squash the image to fit the specified size, but it may not do it well:</p><p align="center"><img src="http://nedbatchelder.com/pix/nedsimpson.png" alt="Me as a Simpson, reduced" width="200" height="200"></p><p>Browser check: In Firefox 2 this looks pixellated, in Safari it looks nice.
IE 6 and 7 are bad.  Firefox 3 is still pixellated, but less so than FF2.
For those with superior browsers, here's what that image looks like to the
majority:
</p><p align="center"><img src="http://nedbatchelder.com/pix/nedsimpsonscaled.png" alt="Screengrab of bad browser scaling" width="200" height="200"></p><p>Sometimes, changing the shape is what you want — this is often done with
1-pixel transparent gifs, or abstract textures.  But for genuine images, browser
scaling is always bad.  It gives the images a noisy scrunched-up look.  There's
a few reasons the size could be wrong:</p><ul>
<li>They used to be right, but the artwork changed, and the tag wasn't updated</li>
<li>They are hand-coded, and the src attribute is programmatically generated</li>
<li>Simple error</li>
</ul><p>Whatever the reason, it can be hard to see that these sorts of mistakes have
crept into your site, especially if you are using a newer browser that does a good
job scaling images.</p><p>This JavaScript function will highlight images which have been scaled in the
browser:</p><blockquote class="code"><tt><span class="c_word">function</span><span class="c_default">&#160;</span><span class="c_identifier">checkImageSizes</span><span class="c_operator">()</span><span class="c_default">&#160;</span><span class="c_operator">{</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_commentline">//&#160;Find&#160;images&#160;which&#160;have&#160;width&#160;or&#160;height&#160;different&#160;than&#160;their&#160;natural</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_commentline">//&#160;width&#160;or&#160;height,&#160;and&#160;give&#160;them&#160;a&#160;stark&#160;and&#160;ugly&#160;marker,&#160;as&#160;well</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_commentline">//&#160;as&#160;a&#160;useful&#160;title.</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_word">var</span><span class="c_default">&#160;</span><span class="c_identifier">imgs</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_identifier">document</span><span class="c_operator">.</span><span class="c_identifier">getElementsByTagName</span><span class="c_operator">(</span><span class="c_string">"img"</span><span class="c_operator">);</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_word">for</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">i</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_number">0</span><span class="c_operator">;</span><span class="c_default">&#160;</span><span class="c_identifier">i</span><span class="c_default">&#160;</span><span class="c_operator">&lt;</span><span class="c_default">&#160;</span><span class="c_identifier">imgs</span><span class="c_operator">.</span><span class="c_identifier">length</span><span class="c_operator">;</span><span class="c_default">&#160;</span><span class="c_identifier">i</span><span class="c_operator">++)</span><span class="c_default">&#160;</span><span class="c_operator">{</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">var</span><span class="c_default">&#160;</span><span class="c_identifier">img</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_identifier">imgs</span><span class="c_operator">[</span><span class="c_identifier">i</span><span class="c_operator">];</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">if</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalWidth</span><span class="c_operator">)</span><span class="c_default">&#160;</span><span class="c_operator">{</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">if</span><span class="c_default">&#160;</span><span class="c_operator">((</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalWidth</span><span class="c_default">&#160;</span><span class="c_operator">!=</span><span class="c_default">&#160;</span><span class="c_number">1</span><span class="c_operator">)</span><span class="c_default">&#160;</span><span class="c_operator">&amp;&amp;</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalHeight</span><span class="c_default">&#160;</span><span class="c_operator">!=</span><span class="c_default">&#160;</span><span class="c_number">1</span><span class="c_operator">))</span><span class="c_default">&#160;</span><span class="c_operator">{</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_commentline">//&#160;For&#160;each&#160;image&#160;with&#160;a&#160;natural&#160;width&#160;which&#160;isn't</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_commentline">//&#160;a&#160;1x1&#160;image,&#160;check&#160;its&#160;size.</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">var</span><span class="c_default">&#160;</span><span class="c_identifier">wrongWidth</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">width</span><span class="c_default">&#160;</span><span class="c_operator">!=</span><span class="c_default">&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalWidth</span><span class="c_operator">);</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">var</span><span class="c_default">&#160;</span><span class="c_identifier">wrongHeight</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">height</span><span class="c_default">&#160;</span><span class="c_operator">!=</span><span class="c_default">&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalHeight</span><span class="c_operator">);</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_word">if</span><span class="c_default">&#160;</span><span class="c_operator">(</span><span class="c_identifier">wrongWidth</span><span class="c_default">&#160;</span><span class="c_operator">||</span><span class="c_default">&#160;</span><span class="c_identifier">wrongHeight</span><span class="c_operator">)</span><span class="c_default">&#160;</span><span class="c_operator">{</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">style</span><span class="c_operator">.</span><span class="c_identifier">border</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_string">"3px&#160;red&#160;dotted"</span><span class="c_operator">;</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">style</span><span class="c_operator">.</span><span class="c_identifier">margin</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_string">"-3px"</span><span class="c_operator">;</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">style</span><span class="c_operator">.</span><span class="c_identifier">background</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_string">"yellow"</span><span class="c_operator">;</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">title</span><span class="c_default">&#160;</span><span class="c_operator">=</span><span class="c_default">&#160;</span><span class="c_string">"Forced&#160;to&#160;wrong&#160;size:&#160;"</span><span class="c_default">&#160;</span><span class="c_operator">+</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">width</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_string">"x"</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">height</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_string">",&#160;natural&#160;is&#160;"</span><span class="c_default">&#160;</span><span class="c_operator">+</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalWidth</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_string">"x"</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_identifier">img</span><span class="c_operator">.</span><span class="c_identifier">naturalHeight</span><span class="c_default">&#160;</span><span class="c_operator">+</span><span class="c_default">&#160;</span><span class="c_string">"!"</span><span class="c_operator">;</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_operator">}</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_operator">}</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</span><span class="c_operator">}</span><br/>
<span class="c_default">&#160;&#160;&#160;&#160;</span><span class="c_operator">}</span><br/>
<span class="c_operator">}</span><br/>
</tt></blockquote><p>If you run this function on page load, bad images will pop out with a red and yellow
dotted border.  Alternately, you can run it as a Greasemonkey script:
<a href="http://nedbatchelder.com/code/misc/scaled_images.user.js">scaled_images.user.js</a>.
If you have <a href="https://addons.mozilla.org/en-US/firefox/addon/748">Greasemonkey</a>
installed, clicking the link will install it, then you can use the Show Scaled Images
menu pick to reveal the bad images.</p><p>Chris Pederick's <a class="offsite" href="http://chrispederick.com/work/web-developer/">Web Developer</a>
Firefox extension also provides an option to outline images with adjusted dimensions,
though I find his 1-pixel red border to be too subtle.</p><p>However you find the bad ones, do yourself and your visitors a favor and be sure not
to browser-scale your images.</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/i_love_radioshack.html">
        <title>I love RadioShack</title>
        <link>http://nedbatchelder.com/blog/200805/i_love_radioshack.html</link>
		
        <dc:date>2008-05-27T20:03:47-04:00</dc:date>
        <description><![CDATA[<p>Yesterday, our VCR finally got dirty enough to need a head cleaning, and no
amount of turning the house upside-down revealed our VCR head
cleaner. (Before you chuckle at my maintaining technology as old as a VCR,
I encourage you to compare the robustness and ease-of-use of VHS tapes with DVDs.
My autistic son has no problem starting VHS movies, but is easily lost in the
menus DVDs blithely present upon insertion.  We'll get him used to DVDs
eventually, but for now, we need to clean the VCR.)</p><p>I called a number of stores and examined a number of web sites: 
Blockbuster, Staples, CVS, Best Buy, Walgreens.  None had anything that would help.
Asking at each store, the clerk suggested another option I had already tried,
until someone finally said RadioShack.</p><p>Sure enough, <a class="offsite" href="http://www.radioshack.com">RadioShack</a> stocks VHS head
cleaners, and their web site knew that my local store had one in stock. 30
minutes later, we were cleaning the heads, and now the movies are playing again.</p><p>Last summer, when we <a href="http://nedbatchelder.com/blog/200708/colorado.html">went to Colorado</a>,
we left behind a charger, I think for a cell phone.  We found a RadioShack in
Crested Butte, which had the charger, no problem.
This winter, when we stayed in a nice hotel in Puerto Rico, we witnessed a concierge
rush into the lobby and present a well-dressed guest with a replacement phone charger.
The bag she pulled it from? RadioShack.</p><p>RadioShack is not the coolest store, or the largest, or the cheapest.  But it
is true to its roots — they still have a section devoted to resistors and breadboards,
for example. They do a great job stocking the odds and ends of technology that
no one wants to shop for, but when you need them, you need them. Time and again,
RadioShack is the place I go not because I am psyched to make a purchase, but
because if they don't have it, I am screwed.</p><p>I don't know if that is a good niche to occupy in business.  I know accessories
are very profitable, so maybe it bodes well for RadioShack.  They seem to be healthy,
even having an iPod display in the store.
</p><p>I'll try to think of RadioShack first more often.  More than once they have helped
me to pull my bacon out of the fire.</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/rex_parker_does_the_nyt_crossword_puzzle.html">
        <title>Rex Parker does the NYT crossword puzzle</title>
        <link>http://nedbatchelder.com/blog/200805/rex_parker_does_the_nyt_crossword_puzzle.html</link>
		
        <dc:date>2008-05-26T10:40:54-04:00</dc:date>
        <description><![CDATA[<p>I stumbled across an unlikely blog:
<a class="offsite" href="http://rexwordpuzzle.blogspot.com/2008/05/sunday-may-25-2008-elizabeth-c-gorski.html">Rex Parker
Does the NYT Crossword Puzzle</a>.
The title is not ironic.  It is a daily entry by Rex Parker describing his
completion of the New York Times crossword puzzle.  Rex is a very serious
<a class="offsite" href="http://www.worldwidewords.org/weirdwords/ww-cru1.htm">cruciverbalist</a>,
apparently the 55th best solver in the universe, working
<a class="offsite" href="http://rexwordpuzzle.blogspot.com/2007/11/finally-faq.html">seven to ten daily
puzzles and four Sunday puzzles</a>.    
</p><p>His descriptions of doing the puzzle are long and detailed, but surprisingly
readable and interesting.  He peppers them with illustrations of the answers,
bits of trivia, opinions on the construction of the puzzle, and so on.
And his blogroll points off to other crossword puzzle blogs, a gateway to an
entire subculture of the blogosphere.</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/ratatouille_and_pixar_technology.html">
        <title>Ratatouille and Pixar technology</title>
        <link>http://nedbatchelder.com/blog/200805/ratatouille_and_pixar_technology.html</link>
		
        <dc:date>2008-05-25T07:40:24-04:00</dc:date>
        <description><![CDATA[<p>I finally saw <a class="offsite" href="http://www.pixar.com/featurefilms/rat/">Ratatouille</a>
the other night (having older children means not seeing it in the theaters, and
having doting in-laws means the kids will first see it on a night when I am out).
</p><p>I liked the movie, but not nearly as much as <a class="offsite" href="http://www.pixar.com/featurefilms/nemo/">Finding Nemo</a>
or <a class="offsite" href="http://www.pixar.com/featurefilms/incredibles/">The Incredibles</a>.
I thought the plot was a little hard to relate to, and I didn't like the ending.
It seemed mean (after a great conversion to light, Anton Ego's career is demolished 
and mentioned almost as an afterthought) and inexplicable (Gusteau's closes
because of rats, then they open a new restaurant full of rats anyway).</p><p>As always, the look of the movie is remarkable.  Most Pixar movies have a
signature challenge:
<a class="offsite" href="http://www.pixar.com/featurefilms/inc/">Monster's Inc</a> had fur,
<a class="offsite" href="http://www.pixar.com/featurefilms/nemo/">Finding Nemo</a> had water,
<a class="offsite" href="http://www.pixar.com/featurefilms/incredibles/">The Incredibles</a> had clothing and hair.
Ratatouille has food.  In each case, the goal is to model a familiar component
of the real world well enough that it can add to the story telling rather than
detract from it. Meeting those challenges is a huge technical achievement, and
going behind the scenes to see the effort is eye-opening.
</p><p>Pixar maintains an <a class="offsite" href="http://graphics.pixar.com/">online library of
technical papers</a> explaining some of their technology.  Some are single pages,
others are 100-page course notes.  Browsing through them, you get a sense of the
obsessive details that have to be dealt with.  As an unexpected example, the
kitchen scenes in Ratatouille are filled with cooks chopping food.  One approach
would be to assign some junior animators to animate the process of slices
peeling off a zucchini. Another is to
<a class="offsite" href="http://graphics.pixar.com/ChopItUp/paper.pdf">procedurally model
a cutting object</a> which can deform and remodel another object. Pixar chose
this last approach both for its greater fidelity, and also to free the animator
to focus on the storytelling.
</p><p>The papers in the library offer glimpses of the amount of work required to
make a movie like this.  Traditional animation required legions of artists to
draw everything.  CGI animation also requires enormous effort, but finely sliced
into different disciplines: animators to imbue objects with life, modelers to
create those objects in ways that simplify the animators' jobs, and technical staff
to create the universe in which the movie takes place.
</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/cog_21_and_newline_detection.html">
        <title>Cog 2.1 and newline detection</title>
        <link>http://nedbatchelder.com/blog/200805/cog_21_and_newline_detection.html</link>
		
        <dc:date>2008-05-24T10:06:56-04:00</dc:date>
        <description><![CDATA[<p>Since working full-time in Python, I haven't needed to use my code generator
<a href="http://nedbatchelder.com/code/cog">Cog</a> much, but Alexander Belchenko has.  He's prodded me
to add one more feature to it, and graciously and pro-actively kept the
<a href="http://nedbatchelder.com/code/cog/index_ru.html">Russian docs</a> up to date.
</p><p>The new feature is a way to get Unix line endings in the output file, even when
running on Windows.  When Alexander first brought this up, my inclination was
to change the code so that the line ending style of the input file would determine
the style of the output file.  This has a certain elegance and symmetry.
It would mean that a Windows file with \r\n endings could be cog'ged on Unix,
and the output file would have \r\n endings.</p><p>In Python, if you open a file in 'rU' mode, it is treated as a text file,
and all data is presented with \n line ending, but the file object has a newlines
property which is a string or tuple of all the line ending styles seen in the file.
This seemed perfect for my needs.  As the output file was being written, it could
examine the newlines property of the input file to determine what style endings
to write.  I was willing to ignore the engineer's obsessive corner case of a
file with mixed line endings, and simply say that if a \r\n had been encountered in
the input, the lines would be written with \r\n, otherwise, they would get \n.</p><p>Alas, this didn't quite work out.  Turns out that after reading one line from
a Windows file, newlines has no information in it:</p><blockquote class="code"><tt>&gt;&gt;&gt; f = open('sample.txt', 'rU')     # open the file...<br>&gt;&gt;&gt; f.newlines                       #  ..nothing in newlines yet<br>&gt;&gt;&gt; f.readline()                     # read the first line...<br>'This is the first line\n'<br>&gt;&gt;&gt; f.newlines                       #  ..still nothing in newlines!<br>&gt;&gt;&gt; f.readline()                     # read the second line...<br>'This is the second line\n'          <br>&gt;&gt;&gt; f.newlines                       #  ..*now* something in newlines :(<br>'\r\n'<br></tt></blockquote><p>As a result, my code worked great, except that the first line of output
always ended with a \n, while the rest of the file followed the lead of the
input file.</p><p>Fixing that would have meant re-working a lot of code to buffer everything.
It would have been possible, but to gain what?  The code as it stands handles
the case I really care about: preserving Unix line endings when processing files
on Windows.  To make that happen, I only had to open the output file in binary
mode, since all the internal text handling uses \n endings.
Handling the opposite case, preserving Windows endings on Unix,
simply wasn't important enough to warrant the effort.</p><p>In any case, thanks Alexander for moving Cog forward!</p>
]]></description>
    </item>
    
    <item rdf:about="http://nedbatchelder.com/blog/200805/bad_web_type_georgias_numerals.html">
        <title>Bad web type: georgia&#39;s numerals</title>
        <link>http://nedbatchelder.com/blog/200805/bad_web_type_georgias_numerals.html</link>
		
        <dc:date>2008-05-22T07:13:50-04:00</dc:date>
        <description><![CDATA[<p>Typography is an ancient and fascinating subject, with many facets: artistic,
historic, and technological.  At the intersection of these is how technology
has shaped the art over time. The design of typefaces has always been shaped
both by what the technology was capable of, and what the technology required.
</p><p>As new typographic technology is introduced, there's a general trend:</p><ul>
<li>imitate the old technology,</li>
<li>discover the possibilities of the new technology,</li>
<li>develop a new set of norms,</li>
<li>restore some parts of the old technology in the new.</li>
</ul><p>When Gutenberg first carved type into steel punches to make movable type, he
made a number of different versions of each letter to reproduce the variation
found in manuscripts. Eventually uniformity became the norm, with sophisticated
variant forms later re-introduced as an advanced option.</p><p>The web is no different: type on the web is limited by HTML, by ASCII, and by
browser support. For example, straight apostrophes and quotes are a compromise
required by the limitations of typewriter and computer keyboards.
<a class="offsite" href="http://en.wikipedia.org/wiki/Quotation_mark_glyphs">Curly quotes</a>
are the return of previous quality, but require a little more work.
</p><p>Sometimes, though, the old high-quality touches are still inappropriate.
I realized one of these in the
<a href="http://nedbatchelder.com//blog/200805/how_to_apply_patches.html#comments">comments to yesterday's post about patch</a>.
Simon Brunning helpfully provided this snippet:
</p><blockquote class="code"><tt>patch -p0 -i my.patch      # ABC0123456789XYZ</tt></blockquote><p>except that instead of the monospace code font I just used, it was in Georgia:</p><blockquote><div><p style="font-family:georgia">patch -p0 -i my.patch     # abc0123456789xyz</p></div></blockquote><p>See the problem?  Georgia's numerals (or figures) are one of those advanced touches, known
as old-style or lowercase figures.  In the full range of type possibilities, there
are a number of ways of designing figures.  Old-style are like lowercase
letters: they have a variety of heights, some with ascenders and some with descenders,
as the Georgia sample shows.  The alternative is called lining, or uppercase
figures, which all extend from the baseline to the cap-height, just as uppercase
letters do. The monospace font has these, as do most typefaces.</p><p>BTW: There's another way figures can vary: tabular or proportional, which
doesn't affect this discussion, but for the full details, have a look at the FontFeed's
<a class="offsite" href="http://www.fontshop.com/fontfeed/archives/figuring-it-out-osf-lf-and-tf-explained/">OSF, LF, and TF Explained</a>.
</p><p>The problem here is that Georgia's old-style figures make it impossible to
distinguish a zero and a lowercase o.  Of course, with lining figures, it would
be difficult to distinguish a zero and an uppercase O, and don't get me started
on the whole l/1/I (ell/one/Eye) thing.  Maybe the problem here is setting code
samples in a proportional face in the first place.
</p><p>Typographers would tell you that typefaces have to be chosen carefully for their
intended use.  The FontFeed article above makes clear that the choice of old-style
or lining figures depends on what numbers you are setting: in running text, best
to use old-style, in tables use lining.  No mention of Unix commands!</p><p>So what's a web designer to do?  In this case, it is especially complicated,
because comments can contain any kind of content at all, with minimal markup limited
by the tools, and provided by the commenter.  Even if my comment form provided
a &lt;code&gt; tag, readers would have to know to use it, and remember to use it each
time they provided a code sample.</p><p>No typeface is going to be right for all uses, and the choices are limited
by having to consider cross-platform browser issues.  Georgia is at least one
of the <a class="offsite" href="http://www.fonttester.com/help/list_of_web_safe_fonts.html">web-safe fonts</a>,
so I can be reasonably certain I know what my readers are seeing.</p><p>Georgia's old-style figures are a nice touch, a whiff of the high-craft past
in our sterile modern times.  The title of this post is a bit harsh: they aren't
bad. But using them indiscriminately in web content isn't always a good thing.
The best answer may be yet more technology, finding ways to guide the use of the
old tools appropriately for new contexts.
</p>
]]></description>
    </item>
    
</rdf:RDF>
