<?xml version="1.0" encoding="UTF-8"?>
<!-- generator="wordpress/1.5.1.3" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
>

<channel>
	<title>Allegra</title>
	<link>http://laurentszyster.be/blog</link>
	<description>Python on Peers</description>
	<pubDate>Fri, 28 Dec 2007 05:07:55 +0000</pubDate>
	<generator>http://wordpress.org/?v=1.5.1.3</generator>
	<language>en</language>

		<item>
		<title>Introducing Asyncorg</title>
		<link>http://laurentszyster.be/blog/introducing-asyncorg/</link>
		<comments>http://laurentszyster.be/blog/introducing-asyncorg/#comments</comments>
		<pubDate>Fri, 28 Dec 2007 05:05:24 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Socket Programming</category>
	<category>Java</category>
		<guid>http://laurentszyster.be/blog/introducing-asyncorg/</guid>
		<description><![CDATA[<p><a href="http://code.google.com/p/asyncorg/">Asyncorg</a> is an enhanced port to Java of Python's asyncore and asynchat standard modules.</p>]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/introducing-asyncorg/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>About JRuby and CPython performances</title>
		<link>http://laurentszyster.be/blog/jruby-vs-cpython-performances/</link>
		<comments>http://laurentszyster.be/blog/jruby-vs-cpython-performances/#comments</comments>
		<pubDate>Fri, 21 Sep 2007 16:03:37 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Uncategorized</category>
	<category>Python</category>
	<category>JRuby</category>
		<guid>http://laurentszyster.be/blog/jruby-vs-cpython-performances/</guid>
		<description><![CDATA[<img src="http://shootout.alioth.debian.org/gp4sandbox/chartvs.php?test=all&#038;lang=python&#038;lang2=jruby"/>]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/jruby-vs-cpython-performances/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>anoption.py</title>
		<link>http://laurentszyster.be/blog/anoption/</link>
		<comments>http://laurentszyster.be/blog/anoption/#comments</comments>
		<pubDate>Sat, 16 Jun 2007 16:28:55 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Allegra</category>
	<category>Documentation</category>
	<category>Python</category>
		<guid>http://laurentszyster.be/blog/anoption/</guid>
		<description><![CDATA[I allways had the impression that <code>getopt</code> and <code>optparse</code> were somehow walking on their heads. Why use a text-only CLI model to deliver the conveniences supposed to make command line interfaces simpler to develop? 

Why not use the introspection capabilities of Python instead?]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/anoption/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>A Society of Frosty Friends</title>
		<link>http://laurentszyster.be/blog/a-society-of-frosty-friends/</link>
		<comments>http://laurentszyster.be/blog/a-society-of-frosty-friends/#comments</comments>
		<pubDate>Fri, 08 Jun 2007 16:27:17 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Python</category>
		<guid>http://laurentszyster.be/blog/a-society-of-frosty-friends/</guid>
		<description><![CDATA[In order to explain the marginal success of Python and the fast gains of Ruby lately, pythoneers have been characterized as too "frosty". As a matter of fact, if frost can keep such fun-loving people as Sun marketeers at bay, then I'm rather content to see the fate of CPython in the hands of a society of frosty friends.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/a-society-of-frosty-friends/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>Flat Is Better Than Nested</title>
		<link>http://laurentszyster.be/blog/flat-is-better-than-nested/</link>
		<comments>http://laurentszyster.be/blog/flat-is-better-than-nested/#comments</comments>
		<pubDate>Mon, 02 Apr 2007 20:09:41 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Python</category>
		<guid>http://laurentszyster.be/blog/flat-is-better-than-nested/</guid>
		<description><![CDATA[I wrote this a while ago, found it silly then but never trashed it. Because I still use 8 wide character identation for Allegra's library and 4 for its applications. 

In sources, for me, flat happens to be literally better than nested.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/flat-is-better-than-nested/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>Introducing Regular JSON Expressions</title>
		<link>http://laurentszyster.be/blog/introducing-regular-json-expressions/</link>
		<comments>http://laurentszyster.be/blog/introducing-regular-json-expressions/#comments</comments>
		<pubDate>Thu, 29 Mar 2007 21:01:58 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Protocols</category>
		<guid>http://laurentszyster.be/blog/introducing-regular-json-expressions/</guid>
		<description><![CDATA[JSONR is a simple protocol to specify practical patterns for network object models: null, true or false, integer, double and decimal, irregular and regular strings, numeric ranges around and from zero, collections, relations, dictionnaries and namespaces.

The original purpose of JSONR is to express as much as possible of a web application screens and controllers as regular patterns interpreted by one or more generic implementation of an application aspect instead of ad-hoc programs.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/introducing-regular-json-expressions/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>The Model Is JSON</title>
		<link>http://laurentszyster.be/blog/json-is-the-model/</link>
		<comments>http://laurentszyster.be/blog/json-is-the-model/#comments</comments>
		<pubDate>Tue, 06 Mar 2007 21:10:12 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Allegra</category>
	<category>Python</category>
	<category>Java</category>
	<category>Protocols</category>
		<guid>http://laurentszyster.be/blog/json-is-the-model/</guid>
		<description><![CDATA[Forget about XML/RPC, SOAP, RMI or CORBA. In two years JSON has become the defacto protocol for object serialization on the web. Simply because no other protocol is even remotely as convenient for network application programming interfaces.

My choice of XML for Allegra log message and PRESTo responses was wrong. And, once again, Guido Van Rossum was right: XML is not the best serialization protocol for web frameworks.

I'm only Belgian after all ...]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/json-is-the-model/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>The Next Big Protocol</title>
		<link>http://laurentszyster.be/blog/the-next-big-protocol/</link>
		<comments>http://laurentszyster.be/blog/the-next-big-protocol/#comments</comments>
		<pubDate>Fri, 02 Mar 2007 03:10:41 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Uncategorized</category>
	<category>Protocols</category>
		<guid>http://laurentszyster.be/blog/the-next-big-protocol/</guid>
		<description><![CDATA[The Next Big Language is not Ruby, Groovy or Schmalscheme. 

If the network is the computer then protocols are the programming interfaces for network applications. Network API are not defined by interpreters, compilers, libraries or operating systems. They are defined by defacto public standards established by peers on the Internet.

Your next programming language is made of more simple network protocols.

Like JSON for instance.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/the-next-big-protocol/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>Somehow</title>
		<link>http://laurentszyster.be/blog/somehow/</link>
		<comments>http://laurentszyster.be/blog/somehow/#comments</comments>
		<pubDate>Thu, 14 Dec 2006 20:26:05 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>About me ...</category>
		<guid>http://laurentszyster.be/blog/somehow/</guid>
		<description><![CDATA[Spelled in Polish, Szyster means shoemaker in Yddish. It was copied from my grand father's passport by the Belgian administration and passed onto me by my father. 

Once upon a time, every shtetl of Poland had its shoemaker and my name was as common as Smith's.  Yet, there are not many of us Szyster left in this world. Somehow, it became so uncommon that the best search engine on earth thinks it is misspelled. Somehow, it is so rare  in cyberspace that Google seems to have links for that name to no other people alive than my father, my brother and I.

Somehow, the Yddishland has gone missing from Europe with allmost all its shoemakers.

Screw you Ahmedinejad.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/somehow/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>General Contention Fault</title>
		<link>http://laurentszyster.be/blog/general-contention-fault/</link>
		<comments>http://laurentszyster.be/blog/general-contention-fault/#comments</comments>
		<pubDate>Mon, 20 Nov 2006 21:36:39 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Uncategorized</category>
	<category>Java</category>
		<guid>http://laurentszyster.be/blog/general-contention-fault/</guid>
		<description><![CDATA[J2EE has a state equivalent to the infamous Windows "blue screen of death", when the JVM waste most of the CPU time managing contention for shared resources between concurrent threads, eventually running the application server out of memory as requests keep coming in. 

If you liked my previous thriller on Win32 TCP stack, here is another opiniated story about programming and how ironic the history of software can be.

In the end, many people who picked Java to counter Windows in the year 2000 are still running their desktops with a (less) crashing asynchronous operating system <em>and</em> have developed network applications for <em>not</em> highly available application servers. It's a reality developers must live with.

Sobre J2EE developers bend it like PHP.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/general-contention-fault/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>Less Java for More Applications</title>
		<link>http://laurentszyster.be/blog/less-java-for-more-applications/</link>
		<comments>http://laurentszyster.be/blog/less-java-for-more-applications/#comments</comments>
		<pubDate>Thu, 09 Nov 2006 11:29:39 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>About me ...</category>
	<category>Java</category>
		<guid>http://laurentszyster.be/blog/less-java-for-more-applications/</guid>
		<description><![CDATA[A while ago, I needed a convenient API to write distributed J2EE servlets that authorize, control and audit access to an SQL database or an LDAP server from a JavaScript client. 

To make those servlets as fast as possible, this API must leverage the stable stack of web standards between a J2EE container and a modern web browser: HTTP, URL, HTML, XML, JSON, CSS, JavaScript. Not work against it or obscure it.

I won’t wait for RubyOnJ2EE, I’m tired of HttpServletSession woes, I can’t take another HellWorld tutorial in 26 steps, I want JSON validation now and performances do matter.

So, I decided to write less4j and blog about it.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/less-java-for-more-applications/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>About JRuby and CPython</title>
		<link>http://laurentszyster.be/blog/jruby-vs-cpython/</link>
		<comments>http://laurentszyster.be/blog/jruby-vs-cpython/#comments</comments>
		<pubDate>Tue, 07 Nov 2006 14:52:05 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Uncategorized</category>
	<category>Python</category>
	<category>JRuby</category>
	<category>Java</category>
		<guid>http://laurentszyster.be/blog/jruby-vs-cpython/</guid>
		<description><![CDATA[Putting their respective grammar dependency graphs in one picture, the combination of Java and Ruby seems like a very odd idea everywhere you can apply C and Python instead. Because that difference between sophistication and simplicity does make a difference in the performance, reliability and scalability of their applications as well as the productivity of their developers.

But if that's even obvious to Belgians, then why did a whole industry pick Java and why is Sun promoting JRuby against all odds? You cannot fool all people all the time, can you?

Well, as long as there is a sucker born every next minute ...]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/jruby-vs-cpython/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>About the Proactor Pattern</title>
		<link>http://laurentszyster.be/blog/about-the-proactor-pattern/</link>
		<comments>http://laurentszyster.be/blog/about-the-proactor-pattern/#comments</comments>
		<pubDate>Mon, 30 Oct 2006 15:00:32 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Allegra</category>
	<category>Python</category>
	<category>Socket Programming</category>
		<guid>http://laurentszyster.be/blog/about-the-proactor-pattern/</guid>
		<description><![CDATA[Yi Huang, one of the few peer reviewer Allegra has for now, asked me about the proactor pattern. Can aio/proactor pattern improve the performance remarkably in contrast with select/poll ? Why not use it ? Can the async_loop be translated to use aio/proactor pattern transparent ? FYI, here's my answers. It's great beeing a guru in China ;-)]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/about-the-proactor-pattern/feed/</wfw:commentRSS>
	</item>
		<item>
		<title>New and Noteworthy</title>
		<link>http://laurentszyster.be/blog/version-063/</link>
		<comments>http://laurentszyster.be/blog/version-063/#comments</comments>
		<pubDate>Thu, 07 Sep 2006 16:43:11 +0000</pubDate>
		<dc:creator>Laurent Szyster</dc:creator>
		
	<category>Allegra</category>
	<category>Python</category>
		<guid>http://laurentszyster.be/blog/version-063/</guid>
		<description><![CDATA[Here is what's new in Allegra 0.63: a few IP and UDP conveniences; asynchronous DNS resolution; the reintroduction of a Dispatcher_with_send and the addition of a Dispatcher_with_fifo to develop simple stream dispatchers; simplification of loginfo's implementation and interfaces; a convenience to reconnect client dispatchers; and servers with more info and less debug entries.

Then, specially for Andrew Dalke (and other people who don't want to retrain their eyes to scan compact tracebacks) I went out of my way to add the option of classic tracebacks.

Only to find myself back on the right way.]]></description>
		<wfw:commentRSS>http://laurentszyster.be/blog/version-063/feed/</wfw:commentRSS>
	</item>
	</channel>
</rss>
