<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	>

<channel>
	<title>Labix Blog &#187; Python</title>
	<atom:link href="http://blog.labix.org/tag/python/feed" rel="self" type="application/rss+xml" />
	<link>http://blog.labix.org</link>
	<description>by Gustavo Niemeyer</description>
	<pubDate>Mon, 02 Jun 2008 01:04:16 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.5.1</generator>
	<language>en</language>
			<item>
		<title>Google using Geohash</title>
		<link>http://blog.labix.org/2008/05/20/google-using-geohash</link>
		<comments>http://blog.labix.org/2008/05/20/google-using-geohash#comments</comments>
		<pubDate>Wed, 21 May 2008 01:54:15 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2008/05/20/google-using-geohash/</guid>
		<description><![CDATA[According to Dave Troy, Google seems to be using the Geohash algorithm:

Google is employing the GeoHash algorithm I’ve been pushing to do spatial searching using BigTable.  Since database schemes like BigTable don’t support traditional GIS extensions/spatial indexes, GeoHash allows for a simple bounding box search using truncated GeoHash substrings.  I will post separately [...]]]></description>
			<content:encoded><![CDATA[<p>According to Dave Troy, <a href="http://www.openlocation.org/?p=9" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://www.openlocation.org/?p=9');">Google seems to be using</a> the <a href="http://en.wikipedia.org/Geohash" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://en.wikipedia.org/Geohash');">Geohash algorithm</a>:</p>
<blockquote><p>
Google is employing the GeoHash algorithm I’ve been pushing to do spatial searching using BigTable.  Since database schemes like BigTable don’t support traditional GIS extensions/spatial indexes, GeoHash allows for a simple bounding box search using truncated GeoHash substrings.  I will post separately about this shortly, as I am working on some GeoHash tools to expand this functionality.  This is of particular interest to AppEngine developers.
</p></blockquote>
<p>Nice!</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2008/05/20/google-using-geohash/feed</wfw:commentRss>
		</item>
		<item>
		<title>dateutil 1.4 is out</title>
		<link>http://blog.labix.org/2008/03/03/dateutil-14-is-out</link>
		<comments>http://blog.labix.org/2008/03/03/dateutil-14-is-out#comments</comments>
		<pubDate>Mon, 03 Mar 2008 03:49:08 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2008/03/03/dateutil-14-is-out/</guid>
		<description><![CDATA[Friday I&#8217;ve released version 1.4 of dateutil.  There are some interesting fixes there, so please upgrade if you have the chance.
]]></description>
			<content:encoded><![CDATA[<p>Friday I&#8217;ve <a href="http://mail.python.org/pipermail/python-announce-list/2008-February/006455.html" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://mail.python.org/pipermail/python-announce-list/2008-February/006455.html');">released</a> version 1.4 of <a href="http://labix.org/python-dateutil" >dateutil</a>.  There are some interesting fixes there, so please upgrade if you have the chance.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2008/03/03/dateutil-14-is-out/feed</wfw:commentRss>
		</item>
		<item>
		<title>Enhancements on geohash.org</title>
		<link>http://blog.labix.org/2008/03/01/enhancements-on-geohashorg</link>
		<comments>http://blog.labix.org/2008/03/01/enhancements-on-geohashorg#comments</comments>
		<pubDate>Sat, 01 Mar 2008 21:27:21 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[GPS]]></category>

		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2008/03/01/enhancements-on-geohashorg/</guid>
		<description><![CDATA[Some improvements to geohash.org were made.  Some of them were
motivated by a conversation with Rodrigo Stulzer.

Support for geocoding addresses (city names, whatever).  E.g. http://geohash.org/?q=21&#160;Millbank,&#160;London
Support for moving the Geohash marker in the embedded map, so that modifying the position visually is easier.
Support for providing a &#8220;name&#8221; to Geohashes, by appending a colon and the [...]]]></description>
			<content:encoded><![CDATA[<p>Some improvements to <a href="geohash.org">geohash.org</a> were made.  Some of them were<br />
motivated by a conversation with <a href="http://stulzer.net" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://stulzer.net');">Rodrigo Stulzer</a>.</p>
<ul>
<li>Support for geocoding addresses (city names, whatever).  E.g. <a href="http://geohash.org/?q=21%20Millbank,%20London" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org/?q=21%20Millbank,%20London');">http://geohash.org/?q=21&nbsp;Millbank,&nbsp;London</a></li>
<li>Support for moving the Geohash marker in the embedded map, so that modifying the position visually is easier.</li>
<li>Support for providing a &#8220;name&#8221; to Geohashes, by appending a colon and the name, in a nice format. E.g. <a href="http://geohash.org/c216ne:Mt_Hood" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org/c216ne:Mt_Hood');">http://geohash.org/c216ne:Mt_Hood</a></li>
<li>Provided a <a href="http://geohash.org/site/tips.html#gmaps" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org/site/tips.html#gmaps');">bookmark</a> to get a Geohash while <b>in</b> Google Maps.</li>
<li>Provided a <a href="http://geohash.org/site/tips.html#gmaps" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org/site/tips.html#gmaps');">Google Maps Mapplet</a>.  When enabled, it adds a Geohash marker identifying the Geohash position in Google Maps, and it may be moved around.  Here is a screenshot:</li>
</ul>
<div style="text-align: center;"><img style="border: 1px solid #9999ff" src="http://geohash.org/static/mapplet.png" /></div>
<p>Check out the <a href="http://geohash.org/site/tips.html" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org/site/tips.html');">Tips &amp; Tricks</a> page for details on these features.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2008/03/01/enhancements-on-geohashorg/feed</wfw:commentRss>
		</item>
		<item>
		<title>geohash.org is public!</title>
		<link>http://blog.labix.org/2008/02/26/geohashorg-is-public</link>
		<comments>http://blog.labix.org/2008/02/26/geohashorg-is-public#comments</comments>
		<pubDate>Wed, 27 Feb 2008 00:11:38 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Article]]></category>

		<category><![CDATA[GPS]]></category>

		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2008/02/26/geohashorg-is-public/</guid>
		<description><![CDATA[After about one year writing this service in my spare time, it&#8217;s finally out.
geohash.org offers short URLs which encode a latitude/longitude pair, so that referencing them in emails, forums, and websites is more convenient.
Geohashes offer properties like arbitrary precision, similar prefixes for nearby positions, and the possibility of gradually removing characters from the end of [...]]]></description>
			<content:encoded><![CDATA[<p>After about one year writing this service in my spare time, it&#8217;s finally out.</p>
<p><a href="http://geohash.org" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://geohash.org');">geohash.org</a> offers short URLs which encode a latitude/longitude pair, so that referencing them in emails, forums, and websites is more convenient.</p>
<p>Geohashes offer properties like arbitrary precision, similar prefixes for nearby positions, and the possibility of gradually removing characters from the end of the code to reduce its size (and gradually lose precision).  I&#8217;ve put the algorithm created in the <b>public domain</b>.  Some details may be seen in the <a href="http://en.wikipedia.org/wiki/Geohash" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://en.wikipedia.org/wiki/Geohash');">Wikipedia article</a> about it (hopefully that&#8217;ll help establishing prior art, and prevent Microsoft from <a href="http://www.freepatentsonline.com/20050023524.html" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://www.freepatentsonline.com/20050023524.html');">patenting it</a>).</p>
<p>To obtain the Geohash, the user provides latitude and longitude coordinates in a single input box (most commonly used formats for latitude and longitude pairs are accepted), and performs the request.</p>
<p>Besides showing the latitude and longitude corresponding to the given Geohash, users who navigate to a Geohash at geohash.org are also presented with an embedded map, and may download a GPX file, or transfer the waypoint directly to certain GPS receivers. Links are also provided to external sites that may provide further details around the specified location.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2008/02/26/geohashorg-is-public/feed</wfw:commentRss>
		</item>
		<item>
		<title>Mocker 0.10 and trivial patch-mocking of existing objects</title>
		<link>http://blog.labix.org/2007/12/09/mocker-010-and-trivial-patch-mocking-of-existing-objects</link>
		<comments>http://blog.labix.org/2007/12/09/mocker-010-and-trivial-patch-mocking-of-existing-objects#comments</comments>
		<pubDate>Sun, 09 Dec 2007 23:07:13 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Snippet]]></category>

		<category><![CDATA[Test]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/12/09/mocker-010-and-trivial-patch-mocking-of-existing-objects/</guid>
		<description><![CDATA[Mocker 0.10 is out, with a number of improvements!
While we&#8217;re talking about Mocker, here is another interesting use case, exploring a pretty unique feature it offers.
Suppose we want to test that a method hello() on an object will call self.show(&#8221;Hello world!&#8221;) at some point.  Let&#8217;s say that the code we want to test is [...]]]></description>
			<content:encoded><![CDATA[<p><a href="http://labix.org/mocker" >Mocker</a> 0.10 is out, with a <a href="https://launchpad.net/mocker/trunk/0.10" onclick="javascript:pageTracker._trackPageview('/outbound/article/https://launchpad.net/mocker/trunk/0.10');">number of improvements</a>!</p>
<p>While we&#8217;re talking about Mocker, here is another interesting use case, exploring a pretty unique feature it offers.</p>
<p>Suppose we want to test that a method <i>hello()</i> on an object will call <i>self.show(&#8221;Hello world!&#8221;)</i> at some point.  Let&#8217;s say that the code we want to test is this:</p>
<pre>
 class Greeting(object):

     def show(self, sentence):
         print sentence

     def hello(self):
         self.show("Hello world!")
</pre>
<p>This is the <i>entire</i> test method:</p>
<pre>
def test_hello(self):
    # Define expectation.
    mock = self.mocker.patch(Greeting)
    mock.show("Hello world!")
    self.mocker.replay()

    # Rock on!
    Greeting().hello()
</pre>
<p>This has helped me in practice a few times already, when testing some involved situations.</p>
<p>Note that you can also <i>passthrough</i> the call.  In other words, the call may actually be made on the real method, and mocker will just assert that the call was really made, whatever the effect is.</p>
<p>One more important point: mocker ensures that the real method <i>exists</i> in the real object, and has a specification compatible with the call made.  If it doesn&#8217;t, and assertion error is raised in the test with a nice error message.</p>
<p><b>UPDATE:</b> <i>The method for doing this is actually mocker.patch() rather than mocker.mock(), as documented. Apologies.</i></p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/12/09/mocker-010-and-trivial-patch-mocking-of-existing-objects/feed</wfw:commentRss>
		</item>
		<item>
		<title>Partial stubbing of os.path.isfile() with Mocker</title>
		<link>http://blog.labix.org/2007/11/22/partial-stubbing-of-ospathisfile-with-mocker</link>
		<comments>http://blog.labix.org/2007/11/22/partial-stubbing-of-ospathisfile-with-mocker#comments</comments>
		<pubDate>Thu, 22 Nov 2007 23:27:14 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Snippet]]></category>

		<category><![CDATA[Test]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/11/22/partial-stubbing-of-ospathisfile-with-mocker/</guid>
		<description><![CDATA[One neat feature which Mocker offers is the ability to very easily implement custom behavior on specific functions or methods.
Take for instance the case where you want to pretend to some code that a given file exists, but you don&#8217;t want to get on the way of everything else which needs the same function: 

>>> [...]]]></description>
			<content:encoded><![CDATA[<p>One neat feature which Mocker offers is the ability to very easily implement custom behavior on specific functions or methods.</p>
<p>Take for instance the case where you want to pretend to some code that a given file exists, but you don&#8217;t want to get on the way of everything else which needs the same function: </p>
<pre>
>>> from mocker import *
>>> mocker = Mocker()
>>> isfile = mocker.replace("os.path.isfile", count=False)
>>> _ = expect(isfile("/non/existent")).result(True)
>>> _ = expect(isfile(ANY)).passthrough()

>>> mocker.replay()

>>> import os
>>> os.path.isfile("/non/existent")
True
>>> os.path.isfile("/etc/passwd")
True
>>> os.path.isfile("/other")
False

>>> mocker.restore()

>>> os.path.isfile("/non/existent")
False
</pre>
<p>Notice that the <i>count=False</i> parameter is available in version 0.9.2.  Without it Mocker will act in a more <i>mocking-strict</i> way and enforce that the given expressions should be executed precisely the given number of times (which defaults to one, and may be modified with the <i>count()</i> method). </p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/11/22/partial-stubbing-of-ospathisfile-with-mocker/feed</wfw:commentRss>
		</item>
		<item>
		<title>More releases: dateutil 1.3 and nicefloat 1.1</title>
		<link>http://blog.labix.org/2007/11/19/more-releases-dateutil-13-and-nicefloat-11</link>
		<comments>http://blog.labix.org/2007/11/19/more-releases-dateutil-13-and-nicefloat-11#comments</comments>
		<pubDate>Mon, 19 Nov 2007 22:24:33 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/11/19/more-releases-dateutil-13-and-nicefloat-11/</guid>
		<description><![CDATA[A couple of additional releases tonight: dateutil 1.3, and nicefloat 1.1.
They&#8217;re both bug fixing releases.
]]></description>
			<content:encoded><![CDATA[<p>A couple of additional releases tonight: <a href="http://labix.org/python-dateutil" >dateutil 1.3</a>, and <a href="http://labix.org/python-nicefloat" >nicefloat 1.1</a>.</p>
<p>They&#8217;re both bug fixing releases.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/11/19/more-releases-dateutil-13-and-nicefloat-11/feed</wfw:commentRss>
		</item>
		<item>
		<title>Mocker 0.9</title>
		<link>http://blog.labix.org/2007/11/17/mocker-09</link>
		<comments>http://blog.labix.org/2007/11/17/mocker-09#comments</comments>
		<pubDate>Sat, 17 Nov 2007 21:01:49 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/11/17/mocker-09/</guid>
		<description><![CDATA[A few more improvements were made to Mocker.
]]></description>
			<content:encoded><![CDATA[<p>A few more <a href="http://codebrowse.launchpad.net/~niemeyer/mocker/trunk/annotate/?file_id=news-20071112015353-3p0wa0n8cx1s5crs-1" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://codebrowse.launchpad.net/~niemeyer/mocker/trunk/annotate/?file_id=news-20071112015353-3p0wa0n8cx1s5crs-1');">improvements</a> were made to <a href="http://labix.org/mocker" >Mocker</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/11/17/mocker-09/feed</wfw:commentRss>
		</item>
		<item>
		<title>Storm has always reused connections (connection pooling?)</title>
		<link>http://blog.labix.org/2007/11/17/storm-has-always-reused-connections-connection-pooling</link>
		<comments>http://blog.labix.org/2007/11/17/storm-has-always-reused-connections-connection-pooling#comments</comments>
		<pubDate>Sat, 17 Nov 2007 19:57:09 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/11/17/storm-has-always-reused-connections-connection-pooling/</guid>
		<description><![CDATA[I&#8217;ve recently seen some comments here and there about the lack of connection pooling as an argument for Storm to be faster, and that once this is supported it will be slower, or even as a reason for people not to use Storm at all.
So, let me kill this argument here, at once.
We have not [...]]]></description>
			<content:encoded><![CDATA[<p>I&#8217;ve recently seen some comments here and there about the <i>lack</i> of connection pooling as an argument for Storm to be faster, and that once this is supported it will be slower, or even as a reason for people not to use Storm at all.</p>
<p>So, let me kill this argument here, at once.</p>
<p>We have <b>not</b> developed Storm only for toy projects that take 10 connections a day.  We have developed Storm for heavy duty web sites like <a href="http://www.canonical.com/projects/landscape" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://www.canonical.com/projects/landscape');">Landscape</a> and <a href="https://launchpad.net" onclick="javascript:pageTracker._trackPageview('/outbound/article/https://launchpad.net');">Launchpad</a>, and we&#8217;re proud to see it being used not only in our systems, but also out there in the wild, like for instance in large scale sites developed by the fantastic guys at <a href="http://www.lovelysystems.com" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://www.lovelysystems.com');">Lovely Systems</a>.</p>
<p>So how does the <i>connection reuse</i> work in practice, you ask.  Here is how:</p>
<p>In Storm, the database is abstracted behind a small, simple, and flexible API, offered in the <i>Store</i> class.  You use an instance of this class to deal with objects coming from a given database, and this instance will handle several aspects of your interaction with the database, such as committing, rolling back, caching, ensuring that a given row in the database maps to a single instance in memory, control of dirty objects, flushing, and so on.  Pretty much all of these aspects require a correct transactional behavior to work well, and in practice this means we&#8217;ve decided that to maintain the API nice and clean, each Store is internally associated with a single <i>Connection</i> object. You can have as many stores as you want, connecting to the same database or to different ones, and using the same model class or entirely different code bases.</p>
<p>So, to summarize the above paragraph, a simple <i>Store</i> instance is your portal to the database.  You need one of these instances around to add objects to the database (Storm won&#8217;t <i>guess</i> which Store you want to add things to), and to retrieve objects from it.</p>
<p>Considering that, if you want to reuse a connection, it&#8217;s very simple: keep your Store instance around.  That&#8217;s even a strange advice, since you&#8217;re <i>already</i> doing that if you&#8217;re using Storm in the first place.  The code in <i>trunk</i>, which is about to be released as version 0.12, even handles reconnections for you gracefully, including correct transactional behavior.</p>
<p>We even offer a tool that deals with more advanced Store management in a very comfortable way for Zope 3.  In the future, we&#8217;re likely to offer the same kind of facility in a more generic API.</p>
<p>So, connection <i>reuse</i> is there, and we have <i>always</i> benefited from it.  Connection <i>pooling</i>?  No, thanks.  We&#8217;re doing very well without the complexity and overhead.</p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/11/17/storm-has-always-reused-connections-connection-pooling/feed</wfw:commentRss>
		</item>
		<item>
		<title>Mocker for Python released!</title>
		<link>http://blog.labix.org/2007/11/11/mocker-for-python-released</link>
		<comments>http://blog.labix.org/2007/11/11/mocker-for-python-released#comments</comments>
		<pubDate>Mon, 12 Nov 2007 02:17:00 +0000</pubDate>
		<dc:creator>Gustavo Niemeyer</dc:creator>
		
		<category><![CDATA[Project]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Test]]></category>

		<guid isPermaLink="false">http://blog.labix.org/2007/11/11/mocker-for-python-released/</guid>
		<description><![CDATA[After being bored for a long time for the lack of a better infrastructure for creating test doubles in Python, I decided to give it a go.
I&#8217;m actually quite happy with what came out.. it took me about four weekends (was developed as a personal project), and I&#8217;ll dare to say that it&#8217;s the best [...]]]></description>
			<content:encoded><![CDATA[<p>After being bored for a long time for the lack of a better infrastructure for creating <a href="http://martinfowler.com/articles/mocksArentStubs.html" onclick="javascript:pageTracker._trackPageview('/outbound/article/http://martinfowler.com/articles/mocksArentStubs.html');">test doubles</a> in Python, I decided to give it a go.</p>
<p>I&#8217;m actually quite happy with what came out.. it took me about four weekends (was developed as a personal project), and I&#8217;ll dare to say that it&#8217;s the best mocking system for Python at the present time.  Not only that, but it has features that I&#8217;ve not seen in any other mocking/stubing infrastructure, independent of language.</p>
<p>Here&#8217;s a feature list to catch your attention:</p>
<ul>
<li> Graceful platform for test doubles in Python (mocks, stubs, fakes, and dummies).
<li> Inspiration from real needs, and also from pmock, jmock, pymock, easymock, etc.
<li> Expectation of expressions defined by actually using mock objects.
<li> Expressions may be replayed in any order by default,
<li> Trivial specification of ordering between expressions when wanted.
<li> Nice parameter matching for defining expectations on method calls.
<li> Good error messages when expectations are broken.
<li> Mocking of many kinds of expressions (getting/setting/deleting attributes, calling, iteration, containment, etc)
<li> Graceful handling of nested expressions (e.g. &#8221;person.details.get_phone().get_prefix()&#8221;)
<li> Mock &#8221;proxies&#8221;, which allow passing through to the real object on specified expressions (e.g. useful with &#8221;os.path.isfile()&#8221;).
<li> Mocking via temporary &#8221;patching&#8221; of existent classes and instances.
<li> Trivial mocking of any external module (e.g. &#8221;time.time()&#8221;) via &#8221;proxy replacement&#8221;.
<li> Mock objects may have method calls checked for conformance with real class/instance to prevent API divergence.
<li> Type simulation for using mocks while still performing certain type-checking operations.
<li> Nice (optional) integration with &#8221;unittest.TestCase&#8221;, including additional assertions (e.g. &#8221;assertIs&#8221;, &#8221;assertIn&#8221;, etc).
<li> More &#8230;
</ul>
<p>Worked?  <a href="http://labix.org/mocker" >Check it out!</a></p>
]]></content:encoded>
			<wfw:commentRss>http://blog.labix.org/2007/11/11/mocker-for-python-released/feed</wfw:commentRss>
		</item>
	</channel>
</rss>
