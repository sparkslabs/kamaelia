<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	>

<channel>
	<title>Let's discuss the matter further &#187; Python</title>
	<atom:link href="http://rhodesmill.org/brandon/category/python/feed" rel="self" type="application/rss+xml" />
	<link>http://rhodesmill.org/brandon</link>
	<description>Thoughts of Brandon Craig Rhodes</description>
	<pubDate>Sun, 08 Jun 2008 11:50:28 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.5.1</generator>
	<language>en</language>
			<item>
		<title>My NOLA Plone Symposium talk, “the Zope 3 Component Architecture”</title>
		<link>http://rhodesmill.org/brandon/2008/nola-plone-symposium-talk/</link>
		<comments>http://rhodesmill.org/brandon/2008/nola-plone-symposium-talk/#comments</comments>
		<pubDate>Fri, 06 Jun 2008 03:44:02 +0000</pubDate>
		<dc:creator>Brandon Craig Rhodes</dc:creator>
		
		<category><![CDATA[Computing]]></category>

		<category><![CDATA[Grok]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Zope]]></category>

		<guid isPermaLink="false">http://rhodesmill.org/brandon/?p=17</guid>
		<description><![CDATA[  
I have delivered my “Zope 3 Component Architecture” talk
to the 2008 North American
Plone Symposium meeting here in New Orleans.
I want to thank the folks at
Enfold Systems
both for hosting the Symposium, inviting me to speak,
and for generously making it possible for me to attend!
Here are my slides:





Download slides as PDF



They had asked me to attend [...] ]]></description>
			<content:encoded><![CDATA[ <p>
I have delivered my “Zope 3 Component Architecture” talk
to the <a href="http://plone.org/events/regional/nola08">2008 North American
Plone Symposium</a> meeting here in New Orleans.
I want to thank the folks at
<a href="http://enfoldsystems.com/">Enfold Systems</a>
both for hosting the Symposium, inviting me to speak,
and for generously making it possible for me to attend!
Here are my slides:
</p>

<div class=caption>
<a href="/brandon/static/2008/nola-zope3-talk.pdf">
<img src="/brandon/static/2008/nola-zope3-talk.jpg"></a>
<a href="/brandon/static/2008/nola-zope3-talk.pdf"
 >Download slides as PDF</a>
</div>

<p>
They had asked me to attend so that I could present
the <a href="http://rhodesmill.org/brandon/adapters/">Using Grok
to Walk Like a Duck</a> talk that I gave at <a
href="http://us.pycon.org/2008/">PyCon 2008</a>
back in March.
They changed the title, I suppose, to better highlight
why it would be of interest to the Plone community;
but the change actually helped me to rethink the presentation.
I wound up using only the first half of my PyCon slides.
For the second half of the talk,
which at PyCon had consisted of a crazy sequence
of hints and tips about using adapters in your own applications,
I instead did a much more successful series of slides
about how adapters are actually used in Zope 3
to suit up objects for presentation on the web.
I think this made the idea more concrete,
and thus much easier to understand
for people seeing adapters for the first time.
</p>
<p>
The talk was well enough received
that I should perhaps think seriously about finding further opportunities
to share Zope 3 technologies with the Plone community.
</p> ]]></content:encoded>
			<wfw:commentRss>http://rhodesmill.org/brandon/2008/nola-plone-symposium-talk/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Presentations on Buildout and KSS</title>
		<link>http://rhodesmill.org/brandon/2008/presentations-on-buildout-and-kss/</link>
		<comments>http://rhodesmill.org/brandon/2008/presentations-on-buildout-and-kss/#comments</comments>
		<pubDate>Sun, 24 Feb 2008 04:29:13 +0000</pubDate>
		<dc:creator>Brandon Craig Rhodes</dc:creator>
		
		<category><![CDATA[Computing]]></category>

		<category><![CDATA[Grok]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Zope]]></category>

		<guid isPermaLink="false">http://rhodesmill.org/brandon/2008/presentations-on-buildout-and-kss/</guid>
		<description><![CDATA[  After several frustrating weeks learning how to create, edit, and publish a screencast under Linux (about which I will write a separate post), I have now published screencasts of both presentations that I gave at the PyAtl meetup in January. I opened with a talk about the import statement, and where Python packages lived [...] ]]></description>
			<content:encoded><![CDATA[<p> After several frustrating weeks learning how to create, edit, and publish a screencast under Linux (about which I will write a separate post), I have now published screencasts of both presentations that I gave at the PyAtl meetup in January. I opened with a talk about the <tt>import</tt> statement, and where Python packages lived before egg files were invented:</p>
<div class="movietitle"><a href="http://video.google.com/videoplay?docid=5996823626349389448"><b>Python Before Eggs</b></a></p>
<p><embed style="width:400px; height:326px;" id="VideoPlayback" type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docId=5996823626349389448&#038;hl=en" flashvars=""> </embed></p>
</div>
<p>The audience seemed most interested in the last section of the talk, where I discuss three techiques for debugging problems with Python&#8217;s <tt>import</tt> statement; fast-forward to around 3:00 if you want to catch that part by itself.</p>
<p>Next, Jeremy Jones spoke about eggs, Noah Gift <a href="http://www.blog.noahgift.com/virtualenv.pdf">introduced virtualenv</a>, and, finally, I got back up to talk about buildout. This was probably <b>my own favorite</b> among the recent presentations I have given, and it&#8217;s the one I&#8217;ve worked hardest to adapt to a competent screencast:</p>
<div class="movietitle"><a href="http://video.google.com/videoplay?docid=3428163188647461098&#038;hl=en"><b>Introduction to Buildout</b></a></p>
<p><embed style="width:400px; height:326px;" id="VideoPlayback" type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docId=3428163188647461098&#038;hl=en" flashvars=""> </embed></p>
</div>
<p>I have prepared a supplement to the above screencast that <a href="/brandon/buildout">gives additional hints and tips about using buildout</a>, as well as a link to the source code of the module that I use as my example.</p>
<p>Finally, if you&#8217;re ready to see something a little less polished — something that instead of being a screencast is actually a film of me talking in front of a live audience, and gesturing and jumping around — I filled a vacant lightning-talk slot at our February PyAtl meeting with an impromptu introduction to <a href="http://kssproject.org/">Kinetic Style Sheets</a> (KSS), using an example application that was still sitting on my laptop after at a Georgia Tech developer&#8217;s luncheon earlier that week:</p>
<div class="movietitle"><a href="http://video.google.com/videoplay?docid=3829442611478268688"><b>Introduction to KSS</b></a></p>
<p><embed style="width:400px; height:326px;" id="VideoPlayback" type="application/x-shockwave-flash" src="http://video.google.com/googleplayer.swf?docId=3829442611478268688&#038;hl=en" flashvars=""> </embed></p>
</div>
<p>Now I can finally turn my attention to preparing for my upcoming talk at PyCon 2008 in Chicago! I will be talking about the basic “adapter” design pattern, and how a framework like Zope 3 can facilitate its use. Stay tuned for more information!</p>
]]></content:encoded>
			<wfw:commentRss>http://rhodesmill.org/brandon/2008/presentations-on-buildout-and-kss/feed/</wfw:commentRss>
		</item>
		<item>
		<title>My November Grok Presentation</title>
		<link>http://rhodesmill.org/brandon/2007/my-november-grok-presentation/</link>
		<comments>http://rhodesmill.org/brandon/2007/my-november-grok-presentation/#comments</comments>
		<pubDate>Sat, 10 Nov 2007 00:06:24 +0000</pubDate>
		<dc:creator>Brandon Craig Rhodes</dc:creator>
		
		<category><![CDATA[Computing]]></category>

		<category><![CDATA[Grok]]></category>

		<category><![CDATA[Python]]></category>

		<category><![CDATA[Zope]]></category>

		<guid isPermaLink="false">http://rhodesmill.org/brandon/2007/my-november-grok-presentation/</guid>
		<description><![CDATA[  In this post, I provide the slides and examples from a recent talk that I gave to some fellow software developers at Georgia Tech. Many of them were not familiar with web frameworks, and I wanted to introduce them to two common concepts: the idea of “convention over configuration,” and the practice of passing [...] ]]></description>
			<content:encoded><![CDATA[<p> In this post, I provide the slides and examples from a recent talk that I gave to some fellow software developers at Georgia Tech. Many of them were not familiar with web frameworks, and I wanted to introduce them to two common concepts: the idea of “convention over configuration,” and the practice of passing inert data structures to a page template rather than letting it access live objects directly.</p>
<p>But because I am also really enjoying my work with the new Python web framework <a href="http://grok.zope.org/">Grok</a>, I decided to make it the centerpiece of my presentation<span id="more-8"></span> and illustrate the more general principles of web development by showing how Grok works. I also gave the talk a week later at an Atlanta Plone gathering, where I knew the interest would be more on what makes Grok unique.</p>
<p>When I was asked for a copy of my slides, I realized that my presentation style — which involves showing several slides, moving to my editor and web browser for some actual programming, then diving back into my slides — leaves the PDF of the presentation perhaps not making as much sense by itself as it might otherwise:</p>
<blockquote><p><a href="http://rhodesmill.org/brandon/static/2007-11/grok-slides.pdf">Click here to download the PDF of my presentation</a></p></blockquote>
<p>Hence, this post. Here I take the reader through the aspects of my talk that failed to make it on to the slides, showing both the command-line operations and the coding that illustrated and made sense of the presentation itself.</p>
<h2><a id="creating-a-grok-instance" name="creating-a-grok-instance">Creating a Grok Instance</a></h2>
<p>After some initial slides introducing the idea of “convention over configuration,” my presentation introduces Grok itself — making good use, I think, of the symbolic value of his club — and then announces, “Let&#8217;s create a Grok instance!” This is the point at which I bring up a command prompt and show the audience how easy <tt>grokproject</tt> makes it to start a new project:</p>
<pre>
$ grokproject MyApp
$ ./MyApp/bin/zopectl fg
</pre>
<p>After <tt>zopectl</tt> has finished starting up, I point my web browser at <tt>http://localhost:8080/</tt>, and then suffer a silent moment of frustration about the fact the web page that appears is <em>not</em> simply the welcome message from the new Grok app. Instead, the “admin interface” comes up, and insists on being fed an application instance name before allowing me to proceed. I choose <tt>lotr</tt> as the name, then show the audience that <tt>http://localhost:8080/lotr</tt> is where the new application lives.</p>
<p>Before continuing with my slides, I visit the directory <tt>MyApp/src/MyApp</tt> and give the audience brief glimpses of both <tt>app.py</tt> and the <tt>app_templates</tt> directory. This introduces three items which will be critical as the slides resume: the <tt>MyApp</tt> object, the <tt>Index</tt> view, and the <tt>index.pt</tt> page template. With these three items pointed out, I am ready to proceed with my slides and discuss how the object, view, and page template together form Grok&#8217;s “Threefold Way” of making objects available on the web.</p>
<h2><a id="the-actual-example" name="the-actual-example">The Actual Example</a></h2>
<p>Only a few slides later, the time arrives for a more sophisticated example. The presentation exaggerates when it instructs me to “go add some models and further views to your application.” I do not, in fact, make the audience watch me write code, but present them with a finished and working example that I prepare before the presentation. You can create it for yourself by putting this file in place of the one <tt>grokproject</tt> created:</p>
<ul>
<li><a href="http://rhodesmill.org/brandon/static/2007-11/app.py">app.py</a></li>
</ul>
<p>and then putting these four files in <tt>app_templates</tt>:</p>
<ul>
<li><a href="http://rhodesmill.org/brandon/static/2007-11/index.pt">index.pt</a></li>
<li><a href="http://rhodesmill.org/brandon/static/2007-11/contents.pt">contents.pt</a></li>
<li><a href="http://rhodesmill.org/brandon/static/2007-11/battleindex.pt">battleindex.pt</a></li>
<li><a href="http://rhodesmill.org/brandon/static/2007-11/characterindex.pt">characterindex.pt</a></li>
</ul>
<p>The resulting application, though tiny, was probably too complex for my target audience — many eyes, I noticed, glazed over when seeing Zope Page Templates for the first time — but four views is really barely enough to illustrate both that you can have multiple views on the same object (<tt>MyApp</tt> has both an <tt>/index</tt> and a <tt>/contents</tt>), and that several objects can have views with the same name (<tt>Battle</tt> and <tt>Character</tt> have different <tt>/index</tt> views). The example also shows clearly that if you declare four views, you need to write four page templates to go with them.</p>
<p>I emphasize for the audience that most of the 56 lines of <tt>app.py</tt> are concerned with creating the violence-themed object model; only the fifteen lines at the bottom are interesting Grok code, creating four very slender views. This is where I point out “convention over configuration” at work: all of the page templates get discovered without having to be named, and <tt>grok.name()</tt> only has to be employed when we want the view&#8217;s URL name to differ from the name of the class.</p>
<p>After demonstrating that the application does, in fact, work, we return to the slides and start examining the relationship between page templates and their views.</p>
<h2><a id="moving-to-a-push-model" name="moving-to-a-push-model">Moving to a “push” model</a></h2>
<p>In the presentation I distinguish between “muscular views” and “muscular templates”; perhaps I should have used instead the more conventional idea of templates that “pull” data versus those to which data are “pushed.”</p>
<p>When I reach the slide that reminds me to, “show them your anemic View classes,” I return to my editor and point out that, in the example application, each view has almost no purpose but to associate a particular object class with a particular page template. There is very little information in a declaration like:</p>
<pre>
class CharacterIndex(grok.View):
    grok.context(Character)
    grok.name('index')
</pre>
<p>Whereas there is plenty going on in a template like <tt>characterindex.pt</tt>; every TAL reference it makes is either to the raw <tt>context</tt> object itself, or an object it reaches through the context! Take a look:</p>
<pre>
&lt;h1&gt;The Character:
&lt;span tal:content=&quot;context/name&quot;&gt;Name&lt;/span&gt;&lt;/h1&gt;
This character fought in several battles.
&lt;ul&gt;
  &lt;li tal:repeat=&quot;battle context/battles&quot;&gt;
    &lt;a tal:attributes=&quot;href python: view.url(battle)&quot;
       tal:content=&quot;battle/name&quot;&gt;Name&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</pre>
<p>The slides then continue, pointing out that this makes for very quick coding at the cost of several disadvantages. When the fourth and final intermission arrives (“go make your CharacterIndex View more muscular”), I return to the window where my editor has <tt>app.py</tt> open and rewrite the <tt>CharacterIndex</tt> to look more like this:</p>
<pre>
class CharacterIndex(grok.View):
    grok.context(Character)
    grok.name('index')
    def namespace(self):
        return {
            'character_name': self.context.name,
            'battles': [
                { 'name': battle.name,
                   'url': self.url(battle) }
                for battle in self.context.battles
                ],
            }
</pre>
<p>Note what this does: it takes all of the work that the page template was doing in order to fetch the character&#8217;s name, and the names and URLs of the battles in which the character fought, and performs that access in pure Python and in exactly once place. The values in the dictionary that is being passed — <tt>character_name</tt> and <tt>battle_info</tt> — are, if you will examine them carefully, composed of nothing but primitive Python types! They consist solely of lists and dictionaries containing strings. They contain no objects for the template to browse at its leisure; instead, every bit of pertinent data in our objects is reduced to harmless data structures which cannot be used to affect the original objects in any way. This means that the <tt>characterindex.pt</tt> template can be rewritten both more safely, and also more simply:</p>
<pre>
&lt;html&gt;&lt;body&gt;
  &lt;h1&gt;The Character:
  &lt;span tal:content=&quot;character_name&quot;&gt;Name&lt;/span&gt;&lt;/h1&gt;
  This character fought in several battles.
  &lt;ul&gt;
    &lt;li tal:repeat=&quot;battle battles&quot;&gt;
      &lt;a tal:attributes=&quot;href battle/url&quot;
         tal:content=&quot;battle/name&quot;&gt;Name&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;a href=&quot;index&quot;&gt;Return home&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>
<p>And after showing the audience that the rewritten view and the rewritten page template work together, I return to my slides and — finally! — conclude my presentation.</p>
<p>The presentation seemed to weigh in at around forty minutes. Next time, I think I will tackle fewer concepts at once. But I do like making lots of use of the picture of the cave man, and his club.</p>
]]></content:encoded>
			<wfw:commentRss>http://rhodesmill.org/brandon/2007/my-november-grok-presentation/feed/</wfw:commentRss>
		</item>
		<item>
		<title>PyEphem available for Windows!</title>
		<link>http://rhodesmill.org/brandon/2007/pyephem-available-for-windows/</link>
		<comments>http://rhodesmill.org/brandon/2007/pyephem-available-for-windows/#comments</comments>
		<pubDate>Fri, 09 Nov 2007 16:10:25 +0000</pubDate>
		<dc:creator>Brandon Craig Rhodes</dc:creator>
		
		<category><![CDATA[Computing]]></category>

		<category><![CDATA[PyEphem]]></category>

		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://rhodesmill.org/brandon/2007/pyephem-available-for-windows/</guid>
		<description><![CDATA[  Over the years I have received many requests from frustrated Windows users, asking for a Windows-native version of my PyEphem astronomy library for Python. For most Windows users, an attempt to build the extension ends abruptly with the terrible and famous message:
error: Python was built with version 7.1 of Visual Studio, and extensions need [...] ]]></description>
			<content:encoded><![CDATA[<p> Over the years I have received many requests from frustrated Windows users, asking for a Windows-native version of my <a href="http://rhodesmill.org/pyephem/">PyEphem</a> astronomy library for Python. For most Windows users, an attempt to build the extension ends abruptly with the terrible and famous message:</p>
<blockquote><p><tt>error: Python was built with version 7.1 of Visual Studio, and extensions need to be built with the same version of the compiler, but it isn&#8217;t installed.</tt></p></blockquote>
<p>And, as I myself do not have Visual Studio on the small Windows machine that I deign to own for the sake of my photo printer, I have never been able to offer my users much help. But earlier this year, a helpful PyEphem user named Jeff Kowalczyk emailed me a link to Philip von Weitershausen&#8217;s post <a href="http://www.z3lab.org/sections/blogs/philipp-weitershausen/2007_07_26_cheap-binary-windows">“Cheap binary Windows eggs”</a>, which describes a method for building Python extensions using a freely available compiler.</p>
<p><span id="more-7"></span></p>
<p>Aside from the difficulty that the Python setuptools ignored the <tt>pydistutils.cfg</tt> file he recommended, making it necessary for me to name the compiler on the command line, his instructions produced a PyEphem windows egg with only a few steps:</p>
<ul>
<li>I installed <a href="http://www.python.org/download/windows/">Python for Windows</a>.</li>
<li>I installed the <a href="http://cheeseshop.python.org/pypi/setuptools/">setuptools package</a> using its Windows <tt class="docutils literal"><span class="pre">.exe</span></tt> installer (scroll down the page to find it).</li>
<li>I installed the <a href="http://www.mingw.org/">MinGW compiler</a>.</li>
<li>I installed <a href="http://gnuwin32.sourceforge.net/packages/libarchive.htm">LibArchive for Windows</a>.</li>
<li>I added to my Windows <tt class="docutils literal"><span class="pre">Path</span></tt>:
<pre>C:\Python25;C:\MingW\bin;C:\Program Files\GnuWin32\bin</pre>
</li>
<li>I downloaded the <a href="http://rhodesmill.org/pyephem/">PyEphem</a> source archive.</li>
<li>I brought up a command window and ran:
<pre>
C:\dev&gt; bsdtar -xf pyephem-3.7.2.1.tar.gz
C:\dev&gt; cd pyephem-3.7.2.1
C:\dev\pyephem-3.7.2.1&gt; python setup.py build --compiler=mingw32
C:\dev\pyephem-3.7.2.1&gt; python setup.py bdist_egg
</pre>
</li>
<li>I uploaded the egg in the <tt>dist</tt> directory to the Cheese Shop.</li>
</ul>
<p>Windows users will now find my Windows binary eggs on the <a href="http://pypi.python.org/pypi/pyephem/">Cheese Shop PyEphem entry</a>!</p>
<p>Always keep in mind that behind a small triumph like this one for a Free Software developer like myself stands a great mountain-mass of work by hundreds of others in the community. In this case one helpful user lead to one informative blog post which lead to a solid and available tool&nbsp;— MinGW&nbsp;— that is a descendant of the GCC compiler Richard Stallman himself started writing over twenty years ago! All of which allowed the delivery, to a new (and closed) platform, of my Python interface to <a href="http://www.clearskyinstitute.com/xephem/index.html">astronomy routines</a> which <a href="http://www.clearskyinstitute.com/resumes/ecdowney/resume.html">Elwood Charles Downey</a> has been maintaining for more than a quarter-century.</p>
]]></content:encoded>
			<wfw:commentRss>http://rhodesmill.org/brandon/2007/pyephem-available-for-windows/feed/</wfw:commentRss>
		</item>
	</channel>
</rss>
