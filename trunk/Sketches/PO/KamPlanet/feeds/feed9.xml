<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	>

<channel>
	<title>Under the Outside &#187; python</title>
	<atom:link href="http://arthurkoziel.com/tag/python/feed" rel="self" type="application/rss+xml" />
	<link>http://arthurkoziel.com</link>
	<description>Arthur Koziel - stuff that I find interesting.</description>
	<pubDate>Sun, 08 Jun 2008 08:31:16 +0000</pubDate>
	
	<language>en</language>
			<item>
		<title>Secure authentication cookies with Django</title>
		<link>http://arthurkoziel.com/2008/05/15/secure-authentication-cookies-with-django/</link>
		<comments>http://arthurkoziel.com/2008/05/15/secure-authentication-cookies-with-django/#comments</comments>
		<pubDate>Thu, 15 May 2008 16:03:52 +0000</pubDate>
		<dc:creator>Arthur Koziel</dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category><![CDATA[cookies]]></category>

		<category><![CDATA[django]]></category>

		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">http://arthurkoziel.com/?p=47</guid>
		<description><![CDATA[Some time ago Alex X. Liu published a research paper on secure cookie protocols. I tried to implement the protocol in Python, but sadly had to remove some fields from the protocol. You can download it here.
Changes
This is the original protocol:

user name&#124;expiration time&#124;(data)k&#124;HMAC(user name&#124;expiration time&#124;data&#124;session key, k)
where k=HMAC(user name&#124;expiration time, sk)
and sk=secret server key

I removed (data)k and session [...]]]></description>
			<content:encoded><![CDATA[<p>Some time ago <a href="http://www.cse.msu.edu/~alexliu/home.html">Alex X. Liu</a> published a research paper on <a href="http://www.cse.msu.edu/~alexliu/publications/Cookie/cookie.pdf">secure cookie protocols</a>. I tried to implement the protocol in Python, but sadly had to remove some fields from the protocol. You can <a href="http://arthurkoziel.com/wp-content/uploads/2008/05/authcookie.zip">download it here</a>.</p>
<h2>Changes</h2>
<p>This is the original protocol:</p>
<div class="highlight">
<pre>user name|expiration time|(data)k|HMAC(user name|expiration time|data|session key, k)
where k=HMAC(user name|expiration time, sk)
and sk=secret server key</pre>
</div>
<p>I removed <em>(data)k</em> and <em>session key</em>, which changes the protocol to:</p>
<div class="highlight">
<pre>user name|expiration time|HMAC(user name|expiration time, k)
where k=HMAC(user name|expiration time, sk)
and sk=secret server key</pre>
</div>
<p>The data field was removed because I couldn&#8217;t find a good two way encryption library for Python, and the session key was removed due to the lack of SSL.</p>
<p>The new structure is similar to the one used for the authentication in the backend of the recently released <a href="http://trac.wordpress.org/ticket/5367">Wordpress 2.5</a>.</p>
<h2>Usage</h2>
<p>To create a cookie in Django, use the <em>set_cookie</em> method of the response object:</p>
<div class="highlight">
<pre><span class="n">cookie</span> <span class="o">=</span> <span class="n">myutils</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span><span class="s">&#8216;arthur&#8217;</span><span class="p">,</span> <span class="mf">1210708139</span><span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s">&#8216;index.html&#8217;</span><span class="p">)</span>
<span class="n">response</span><span class="o">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">&#8216;mycookie&#8217;</span><span class="p">,</span> <span class="n">cookie</span><span class="p">)</span>

<span class="k">return</span> <span class="n">response</span></pre>
</div>
]]></content:encoded>
			<wfw:commentRss>http://arthurkoziel.com/2008/05/15/secure-authentication-cookies-with-django/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Install Django with Git</title>
		<link>http://arthurkoziel.com/2008/04/30/install-django-with-git/</link>
		<comments>http://arthurkoziel.com/2008/04/30/install-django-with-git/#comments</comments>
		<pubDate>Wed, 30 Apr 2008 12:45:11 +0000</pubDate>
		<dc:creator>Arthur Koziel</dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category><![CDATA[django]]></category>

		<category><![CDATA[git]]></category>

		<category><![CDATA[python]]></category>

		<guid isPermaLink="false">http://arthurkoziel.com/?p=35</guid>
		<description><![CDATA[Although Brian Rosner did a very good Screencast on installing and using Git with Django, there are sadly no Show Notes available. This makes installing Django from Git a quite time-consuming task, if you haven&#8217;t memorized the commands.
While writing down the commands for further use, I noticed that there&#8217;s a faster way than cloning the [...]]]></description>
			<content:encoded><![CDATA[<p>Although Brian Rosner did a very good <a href="http://oebfare.com/blog/2008/jan/23/using-git-django-screencast/">Screencast on installing and using Git</a> with <a href="http://www.djangoproject.com/">Django</a>, there are sadly no Show Notes available. This makes installing Django from Git a quite time-consuming task, if you haven&#8217;t memorized the commands.</p>
<p>While writing down the commands for further use, I noticed that there&#8217;s a faster way than cloning the official SVN repository by using an unofficial Git mirror. Later on, I wrote a small Bash script to automate the Django-from-Git installation, which you can download below.</p>
<h2>Official SVN repository</h2>
<p>First, clone the repository with:</p>
<div class="highlight">
<pre>git svn clone -s http://code.djangoproject.com/svn/django django</pre>
</div>
<p>navigate to the <em>django</em> folder and run:</p>
<div class="highlight">
<pre>git gc</pre>
</div>
<p>to cleanup unnecessary files and optimize the local repository. Finally, reset the master branch to point to trunk:</p>
<div class="highlight">
<pre>git reset --hard trunk</pre>
</div>
<h2>Git mirror</h2>
<p>Instead of going thrugh the time-consuming task of cloning the official SVN repository, there&#8217;s an faster and easier way. <a href="http://spinlock.ch/blog/">Matthias Kestenholz</a> was so kind to set up a Git mirror for Django, which is updated hourly.</p>
<p>Just use the <em>git clone</em> command, as with any other Git repository:</p>
<div class="highlight">
<pre>git clone git://spinlock.ch/pub/git/django/django.git django.git</pre>
</div>
<h2>Bash script</h2>
<p>To save some time on the next &#8220;Django from Git&#8221; installation, I wrote a simple Bash script to automate this task.</p>
<p>The script will clone the unofficial Git mirror in a folder called <em>django.git</em> and create the necessary symbolic links to install Django: </p>
<ol>
<li><em>django</em> folder to the python <em>site-packages</em> directory.</li>
<li><em>django-admin.py</em> file to a directory on the system path (the script uses <em>/usr/bin</em>).</li>
</ol>
<p><a href="http://arthurkoziel.com/wp-content/uploads/2008/04/django-git-install.sh">Download django-git-install</a></p>
<p>After the download, you need to make the script executable:</p>
<div class="highlight">
<pre>chmod u+x django-git-install.sh</pre>
</div>
<p>The script expects the installation directory as the first parameter:</p>
<div class="highlight">
<pre>Usage: django-git-install.sh target-directory</pre>
</div>
<p>For example, to install Django into <em>/usr/lib/django.git</em>, execute:</p>
<div class="highlight">
<pre>sudo ./django-git-install.sh /usr/lib</pre>
</div>
]]></content:encoded>
			<wfw:commentRss>http://arthurkoziel.com/2008/04/30/install-django-with-git/feed/</wfw:commentRss>
		</item>
		<item>
		<title>RuPy 2008</title>
		<link>http://arthurkoziel.com/2008/04/16/rupy-2008/</link>
		<comments>http://arthurkoziel.com/2008/04/16/rupy-2008/#comments</comments>
		<pubDate>Wed, 16 Apr 2008 17:23:02 +0000</pubDate>
		<dc:creator>Arthur Koziel</dc:creator>
		
		<category><![CDATA[conference]]></category>

		<category><![CDATA[python]]></category>

		<category><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://arthurkoziel.wordpress.com/?p=56</guid>
		<description><![CDATA[Last weekend I attended the RuPy (Ruby &#38; Python) conference in Poznan (Poland).
The program was splitted into simultaneously held Ruby and Python talks. For example: while the &#8220;TDD in Rails&#8221; talk in room A, a &#8220;TDD in Python&#8221; talk was held in room B. Language-independent talks, like &#8220;Business Natural Languages&#8221;, were held in one room.
Talks
I missed half of Micheal Foord&#8217;s talk on [...]]]></description>
			<content:encoded><![CDATA[<p>Last weekend I attended the RuPy (<a href="http://www.ruby-lang.org/">Ruby</a> &amp; <a href="http://python.org/">Python)</a> conference in Poznan (Poland).</p>
<p>The program was splitted into simultaneously held Ruby and Python talks. For example: while the &#8220;TDD in Rails&#8221; talk in room A, a &#8220;TDD in Python&#8221; talk was held in room B. Language-independent talks, like &#8220;Business Natural Languages&#8221;, were held in one room.</p>
<h2>Talks</h2>
<p>I missed half of <a href="http://www.voidspace.org.uk/python/weblog/index.shtml">Micheal Foord&#8217;s</a> talk on &#8220;Programming the Browser with IronPython and Silverlight&#8221; due to my late arriving. However, the stuff which I saw gave me some nice insights into what <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython">IronPython</a> and <a href="http://silverlight.net/">Silverlight</a> are capable of.</p>
<p>Watching the adoption of Silverlight and development of <a href="http://www.mono-project.com/Moonlight">Moonlight</a> (Silverlight for linux) is quite interesting, especially since Microsoft made a deal to <a href="http://visitmix.com/blogs/News/477/">put Silverlight on the official Beijing Olympics website</a>. </p>
<p><a href="http://arthurkoziel.com/wp-content/uploads/2008/04/2418447486_58edeb0e00.jpg"><img class="alignnone size-thumbnail wp-image-24" title="2418447486_58edeb0e00" src="http://arthurkoziel.com/wp-content/uploads/2008/04/2418447486_58edeb0e00-155x117.jpg" alt="" width="155" height="117" /></a> <a href="http://arthurkoziel.com/wp-content/uploads/2008/04/2418446734_9c148c6928.jpg"><img class="alignnone size-thumbnail wp-image-23" title="2418446734_9c148c6928" src="http://arthurkoziel.com/wp-content/uploads/2008/04/2418446734_9c148c6928-155x117.jpg" alt="" width="155" height="117" /></a> <a href="http://arthurkoziel.com/wp-content/uploads/2008/04/2417630603_43987d4d44.jpg"><img class="alignnone size-thumbnail wp-image-22" title="2417630603_43987d4d44" src="http://arthurkoziel.com/wp-content/uploads/2008/04/2417630603_43987d4d44-155x117.jpg" alt="" width="155" height="117" /></a></p>
<p>(Photos taken by <a href="http://flickr.com/photos/ukasbadu">ukasbadu</a>, more photos are available on flickr under the <a href="http://flickr.com/photos/tags/rupy2008/">rupy2008 tag</a>)</p>
<p>The next talk by <a href="http://www.zedshaw.com/">Zed Shaw</a> about &#8220;Correlations and Conclusions&#8221; was really funny but also very informative<a href="http://arthurkoziel.com/wp-content/uploads/2008/04/2417630603_43987d4d44.jpg"></a>. He benchmarked <a href="http://mongrel.rubyforge.org/">Mongrel</a> against <a href="http://webpy.org/">web.py</a> and inserted the data into <a href="http://www.r-project.org/">R</a>. R seems like really nice tool for statistical data and once you get used to it&#8217;s weird syntax there are certainly a lot of things you can do with it.</p>
<p>What I didn&#8217;t know was that <a href="http://www.hpl.hp.com/research/linux/httperf/">httperf</a> is more superior to <a href="http://httpd.apache.org/docs/2.0/programs/ab.html">ab</a> and used for serious stuff, while ab is mostly okay for quick&#8217;n'dirty benchmarks.</p>
<p>The presentation itself was done using latex-beamer and generated out of a YAML file - a quite interesting concept which Zed Shaw is going to <a href="http://www.zedshaw.com/blog/index.html">describe further in his blog</a>.</p>
<p><a href="http://tartley.com/">Jonathan Hartley</a>, who works together with Micheal Foord at <a href="http://www.resolversystems.com/">Resolver Systems</a>, held a great talk about Test-driven development and shared his experiences over the past few years. A really interesting fact is the ratio of test code to product, which is 4:1 - meaning that there are four lines of test code for each line of product code.</p>
<p><a href="http://bnl.jayfields.com/">Business Natural Languages</a> (a Domain Specific Language for empowering subject matter experts) were presented by <a href="http://jayfields.com/">Jay Fields</a> from <a href="http://www.thoughtworks.com/">ThoughtWorks</a>. The whole point in a BNL is to allow the customer to change the applications behaviour without involving the developer. It&#8217;s definately worth a look for some bigger projects.</p>
<h2>Bottom line</h2>
<p>The organization was perfect and the choosen topics very interesting. The only negative thing was actually lunch, which was horrible (and not very warm).</p>
<p>However, it was a great conference which I can only highly recommend to everyone interested.</p>
]]></content:encoded>
			<wfw:commentRss>http://arthurkoziel.com/2008/04/16/rupy-2008/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Symfony + MySQL to Django + PostgreSQL</title>
		<link>http://arthurkoziel.com/2008/03/26/symfony-mysql-to-django-postgresql/</link>
		<comments>http://arthurkoziel.com/2008/03/26/symfony-mysql-to-django-postgresql/#comments</comments>
		<pubDate>Wed, 26 Mar 2008 18:40:31 +0000</pubDate>
		<dc:creator>Arthur Koziel</dc:creator>
		
		<category><![CDATA[database]]></category>

		<category><![CDATA[django]]></category>

		<category><![CDATA[mysql]]></category>

		<category><![CDATA[php]]></category>

		<category><![CDATA[postgresql]]></category>

		<category><![CDATA[python]]></category>

		<category><![CDATA[symfony]]></category>

		<guid isPermaLink="false">http://arthurkoziel.wordpress.com/?p=52</guid>
		<description><![CDATA[While recently migrating Tschitschereengreen.com from Symfony to Django plus changing the database backend from MySQL to PostgreSQL, there were mainly two tasks more time-consuming than I&#8217;ve had thought beforehand:
SQL dump
The old database used a latin1 encoding for the database fields and utf-8 as the server and client connection encoding. With these settings, even trying to [...]]]></description>
			<content:encoded><![CDATA[<p>While recently migrating <a href="http://www.tschitschereengreen.com/">Tschitschereengreen.com</a> from <a href="http://www.symfony-project.org/">Symfony</a> to <a href="http://www.djangoproject.com/">Django</a> plus changing the database backend from <a href="http://www.mysql.com/">MySQL</a> to <a href="http://www.postgresql.com/">PostgreSQL</a>, there were mainly two tasks more time-consuming than I&#8217;ve had thought beforehand:</p>
<h2>SQL dump</h2>
<p>The old database used a latin1 encoding for the database fields and utf-8 as the server and client connection encoding. With these settings, even trying to get a correctly encoded database dump from <a href="http://www.phpmyadmin.net/">phpMyAdmin</a> is a bad idea.</p>
<p>Using mysqldump with an explicitly specified character-set is much better:</p>
<div class="highlight">
<pre>mysqldump … –default-character-set<span class="o">=</span>latin1 –skip-set-charset dbname &gt; dump.sql</pre>
</div>
<h2>MySQL to PostgreSQL with JSON</h2>
<p>After realizing that changing a MySQL dump to a valid PostgreSQL dump might take some time, Django’s ability to import and export database fixtures in JSON was a great alternative.</p>
<p>There were, however, a few corrections needed in order to import the data in PostgreSQL:</p>
<ol>
<li><strong>Date fields</strong><br />
&#8220;0000-00-00 00:00:00&#8243; might be valid MySQL datetime value, but it ain’t so in PostgreSQL. To import the data it is needed to replace such dates with valid ones like &#8220;1970-01-01 00:00:01&#8243;.</li>
<li><strong>Boolean fields</strong><br />
MySQL doesn’t support real boolean fields and instead uses tinyint. PostgreSQL, on the other hand, supports real boolean fields and doesn’t accept &#8220;0&#8243; or &#8220;1&#8243; as valid boolean values. Replacing &#8220;0&#8243; with “&#8221;alse&#8221; and &#8220;1&#8243; with &#8220;true” will help in this case.</li>
</ol>
]]></content:encoded>
			<wfw:commentRss>http://arthurkoziel.com/2008/03/26/symfony-mysql-to-django-postgresql/feed/</wfw:commentRss>
		</item>
	</channel>
</rss>

<!-- Dynamic Page Served (once) in 0.356 seconds -->
