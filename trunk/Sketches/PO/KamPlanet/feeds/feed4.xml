<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-9266717</id><updated>2008-04-20T18:53:28.850-04:00</updated><title type='text'>Only Python</title><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>113</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-9266717.post-6180625941275341269</id><published>2008-04-18T20:29:00.001-04:00</published><updated>2008-04-18T20:29:19.302-04:00</updated><title type='text'>Thoughts on Google Summer of Code 2008 - part 1</title><content type='html'>&lt;div xmlns='http://www.w3.org/1999/xhtml'&gt;In just a few days, Google will make some announcements that will please many hundreds of students and disappoint even more. I think we should all focus on the positive side when the announcements are made.  It is, after all, a fantastic thing that a company is spending millions of dollars so that some students get the chance to program on Open Source software as a summer job.&lt;br/&gt;&lt;br/&gt;Just think of it.  Who could have predicted, just five years ago, that a company would spend that kind of money on students who would work on someone else's project?&lt;br/&gt;&lt;br/&gt;This is amazing - and many are now taking it for granted.&lt;br/&gt;&lt;br/&gt;I find it great that the Python Software Foundation is an organization that can mentor SoC students.  With the excellent supporting work of James Tauber as coordinator, many promising students are going to be paired with a mentor, hopefully leading to great projects to be completed this summer.&lt;br/&gt;&lt;br/&gt;I have seen some grumblings on some SoC related lists that have made me thought about some of the "problems" I have seen.  &lt;b&gt;Note that these are very minor compared with the strong positive points.&lt;/b&gt; I will be discussing those in part 2, after the official announcements are made.&lt;br/&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;Because the PSF is an umbrella organization, most students work on different projects, unrelated with each other.  As a result, they tend to have limited interactions with the greater Python community.  I think there should be a "meeting place" where all the students would meet - perhaps a mailing list to which they have all to contribute once a week, sharing their progress, etc.&lt;/li&gt;&lt;li&gt;Not enough positive publicity is given to "successful students", i.e. those that continue to contribute to the Python community after the summer is over.   For Crunchy, it has been one success (Johannes Woolard) out of a total of 3 students over the past 2 years. I don't know of many other success stories from other projects ...  Alex Holkner comes to mind ... but I feel I should know more names of successful students.  (I know there's another Alex or Alessandro who has contributed to the Python core and was involved with GHOP....)&lt;br/&gt;&lt;/li&gt;&lt;li&gt;With the exception of a few people like James Tauber and Titus Brown with whom I have had a few email exchanges, I do not feel that as a past/potential mentor I am as much part of a community as I feel should be the case.   There is a mentor discussion list, but it does not seem to be the kind of place to generate community building discussions.&lt;br/&gt;&lt;/li&gt;&lt;/ul&gt;In terms of projects submitted, I would describe them to belong in the following categories:&lt;br/&gt;&lt;br/&gt;1. Contributions to the "standard" core (cpython code, or standard library)&lt;br/&gt;&lt;br/&gt;2 a. Contributions to "non-standard core"  (e.g. Jython, PyPy, TinyPy?)&lt;br/&gt;2 b. Contributions to 3rd party libraries (e.g. Numpy, Pygame)&lt;br/&gt;2 c. Contributions to major projects whose end users have to use Python (e.g. SAGE)&lt;br/&gt;2 d. Contributions to projects that can be used to teach Python  [Crunchy, of course ;-), but there are others ... that will be for part 2]&lt;br/&gt;&lt;br/&gt;3 a. Contributions that propose some new "standards" for Python programmers, never discussed before in the Python community.&lt;br/&gt;3 b. Projects that happen to be written in Python, but whose end users are not exposed (or minimally exposed) to Python.&lt;br/&gt;3 c. Projects that are not written in Python, that may or may not be usable in all OS, and that aren't more useful to Python programmers than they would be to people using other languages.&lt;br/&gt;3 d. &lt;i&gt;et cetera&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;Assuming that all projects are well-thought of  (which is not always the case), I feel that:&lt;br/&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;Projects in category 1 deserve to be fully supported.  The Python community need more capable people contributing to the core to prevent burnout for the current contributors.  Perhaps, in a few years, after working some more on Crunchy, I'll feel capable of joining that group and contributing effectively (and have the time to do so).&lt;/li&gt;&lt;li&gt;Projects in categories 2 a-d are worthy of support.  There are of course more such projects submitted than can possibly be supported, so some difficult choices had to be made.  (Kudos to James for guiding this process.)  Many people are going to be disappointed, but this was unavoidable.&lt;br/&gt;&lt;/li&gt;&lt;li&gt;Projects in categories 3 a-d are a puzzle to me.  I don't understand their appeal for the PSF (and I know I am not the only one), but it seems that very few people are willing to take a public stance on this and debate the issue.  &lt;b&gt;Note that this comment is made as an observation on the discussions that took place so far and does not necessarily reflect on any decision that has been made.&lt;/b&gt;&lt;br/&gt;&lt;/li&gt;&lt;/ul&gt;This is it for the negative comments.  I can't wait for the announcements from Google to focus entirely on the more positive side.&lt;br/&gt;&lt;span class='nfakPe'/&gt;&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/04/thoughts-on-google-summer-of-code-2008.html' title='Thoughts on Google Summer of Code 2008 - part 1'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=6180625941275341269' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/6180625941275341269/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/6180625941275341269'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/6180625941275341269'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-2983430142861880117</id><published>2008-04-13T16:59:00.005-04:00</published><updated>2008-04-15T06:22:00.348-04:00</updated><title type='text'>Firefox 3b5: the pain of using the bleeding edge</title><content type='html'>&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;After seeing so many positive reviews of the upcoming Firefox 3, I decided to try the latest beta (5) version.  It seems indeed to be &lt;i&gt;fast&lt;/i&gt; when dealing with complex javascript.  While there are a few features I am not too keen about [1], I liked the extra speed (and the reduced RAM usage) so much that I have been using it almost exclusively.  That is until now, since I can't rely on it to test Crunchy.&lt;span style="color: rgb(255, 0, 0);"&gt; &lt;span style="font-weight: bold;"&gt;&lt;span style="color: rgb(0, 102, 0);"&gt;Update: this is no longer true, thanks to a reader's comment.  The fix was to move the &lt;span style="color: rgb(255, 0, 0);"&gt;onblur&lt;/span&gt; event to the file input, indicated by&lt;/span&gt; HERE.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;To load a local html file [2] into Crunchy, a two-step process has to be used due to normal javascript security:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&amp;lt;form name="browser_local"&lt;br /&gt;&lt;span style="color: rgb(255, 0, 0);"&gt;onblur&lt;/span&gt;="document.submit_local.url.value =&lt;br /&gt;    document.browser_local.filename.value"&amp;gt;&lt;br /&gt;&amp;lt;input name="filename"  type="file" &lt;span style="color: rgb(204, 0, 0);font-size:80;" &gt;&lt;span style="font-size:100%;"&gt;HERE &lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;br /&gt;&amp;lt;/form&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;form action="/local" method="get" name="submit_local"&amp;gt;&lt;br /&gt; &amp;lt;input name="url" type="hidden"&amp;gt;&lt;br /&gt; &amp;lt;input class="crunchy" type="submit"&amp;gt;&lt;br /&gt;        value="Load local html tutorial" /&amp;gt;&lt;br /&gt;&amp;lt;/form&amp;gt;&lt;br /&gt;&lt;/pre&gt;The first form allows to browse the local drive for a particular file.  The second one sends the chosen file's path to the browser as an argument to the "/local" action, something like &lt;span style="font-family:Courier New;"&gt;/local?url=file_path&lt;/span&gt;.   Unfortunately, when using Firefox 3 beta 5, no argument is passed and we get &lt;span style="font-family:Courier New;"&gt;/local?url=&lt;/span&gt; instead.  And of course no file can be loaded.&lt;br /&gt;&lt;br /&gt;This file browser feature is not something I test regularly when working on Crunchy, nor is it something that can be tested via standard Python unit tests.  [3] When I noticed the new bug, it never crossed my mind that this could be a "new Firefox feature" and thought it was something I had broken in Crunchy's code. [4]  It was only after I tried a few old releases of Crunchy (to figure out &lt;i&gt;when&lt;/i&gt; "I" broke the code) that I figured out that the problem was not due to anything I wrote.&lt;br /&gt;&lt;br /&gt;I have not been able to find any note about this new behavior of Firefox.  Since this is still a beta, I guess I'll have to wait until the final Firefox 3 release to figure out if I need to change the way I load files. [5]&lt;br /&gt;&lt;br /&gt;====&lt;br /&gt;[1] One change I don't like is the rather gaudy auto-suggest list when typing a url.&lt;br /&gt;&lt;br /&gt;[2] The same method is used to load reStructuredText files and others.&lt;br /&gt;&lt;br /&gt;[3] I really need to investigate twill for this.&lt;br /&gt;&lt;br /&gt;[4] One more reason to have a complete unit test coverage.  Since I don't, I automatically assumed it was something I had done.&lt;br /&gt;&lt;br /&gt;[5] If anyone has any lead as to how to do so reliably in Firefox 3b5 as well as with other browsers, I'd be keen to hear about it.&lt;br /&gt;&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/04/firefox-3b5-pain-of-using-bleeding-edge.html' title='Firefox 3b5: the pain of using the bleeding edge'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=2983430142861880117' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/2983430142861880117/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/2983430142861880117'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/2983430142861880117'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-7400387089589260381</id><published>2008-04-11T17:38:00.002-04:00</published><updated>2008-04-11T17:40:55.101-04:00</updated><title type='text'>Shell meme</title><content type='html'>I'm responding to peer pressure.   I pretty much only use the shell for one thing and rarely restart it...&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;andre$ history|awk '{a[$2]++ } END{for(i in a){print a[i] " " i}}'|sort -rn|head&lt;br /&gt;322 python&lt;br /&gt;76 cd&lt;br /&gt;26 ls&lt;br /&gt;11 grep&lt;br /&gt;8 pwd&lt;br /&gt;8 find&lt;br /&gt;5 sudo&lt;br /&gt;3 rm&lt;br /&gt;3 def&lt;br /&gt;2 svn&lt;br /&gt;&lt;/pre&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/04/shell-meme.html' title='Shell meme'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=7400387089589260381' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/7400387089589260381/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/7400387089589260381'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/7400387089589260381'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-331882857375178987</id><published>2008-03-22T18:54:00.004-04:00</published><updated>2008-03-22T20:56:50.975-04:00</updated><title type='text'>Using Clone Digger</title><content type='html'>There's a new tool available for Python programmers: &lt;a href="http://clonedigger.sourceforge.net/"&gt;Clone Digger&lt;/a&gt;. While it has not been officially released, it is available from the svn repository.  Clone Digger finds code duplications in a given project, and creates a fairly comprehensive report (html file).  Seeing the duplications on a screen is a powerful motivation for refactoring.&lt;br /&gt;&lt;br /&gt;Check it out!&lt;br /&gt;&lt;br /&gt;Update:&lt;br /&gt;&lt;br /&gt;Just to make it clear: I had nothing to do with this project; I just found out about it via the gsoc-python-mentors list.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/03/using-clonedigger.html' title='Using Clone Digger'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=331882857375178987' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/331882857375178987/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/331882857375178987'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/331882857375178987'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-5197403592232964850</id><published>2008-03-22T10:43:00.003-04:00</published><updated>2008-03-22T12:45:34.873-04:00</updated><title type='text'>Inspiration and persistence</title><content type='html'>While &lt;strike&gt;mindlessly wasting time instead of programming&lt;/strike&gt; &lt;span style="font-style: italic;"&gt;selectively reading&lt;/span&gt; the internet, I came across &lt;a href="http://sethgodin.typepad.com/seths_blog/2008/03/persistence.html"&gt;this gem by Seth Godin&lt;/a&gt; which I reproduce in its entirety:&lt;br /&gt;&lt;blockquote style="color: rgb(102, 51, 102);"&gt;&lt;h3 class="entry-header"&gt;Persistence&lt;/h3&gt;       &lt;div class="entry-body"&gt;    &lt;p&gt;Persistence isn't using the same tactics over and over. That's just annoying.&lt;/p&gt;  &lt;p&gt;Persistence is having the same goal over and over.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;p style="font-weight: bold;"&gt;That's it.&lt;/p&gt;&lt;p&gt;A wiser person would most likely leave it at that.  However, this lead me thinking of my goals when it comes to programming which I thought I should write down if only to help me reflect upon them again at a later time.  I can sum them up as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Do something that is fun but that gives me some sense of accomplishment rather than just wasting time.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Find ways to make it easier for others to learn programming (in Python).&lt;/li&gt;&lt;/ol&gt;In doing so, I have found myself oscillating between two extremes:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Trying to follow the "&lt;span style="font-style: italic;"&gt;release early, release often&lt;/span&gt;" philosophy.&lt;/li&gt;&lt;li&gt;Trying to get everything "&lt;span style="font-style: italic;"&gt;just perfect&lt;/span&gt;" before releasing anything.&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;Trying to get things "just perfect" is something that can lead to procrastination and delays.  As an example, &lt;a href="http://rur-ple.sourceforge.net/"&gt;rur-ple&lt;/a&gt;'s version 1.0 release candidate 3  has not been updated since July 2007.  The next version should be the final 1.0 ... but somehow, I am not happy with many details and I'd like to get everything right for 1.0.  Too often I read about (usually commercial) software which is officially released and is considered by its users to be a Beta version.  All open source programmers I have met have a sense of pride in their work that I share.  So I postpone the final release and end up working on something else...&lt;br /&gt;&lt;br /&gt;I went the other way with a little utility called &lt;a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/473812"&gt;lightning compiler&lt;/a&gt; (now at &lt;a href="https://sourceforge.net/project/showfiles.php?group_id=125834"&gt;version 2.1&lt;/a&gt;), whose version 1.0 was released as a recipe in the online &lt;a href="http://aspn.activestate.com/ASPN/Cookbook/Python"&gt;Python cookbook&lt;/a&gt;.  Much of the rapid evolution of lightning compiler came from user feedback, as expected from the "release early, release often" philosophy.  Yet, following the same philosophy generated relatively little feedback for &lt;a href="http://rur-ple.sourceforge.net/"&gt;rur-ple&lt;/a&gt; of for &lt;a href="http://code.google.com/p/crunchy/"&gt;crunchy&lt;/a&gt;  to date. I did get some feedback for rur-ple which has been used at an &lt;a href="http://showmedo.com/videos/series?name=pythonJensFromKidsSeries"&gt;elementary school in Austria&lt;/a&gt;, at a &lt;a href="http://www.mail-archive.com/edu-sig@python.org/msg01604.html"&gt;high school&lt;/a&gt; and a &lt;a href="https://www.cs.indiana.edu/classes/a201-hayn/PersonalMachines.html"&gt;university&lt;/a&gt; in the U.S., among others, but it has often been very indirect.&lt;br /&gt;&lt;br /&gt;Still, I am persistent.  Following Seth Godin's definition of persistence, my second goal written above can be described as finding a solution as to &lt;a href="http://www.salon.com/tech/feature/2006/09/14/basic/"&gt;Why Johnny can't code&lt;/a&gt;.  Or, as I have &lt;a href="http://osdir.com/ml/python.education/2006-06/msg00071.html"&gt;written elsewhere &lt;/a&gt;&lt;br /&gt;&lt;blockquote&gt;M&lt;span style="font-style: italic;"&gt;y goal is to provide an introduction to programming which is as "smooth" as possible.  We sometime hear the phrase "steep learning curve" to characterize some difficult to grasp concept.  I think it is important to have as few "steep learning curves" as possible in the learning process.   GvR &lt;/span&gt;&lt;a href="http://gvr.sourceforge.net/"&gt;[Guido van Robot]&lt;/a&gt;&lt;span style="font-style: italic;"&gt; uses a slightly easier syntax than Python ... but at the expense of having a "step-like learning curve" when one wants to go from GvR's world to Python programming.  Since Rur-ple uses Python, there is no transition to speak of&lt;/span&gt;.&lt;/blockquote&gt;Both rur-ple and Crunchy, and to a lesser extent lightning compiler (which has been incorporated within rur-ple) have been inspired by that goal.&lt;br /&gt;&lt;br /&gt;However, sometimes I stray from that goal.  For example, inspired by an earlier post on Georg Brand's remarkable &lt;a href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, Crunchy now includes a prototype for an automated documentation testing framework along the lines of &lt;a href="http://sphinx.pocoo.org/ext/doctest.html"&gt;sphinx.ext.doctest&lt;/a&gt; which was released yesterday.  My intention is to update Crunchy's implementation so that it can be totally compatible with Sphinx's.  And while I believe that this is a neat (and fun!) thing to include in Crunchy, it only very indirectly contribute to my overall goal and ends up delaying the 1.0 release for Crunchy.&lt;br /&gt;&lt;br /&gt;Blogging too can be a distraction.  However, it is my hope that it may generate a few comments that will contribute to inspire me to make Crunchy even more useful.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Success is the result of inspiration and persistence.&lt;/span&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/03/inspiration-and-persistence.html' title='Inspiration and persistence'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=5197403592232964850' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/5197403592232964850/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/5197403592232964850'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/5197403592232964850'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-8130414994820430529</id><published>2008-03-07T20:47:00.002-05:00</published><updated>2008-03-07T20:58:46.012-05:00</updated><title type='text'>Crunchy: Pycon 2008 release</title><content type='html'>Crunchy is getting really close to a 1.0 version.  To mark the Pycon 2008 event (that I won't be able to attend), I just did a new release (0.9.9).  It has a few new goodies that I won't list here, leaving Johannes do the demonstration.  As for me, I am heading down South for a vacation with my kids.&lt;br /&gt;&lt;br /&gt;Note: the opening Crunchy page indicates that this is version 0.9.8.6 - which is incorrect.&lt;br /&gt;&lt;br /&gt;What is left to be done for version 1.0 is cleaning up the existing documentation (proofreading, proofreading, proofreading) and adding a few more pages to it.  New features will have to wait until after 1.0.... unless we get feedback from Pycon attendees for "must have" features that we could implement quickly.&lt;br /&gt;&lt;br /&gt;As far as I know, there are no bugs (famous last words).  If you find any, please let us know.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/03/crunchy-pycon-2008-release.html' title='Crunchy: Pycon 2008 release'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=8130414994820430529' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/8130414994820430529/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/8130414994820430529'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/8130414994820430529'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-8512727337131004549</id><published>2008-02-29T22:09:00.002-05:00</published><updated>2008-02-29T22:20:25.275-05:00</updated><title type='text'>Pycon and Crunchy</title><content type='html'>This year's Pycon program looks very interesting. I wish I could be there but, alas, the timing was just wrong for me this year.  This is doubly disappointing as I would have been able to meet with Johannes Woolard in the flesh.  Yes, forget Guido van Rossum, Alex Martelli and other famous names: the one person I wanted to meet is Johannes.  For more than a year an a half, I have had the pleasure of collaborating with Johannes on Crunchy, without ever meeting him.  This year, Johannes will be the one showing Crunchy off.   I'm sure he'll do a great job.&lt;br /&gt;&lt;br /&gt;And, if anyone is looking to hire a bright, young, hard-working programmer, Johannes will graduate from Oxford this year.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/02/pycon-and-crunchy.html' title='Pycon and Crunchy'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=8512727337131004549' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/8512727337131004549/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/8512727337131004549'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/8512727337131004549'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-8868082559689826064</id><published>2008-02-22T19:26:00.002-05:00</published><updated>2008-02-22T19:46:10.480-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><title type='text'>99 problems: looking for volunteers</title><content type='html'>Some time ago, Dr. Werner Hett created a &lt;a href="https://prof.ti.bfh.ch/hew1/informatik3/prolog/p-99/"&gt;list of 99 Prolog problems&lt;/a&gt; that could be used to skills in logic programming.  More recently, a Ruby learner posted a &lt;a href="http://curiouscoding.wordpress.com/2008/02/11/learning-ruby-with-ninety-nine-problems-1-10/"&gt;Ruby version of the first 10 problems&lt;/a&gt;, and his solutions.   This seemed to be a good idea, especially if one makes use of doctests ... and &lt;a href="http://code.google.com/p/crunchy/"&gt;Crunchy&lt;/a&gt; :-).  So, I've started my own version of these which you can get as a zip file (containing 6 problems and their solutions) from the &lt;a href="http://code.google.com/p/crunchy/"&gt;Crunchy main page&lt;/a&gt;.  If you have never done so before, to load a local html file within Crunchy, you simply click on the "Browsing" menu on the left hand side and scroll down until you reach the "Closer to home" section and follow the instructions.&lt;br /&gt;&lt;br /&gt;Note that with the next version of Crunchy (the current one is 0.9.8.6) you will be able to start Crunchy with an arbitrary file using something like&lt;br /&gt;&lt;br /&gt;python crunchy.py --url=full_local_path_or_url&lt;br /&gt;&lt;br /&gt;It would be nice if there could be a complete Python version of the 99 Prolog problems.  If anyone is interested in helping, please do not hesitate to contact me.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/02/99-problems-looking-for-volunteers.html' title='99 problems: looking for volunteers'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=8868082559689826064' title='22 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/8868082559689826064/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/8868082559689826064'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/8868082559689826064'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-3863341971940507054</id><published>2008-02-01T18:43:00.000-05:00</published><updated>2008-02-01T18:54:44.513-05:00</updated><title type='text'>Automated documentation code testing - part 2</title><content type='html'>Thanks to Crunchy's simple plugin architecture, after only a few hours of coding the automated documentation testing (for html files) &lt;a href="http://aroberge.blogspot.com/2008/01/automated-documentation-code-testing.html"&gt;described here&lt;/a&gt; has been implemented (the "first approach" described, that is.)  It will be part of the next Crunchy release.  In theory, code samples for a complete book could be all tested at the click of a button, provided that the book is available as an html document.   The next step will be to define a few new directives so that reStructuredText documents can be used as well.&lt;br /&gt;&lt;br /&gt;Now, while I have a few sample test files, it would be nice is to find someone who has a real life document with embedded Python code samples as a test user...</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/02/automated-documentation-code-testing.html' title='Automated documentation code testing - part 2'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=3863341971940507054' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/3863341971940507054/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/3863341971940507054'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/3863341971940507054'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-202455290431238091</id><published>2008-01-29T17:29:00.000-05:00</published><updated>2008-01-29T19:52:27.519-05:00</updated><title type='text'>Automated documentation code testing</title><content type='html'>During the first year or so of development work on &lt;a href="http://code.google.com/p/crunchy"&gt;Crunchy&lt;/a&gt;, I probably got a nickname of "Dr. NO!" by early Crunchy adopters as I often resisted suggestions for adding new capabilities.   At the time, Crunchy required that html pages have additional markup added  (&lt;span style="font-style: italic;"&gt;vlam = very little additional markup&lt;/span&gt;) so that Crunchy could process them properly.  I wanted Crunchy-enabled tutorials to be very easily created, without much additional work from tutorial writers, so that Crunchy would be adopted by many people.  Most of the suggestions that were made, including some by Johannes, both while he was sponsored by Google as a Summer of Code student and afterwards when he became a co-developer, were rejected by me for that reason.  Since then, the situation has changed, mainly for two reasons:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Johannes created a new basic infrastructure for Crunchy where we can introduce new capabilities via plugins, without needing to change a single line of the core in most instances.&lt;/li&gt;&lt;li&gt;Based on the new architecture, I came up with a new way to process pages so that no additional markup was needed for Crunchy to do its magic.  This is what makes it possible, for example, to interact with the official Python tutorial on the &lt;a href="http://www.python.org/"&gt;python.org&lt;/a&gt; site.&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;Now, that it is so easy to implement new capabilities, I am revisiting some ideas I had rejected or ignored before.  The struggle I have is to decide when &lt;span style="font-style: italic;"&gt;enough is enough&lt;/span&gt;  before finally having a version 1.0 officially released.&lt;br /&gt;&lt;br /&gt;In any event, after reading some comments on &lt;a href="http://pyside.blogspot.com/2008/01/what-do-you-look-for-in-documentation.html"&gt;this post&lt;/a&gt; by Georg Brandl, I started thinking about adding a new option to test code embedded in documentation.  To quote from the comments on that post:&lt;br /&gt;&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;One thing that is seriously needed is the ability to run and test code snippets in some fashion. It's just too easy for documentation to get out of date relative to the code, and if you can effectively "unit test" your docs, you're in much better shape.&lt;br /&gt;&lt;br /&gt;And I don't mean like doctests, because not everything lends it self well to that style of testing. If it's possible to mark up some code as being for test fixture and some code as being what belongs in the doc, that would be good.&lt;/blockquote&gt;Alternatively, from another reader:&lt;br /&gt;&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;For me a key is being able to test code in the docs, and think the key is being able to "annotate" a code snipit with information about the context in which it should run, and the output it should give.&lt;/blockquote&gt;&lt;br /&gt;I think that Crunchy is a very good platform to implement this.  There are currently three complementary options I am considering, one of which I have started to implement.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The first option is to have something like the following [&lt;span style="font-size:78%;"&gt;note that while I use html notation, Crunchy is now capable of handling reStructuredText, including having the possibility of dealing with additional directives&lt;/span&gt;]:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic; color: rgb(204, 0, 0);"&gt;Some normally hidden code, used for setup:&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(204, 0, 0);"&gt;&amp;lt;pre title="setup_code name=first"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(204, 0, 0);"&gt;a=42&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(204, 0, 0);"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic; color: rgb(0, 0, 153);"&gt;Followed by the code sample to be tested:&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 0, 153);"&gt;&amp;lt;pre title="check_code name=first"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 0, 153);"&gt;print a &lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 0, 153);"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic; color: rgb(0, 102, 0);"&gt;And the expected output:&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0);"&gt;&amp;lt;pre title="code_output name=first"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0);"&gt;42&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0);"&gt;&amp;lt;/pre&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 0, 0);"&gt;Upon importing a document containing such examples, Crunchy would insert a button for each code sample allowing the user to test the code by clicking on the button, invoking the appropriate setup, and comparing with the expected output.  Alternatively, all such code samples in a document could be run by a single click on a button inserted at the top of a page.  A javascript alert could be used to inform the user that all tests passed - otherwise error messages could be inserted in the page indicating which tests failed or passed.&lt;br /&gt;&lt;br /&gt;This type of approach could, in theory, be used for other languages than Python; code could be executed by passing information to a separate process launched in a terminal window, with the result fed back into Crunchy as described above.&lt;br /&gt;&lt;br /&gt;A second approach is to use the same method used by doctest to combine code sample and expected output; the setup code could still be used as described above.&lt;br /&gt;&lt;br /&gt;A third approach, this one completely different, could be used for more general situation than simply for documentation code testing.&lt;br /&gt;&lt;br /&gt;Currently, the Python code needs to be embedded inside an html (or rst) document.  However, one could create links to code that lives inside separate Python files.  For example, one could have the following:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&amp;lt;pre title="python_file"&amp;gt;&lt;br /&gt;&amp;lt;span title="python_file_name"&amp;gt; file_path &amp;lt;/span&amp;gt;&lt;br /&gt;&amp;lt;span title="python_file_linenumbers"&amp;gt; some_range &amp;lt;/span&amp;gt;&lt;br /&gt;&amp;lt;/pre&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When viewing the above using a normal browser, one would see something like (using  a fictitious example)&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;../crunchy_dir/crunchy.py&lt;br /&gt;[1-3, 5, 7, 10-15]&lt;br /&gt;&lt;/pre&gt;However, when viewing the same page with Crunchy, the appropriate lines would be extracted from the file and displayed in the browser.  Alternatively, instead of specifying the line numbers, one could have a directive to extract a specific function/method/class as in&lt;br /&gt;&lt;br /&gt;&amp;lt;span title="python_file_function"&amp;gt; function_name &amp;lt;/span&amp;gt;&lt;br /&gt;&lt;br /&gt;which would instruct Crunchy to extract all the code for the function definition, and inserting it in the document.  By using such links, the code in the documentation would always (by definition) be kept in sync with the real code.   I realize that this is not exactly a novel idea but one whose potential could be extended by using Crunchy in ways never seen before.  However, this last approach will have to wait until after Crunchy version 1.0 has been released.&lt;br /&gt;&lt;br /&gt;What do you think of these ideas?&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/automated-documentation-code-testing.html' title='Automated documentation code testing'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=202455290431238091' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/202455290431238091/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/202455290431238091'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/202455290431238091'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-295340211968414753</id><published>2008-01-28T19:23:00.001-05:00</published><updated>2008-01-28T19:42:55.073-05:00</updated><title type='text'>Kudos to ActiveState</title><content type='html'>&lt;a href="http://activestate.com/"&gt;ActiveState&lt;/a&gt;, the company behind the &lt;a href="http://aspn.activestate.com/ASPN/Cookbook/Python"&gt;Python cookbook&lt;/a&gt; and many other useful and free resources, is a great supporter of free software.  Its free Komodo Edit is a nice piece of software, well worth trying.&lt;br /&gt;&lt;br /&gt;I started using &lt;a href="http://activestate.com/Products/komodo_edit/"&gt;Komodo Edit&lt;/a&gt; a few months after I switched from using Windows to using a Mac.  On Windows, my Python editor of choice was SPE.  However, I found that SPE, not being a native Mac application, had some small quirks that I found annoying.  After trying Textmate, praised by many Mac users, and Wing among others, I settled on the free Komodo Edit.  While I missed the class browser I had gotten used to with SPE, I found that Komodo was enough for my basic needs.&lt;br /&gt;&lt;br /&gt;After reading &lt;a href="http://pyjesse.disqus.com/do_you_use_an_python_code_analyzer/"&gt;this post &lt;/a&gt;by Jesse Noller, I started using pylint within Komodo and while I did not find any bugs (so far!) in my code, it did encourage me to improve the existing code.  The possibility of easily adding new tools to Komodo Edit lead me to try its more powerful sibling, &lt;a href="http://www.activestate.com/Products/komodo_ide/"&gt;Komodo IDE&lt;/a&gt;. Komodo IDE has an integrated debugger (something I had *never* used before for code development but that I will likely use more and more in the future)  and a code browser side bar which is even better than the one included with SPE.  After using it for about a week, I decided to treat myself and purchase a license for it before the trial license ended. However, since I found the price a bit steep for something to use just for fun, I inquired about available discounts.  I was told that, even though I did not use it for my work, I was eligible for an educational discount given that I work at a University.&lt;br /&gt;&lt;br /&gt;However, there was more to come...&lt;br /&gt;&lt;br /&gt;When I indicated that I intended to buy it online, I got an email telling me that I was actually eligible for a deeper discount since I had a license for an earlier version of Komodo Personal edition.  This was a total surprise for me. Here's what happened: more than two and a half year ago, ActiveState had a special promotion for open source developers to get a free license for Komodo Personal edition. I had taken advantage of this offer at the time and installed Komodo on my Windows computer.  However, I found it was comparable in functionality to SPE for which I had a slight preference.  As a result, I gave up on Komodo after trying it for about a week.&lt;br /&gt;&lt;br /&gt;Now, more than 2.5 years later, the friendly people at ActiveState reminded me that I had a valid (but free!) license and told me I could simply pay for an upgrade to what is in my opinion a much superior programming environment than the version I had a license for.&lt;br /&gt;&lt;br /&gt;Talk about friendly customer service!  Thank you ActiveState!</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/kudos-to-activestate.html' title='Kudos to ActiveState'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=295340211968414753' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/295340211968414753/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/295340211968414753'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/295340211968414753'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-938767466982977883</id><published>2008-01-23T21:58:00.000-05:00</published><updated>2008-01-24T06:32:50.629-05:00</updated><title type='text'>GHOP Python Related Success Story</title><content type='html'>Early on during Google's HOP contest, I joined the Python mentors group following a call for task suggestions, and submitted many Crunchy-related tasks.  I was amazed by the quality of some contributions.  As more potential mentors involved with other Python related projects joined in, I decided to quietly refrain from submitting more Crunchy related tasks.  Still, Crunchy got more than its share of contributions from students from all over the world.&lt;br /&gt;&lt;br /&gt;Today, one student posted a blog entry about a &lt;a href="http://pythonbytes.blogspot.com/2008/01/success-crunchy-presentation.html"&gt;Crunchy presentation&lt;/a&gt; he made to his class.  He describes it as a success - and I would agree.  However, it is clear to me that the success of his presentation is due by far more to Python's strength than to Crunchy itself.  I thought it was a very good example to use when advocating for the use of Python - and therefore, worth linking to.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/ghop-python-related-success-story.html' title='GHOP Python Related Success Story'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=938767466982977883' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/938767466982977883/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/938767466982977883'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/938767466982977883'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-9176412109266498324</id><published>2008-01-19T22:24:00.000-05:00</published><updated>2008-01-19T23:32:49.192-05:00</updated><title type='text'>More power and removing an option</title><content type='html'>One of the neat features of Crunchy, suggested to me by Andrew Dalke at Pycon 2007, is its ability to dynamically display images that are generated by some Python code.  The example given in the Crunchy distribution uses matplotlib.  However, the way this is done is slightly cumbersome.  First, some pre-existing vlam (&lt;span style="font-style: italic;"&gt;very little added markup&lt;/span&gt;) must already have been added to an html page, specifying the name of the image (e.g. foo.png) to be displayed.  This special vlam will result in an editor appearing on the page together with two buttons (one to execute the code, the other to load the image). Second, the Python code must be such that an image will be generated with that name.  By default, the image is saved in and retrieved from a special Crunchy &lt;span style="font-style: italic;"&gt;temp&lt;/span&gt; directory.&lt;br /&gt;&lt;br /&gt;While the approach used works, it does also mean that images can't be generated and displayed using a simple Python interpreter, nor can they be displayed from an arbitrary location.   At least that was the case until now.&lt;br /&gt;&lt;br /&gt;Prompted by a suggestion from Johannes, I wrote a very simple module whose core consists of only 7 Python statements, and which does away entirely with the cumbersome vlam image file option.  Images can now be loaded and displayed from anywhere using two lines of code:&lt;br /&gt;&lt;br /&gt;   &lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;import&lt;/span&gt; image_display&lt;br /&gt;   image_display.show(&lt;span style="font-style: italic;"&gt;path, [width=400, height=400]&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;And by &lt;span style="font-style: italic;"&gt;anywhere&lt;/span&gt;, I mean from any interactive Python element (interpreter, editor),&lt;br /&gt;and using any image source (local images and images on the web), like&lt;br /&gt;&lt;br /&gt;image_display.&lt;span class="output" id="out_4:7"&gt;&lt;span class="stdin"&gt;show('&lt;a href="http://imgs.xkcd.com/comics/python.png"&gt;http://imgs.xkcd.com/comics/python.png&lt;/a&gt;')&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;Furthermore, one can use this approach to create a "slide show" by alternating image_display.show() and time.sleep().&lt;br /&gt;&lt;br /&gt;Since there is no more need to use the old image_file option, it will be removed in the next Crunchy release.  I may have to give some more thoughts to the API for this new option (e.g. is there a better name than image_display?  Should I add a function for a slide show, giving a list of images and a time delay? etc.); suggestions are welcome.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/more-power-by-removing-option.html' title='More power and removing an option'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=9176412109266498324' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/9176412109266498324/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/9176412109266498324'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/9176412109266498324'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-7801725918698130895</id><published>2008-01-17T20:34:00.000-05:00</published><updated>2008-01-17T21:11:44.468-05:00</updated><title type='text'>100 posts, olpc, rst and Crunchy</title><content type='html'>This is the 100th post on this blog which I started to write a little over 3 years ago - shortly after I started my programming hobby.  And, as it so happens, I received two gifts in the past 24 hours:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;I received my give-one-get-one olpc in the mail today.&lt;/li&gt;&lt;li&gt;A student wrote a simple programs to add Crunchy-specific "directives" for docutils so that rst can be used to create Crunchy ready tutorials.  More on this below.&lt;/li&gt;&lt;/ul&gt;I had seen the olpc at Pycon 2007 but, not having tried it back then, I did not realise how small the keyboard really is.  I have fairly small hands but they are much too big to use the keyboard comfortably.  I thought of using it to write this blog entry but quickly gave up on that idea.&lt;br /&gt;&lt;br /&gt;It will take a while to fully explore the olpc.  I am extremely impressed by the quality of the screen.  However, it is a slow computer which apparently can only handle a "small" number of applications running concurrently - I managed to freeze it with about 8 applications running.  I seemed to remember from the Pycon presentation that the track pad had 2 (or 3, depending on how you count them) active region, but only the central one seems to be active.  Members of my family were surprise at the "plastic toy" appearance of the olpc but they all seem to be fairly impressed once they saw it running. &lt;br /&gt;&lt;br /&gt;Now, all I have to do is to figure out how to make Crunchy run on it. :-)&lt;br /&gt;&lt;br /&gt;Speaking of Crunchy, as part of Google's HOP contest, I had set up two tasks related to reStructured Text.  One of them was to write a plugin so that a rst file could be loaded, transformed into a html file (by docutils) and displayed by Crunchy.  This was done a while ago as &lt;a href="http://aroberge.blogspot.com/2007/12/restructuredtext-files-and-crunchy.html"&gt;I reported here&lt;/a&gt;.  However, when this is done, Crunchy treats all the code elements on a page (inside "pre" tags) the same way, which is specified via the variable crunchy.no_markup.  This does not allow for the same fine-tuning that is possible with the addition of vlam (very little added markup) to a normal html page.&lt;br /&gt;&lt;br /&gt;The second rst task was to write "directives" so that vlam could be inserted inside rst pages.  I had read quickly about rst directives and figured this would be fairly complicated.  From my superficial reading, I *thought* it would require a modification to docutils that would have to be incorporated into the core (or make a special version of docutils that incorporated those directives).   Of course this would make little sense.  In any event, a student wrote a 200 lines program that defined most required "rst directives" for Crunchy, allowing to take a rst file as input and output an html file.  All I had to do was to cut-and-paste the student's program into the existing rst plugin, change 2 lines of code, and I now have a fully working vlam-compatible rst loader for Crunchy.&lt;br /&gt;&lt;br /&gt;This will be part of the next Crunchy release.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/100-posts-olpc-rst-and-crunchy.html' title='100 posts, olpc, rst and Crunchy'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=7801725918698130895' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/7801725918698130895/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/7801725918698130895'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/7801725918698130895'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-8950875612943206184</id><published>2008-01-10T21:02:00.000-05:00</published><updated>2008-01-10T21:23:20.063-05:00</updated><title type='text'>Small tip for porting unit tests to Python 3.0</title><content type='html'>While working on increasing test coverage of Crunchy, I encountered a puzzling change when running doctest based unit tests under Python 3.0a and Python 2.5.   One test (of a function that was definitely too long) was failing under Python 3.0a1/2 with a single line containing the number 20 appearing in the output - in addition to all the other expected ones.  To make a long story short, the problem was linked to &lt;a href="http://www.python.org/dev/peps/pep-3116/"&gt;PEP 3116&lt;/a&gt;.  Using Python 3.0a1/2, when a file is written using ".write()", there is a return value corresponding to the number of bytes written; the "old" behavior was to return None.  In order to have doctest-based tests running successfully under both 2.x and 3.x, we need to replace things like&lt;br /&gt;&lt;br /&gt;f.write()&lt;br /&gt;&lt;br /&gt;by&lt;br /&gt;&lt;br /&gt;dummy = f.write()&lt;br /&gt;&lt;br /&gt;I understand that the plan is to backport many of the Python 3.0 features to Python 2.6 so as to ease the transition, and use an automated tool for the conversion.  I don't think that features from PEP 3116 will be implemented in Python 2.6, since they are very different from 2.5.  And I am doubtful that the conversion tool will take care of including a dummy assignment for functions that will now return a value different than None.  I am hoping that this post might end up saving a little bit of time for any reader that tries to migrate their code from 2.x to 3.0.&lt;br /&gt;&lt;br /&gt;On a different topic altogether, I have fixed the bug which resulted in removing the styles from remote web pages when using Python 3.0 in conjunction with Crunchy.  This will make Crunchy a more attractive tool to use in going through the official Python tutorial for Python 3.0.    For the moment, the Crunchy embedded interpreter still only works with Python 3.0a1 and not 3.0a2.  Hopefully I'll have this resolved in  new public release by Pycon 2008 so that Johannes can demonstrate it in his talk.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/small-tip-for-porting-unit-tests-to.html' title='Small tip for porting unit tests to Python 3.0'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=8950875612943206184' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/8950875612943206184/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/8950875612943206184'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/8950875612943206184'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-1447494242676533471</id><published>2008-01-07T19:52:00.000-05:00</published><updated>2008-01-07T20:36:27.054-05:00</updated><title type='text'>More encoding pains...</title><content type='html'>&lt;span style="font-weight: bold; font-style: italic;"&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-style: italic;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;It seems like every early January brings some new encoding pains...&lt;span style="font-weight: bold; font-style: italic;"&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-style: italic;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Eons&lt;/span&gt; ago (&lt;span style="font-size:78%;"&gt;less than a year&lt;span style="font-size:100%;"&gt;)&lt;/span&gt;&lt;/span&gt; I used to program on a Windows based computer.  My Windows user name was simply André, which is not surprising since it's my first name.  However, the observant reader may have noticed that my name requires one non-ASCII character.  Such a small detail...  that can cause so much annoyance.&lt;br /&gt;&lt;br /&gt;Two years ago, on January 6th, I &lt;a href="http://aroberge.blogspot.com/2006/01/note-to-self-about-site-customization.html"&gt;wrote about using site customization&lt;/a&gt; so that my favourite Python editor at the time (SPE) could deal with my user name. &lt;br /&gt;&lt;br /&gt;Last year, on January 3rd, &lt;a href="http://aroberge.blogspot.com/2007/01/unicode-headaches-and-solution.html"&gt;I wrote about how Crunchy dealt with encoding issues&lt;/a&gt; in a way that was independent of any site customizations.  At the time, &lt;a href="http://www.blogger.com/profile/13103273429450824594"&gt;an astute reader&lt;/a&gt; made the following comment (which I had forgotten until today, when I decided to write this blog entry):&lt;br /&gt;&lt;br /&gt;&lt;blockquote style="font-style: italic;"&gt;Without having looked at the rest of your code, so I might be completely off here, this somehow looks wrong:&lt;br /&gt;&lt;br /&gt;result = result.decode(sys.getdefaultencoding()).encode('utf-8')&lt;br /&gt;&lt;br /&gt;The reason I say this is that you're decoding and encoding in the same place. Since Python unicode support is so good, it's generally a good idea to decode to unicode any use input you get as early as possible, and to encode only as late as possible when outputting strings. Since you're doing complicated web ui stuff here, so it may be that you're not doing anything with 'result' between input and returning it to the browser, but if you are, the string should have already been decoded by the time it gets to this line. &lt;span style="font-weight: bold;"&gt;Otherwise this will bite you anytime you try to do anything with the string like simple concatenation. &lt;/span&gt;&lt;span style="font-size:78%;"&gt;[emphasis added]&lt;/span&gt;&lt;br /&gt;&lt;/blockquote&gt;Of course, since Crunchy was working properly, I quickly dismissed that comment.  With the way everything was implemented, Crunchy was working just fine...  In fact, to this day, if you download the latest public release (0.9.8.6), everything works just fine - even if your user name includes non-ASCII characters.&lt;br /&gt;&lt;br /&gt;However ... in adapting Crunchy to works with Python 3.0, &lt;span style="font-weight: bold;"&gt;I do things with the various strings like simple concatenation &lt;/span&gt;... and, of course, this cause some problems as I found out when I "borrowed" the old Windows computer from my daughter to try the latest changes I had made. &lt;br /&gt;&lt;br /&gt;It. Did. Not. Work.&lt;br /&gt;&lt;br /&gt;Ok, so I have two possible solutions:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Trade with my daughter for a while, letting her use my MacBook (which she loves!) while I use the "old" Windows desktop.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Create an account with an accented name on my MacBook.&lt;/li&gt;&lt;/ol&gt;Well, as much as I love my daughter, I could not face the pain of going back to using the Windows desktop as my main computer.  So, solution 2 was an easy choice.&lt;br /&gt;&lt;br /&gt;Except that it wasn't....&lt;br /&gt;&lt;br /&gt;My account name on the mac is my full name (André Roberge).  Hmmm... this has already a non-ASCII character.    But my home directory is "andre" - no accent.  Under Mac OS, a user has a full name that appears in the login window, and a short name used for the root directory (/Users/andre in my case).  When I tried to create a new account with a non-ASCII character in the short name, it just beeped and refused to enter it.&lt;br /&gt;&lt;br /&gt;In search for an answer, I posted on three Mac related forums, got either no answer or some unhelpful and wrong answer on two of them ... I was considering posting on the Python list, but, fortunately, I eventually got a useful answer.&lt;br /&gt;&lt;br /&gt;So, if you are thinking of writing i18n applications that either can run from any directory or that save information in the user's default directory, or both, and you want to make sure that it will work on a Windows computer, here's how you can do it on a Mac (under OS X 10.5):&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Create a test account user the account manager under any name of your choosing; however, the "short name" will have to be ASCII only (at this stage).&lt;/li&gt;&lt;li&gt;From the account manager, ctrl-click on the account after it has been created; this will bring an advanced dialog.&lt;/li&gt;&lt;li&gt;Edit the advanced dialog to change the short name, and the home directory, to the desired value.  I chose the name "accentué"  (self-referencing name, if you know French).  Note that doing so does not change the actual name of the directory.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Go to a terminal window and do "sudo mv old_name new_name" to change the name of the home directory that was created at step 1.&lt;/li&gt;&lt;/ol&gt;After I did all this, the development version of Crunchy did not work from the new account.  This pleased me very much: it likely will meant that I do not have to trade computers with my daughter to continue working on Crunchy. ;-)</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2008/01/more-encoding-pains.html' title='More encoding pains...'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=1447494242676533471' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/1447494242676533471/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/1447494242676533471'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/1447494242676533471'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-4134869329651483982</id><published>2007-12-30T21:21:00.001-05:00</published><updated>2007-12-30T22:11:28.633-05:00</updated><title type='text'>More about Crunchy running under Python3.0a1</title><content type='html'>Just in time for the new year, and after a major reorganization of Crunchy's code to make it easier to write more unit tests for it, I did manage to get all of Crunchy's core functionality working under Python 3.0a1.  Crunchy can now import html files that are not conforming to strict xml convention (i.e. not having closing tags for some elements) and thus create problems for ElementTree.  The way it does that is to launch an external process under Python 2.5 (or whatever default version that is invoked via typing "python" at a terminal - but it has to be a 2.x version for it to work).  This process imports the file, "cleans" it (using a combination of BeautifulSoup, ElementTree and Crunchy's security module), and saves it locally.   After a delay, Crunchy loads up the cleaned up file and display it.  In this process, most of the styling is unfortunately removed.  :-(&lt;br /&gt;&lt;br /&gt;However, the good news is that I was able to load up the &lt;a href="http://docs.python.org/dev/3.0/tutorial/index.html"&gt;official 3.0 Python tutorial&lt;/a&gt; (work in progress) and try it out using Crunchy.  I did find out one limitation of using Crunchy to do so.  Crunchy encodes the Python output using utf-8 before forwarding to the browser.  So, instead of having things like &lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;b'Andr\xc3\xa9'&lt;/span&gt; appearing on the screen, it would be converted to &lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;André&lt;/span&gt;.  Thus, Crunchy is not a very good platform to teach about encoding/decoding of strings.  For other aspects though, it is an ideal tool (if I may say so) for going through the Python tutorial: there is no need to switch back and forth between the browser and a separate Python environment to try things out.  I still hope to have the time and energy to go through the entire 3.0 tutorial (something I have never done before, for 2.x) and see if I can find any bugs or come up with useful suggestions.&lt;br /&gt;&lt;br /&gt;All I have left to do for the next release is to write up some documentation/tutorial on the new Turtle module and on launching Crunchy under Python3.0a1.   With a bit of luck, this will all be finished before the end of the year.&lt;br /&gt;&lt;br /&gt;In addition to the code reorganization mentioned above, I did fix a few bugs and made an improvement on Crunchy's Borg interpreters.  For those that aren't familiar with it, Crunchy allows to embed a number of interpreters (html input box communicating with the Python backend) within a single page.  These interpreters can either be isolated one from another (meaning that a variable defined in one interpreter is only known by that interpreter) or can share a common environment (aka Borg interpreters).   Normally, in a single user mode, using a single open tab in Firefox, every time a new page is displayed, the Borg interpreters are effectively reset (the old ones are garbage collected and the new ones are created from an empty slate).&lt;br /&gt;&lt;br /&gt;Previously, if one were to have multiple users (or multiple tabs open from the same user) on the same Crunchy server, all Borg interpreters ended up sharing the exact same state.  This is not very convenient if two users are trying to use the same variable names!    I had planned to address this "feature" at some point after the 1.0 release but was forced into it earlier due to the 3.0a1 work.  The reason is the following.&lt;br /&gt;&lt;br /&gt;To create "Borg interpreters", I was using the Borg idiom invented by Alex Martelli.  It goes as follows:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;class Borg(object):&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    '''Borg Idiom, from the Python Cookbook, 2nd Edition, p:273&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    Derive a class form this; all instances of that class will share the&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    same state, provided that they don't override __new__; otherwise,&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    remember to use Borg.__new__ within the overriden class.&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    '''&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    _shared_state = {}&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;    def __new__(cls, *a, **k):&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;        obj = object.__new__(cls, *a, **k)&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;        obj.__dict__ = cls._shared_state&lt;/span&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 102, 0); font-weight: bold;"&gt;        return obj&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;When using this idiom in a standard program under 3.0a1/2, a deprecation warning is raised about &lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;object.__new__()&lt;/span&gt; not taking any argument.  When I was trying to make use of this idiom in Crunchy running under 3.0a1/2, the deprecation warning was actually replaced by an exception.  Rather than trying to silence this exception, I decided to take a different approach and used instead the following:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;class BorgGroups(object):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    '''Inspired by the Borg Idiom, from the Python Cookbook, 2nd Edition, p:273&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    to deal with multiple Borg groups (one per crunchy page)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    while being compatible with Python 3.0a1/2.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    Derived class must use a super() call to work with this properly.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    '''&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    _shared_states = {}&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    def __init__(self, group="Borg"):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;        if group not in self._shared_states:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;            self._shared_states[group] = {}&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;        self.__dict__ = self._shared_states[group]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic; color: rgb(51, 255, 51);"&gt;# The following BorgConsole class is defined such that all instances&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic; color: rgb(51, 255, 51);"&gt;# of an interpreter on a same html page share the same environment.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;class BorgConsole(BorgGroups, SingleConsole):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    '''Every BorgConsole share a common state'''&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;    def __init__(self, locals={}, filename="Crunchy console", group="Borg"):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;        super(BorgConsole, self).__init__(group=group)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 102, 0);"&gt;        SingleConsole.__init__(self, locals, filename=filename)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;The "group" variable is taken to be a unique id generated by Crunchy each time it processes a given html page.  Thus, each page loaded by a different user (or the same user, at a different time) from the same Crunchy server will result in a unique set of Borg interpreters.&lt;br /&gt;&lt;br /&gt;To be fair, I must admit that I did not come up with this solution totally on my own.  A while ago, I asked for something like this on comp.lang.python. (Those interested in the details should search for "Borg rebellion".)  I just derived the above solution from some suggestions made at that time.&lt;br /&gt;&lt;br /&gt;Finally, in addition to all this, I found out a bug in code.py for Python 3.0a1/2.  I tried to send an email to the python-3000 mailing list about it, but it was held up, waiting for a moderator approval for a few days.  So, I canceled it and filed a &lt;a href="http://bugs.python.org/issue1707"&gt;bug report&lt;/a&gt; instead (which I should have done in the first place) on the bug tracker.  I still haven't seen any follow up - perhaps due to the title I gave it.  The bug is actually very easy to fix - three lines of code need to be replaced by a single one.  The solution is related to my only other &lt;a href="http://www.python.org/dev/peps/pep-3111/"&gt;"official" contribution&lt;/a&gt; to Python to date.   Hopefully, by this time next year, I'll have learned enough to contribute more to Python.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/more-about-crunchy-running-under.html' title='More about Crunchy running under Python3.0a1'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=4134869329651483982' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/4134869329651483982/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/4134869329651483982'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/4134869329651483982'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-4287350583461503755</id><published>2007-12-27T21:30:00.001-05:00</published><updated>2007-12-27T22:14:18.654-05:00</updated><title type='text'>Crunchy and Python 3.0a2</title><content type='html'>Continuing with my experiment of adapting Crunchy to Python 3.0, I managed to get Crunchy to start with Python 3.0a2 and get some code running from the editor - but not from the interpreter, nor the doctest.  Most of the problems I have are dealing with bytes-to-string conversion and string-to-bytes.  As mentioned by Guido van Rossum &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208549"&gt;last June&lt;/a&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;/blockquote&gt;&lt;ul style="font-style: italic;"&gt;&lt;li&gt;&lt;span style="font-size:85%;"&gt;We're switching to a model known from Java: (immutable) text strings are Unicode, and binary data is represented by a separate mutable "bytes" data type.  In addition, the parser will be more Unicode-friendly: the default source encoding will be UTF-8, and non-ASCII letters can be used in identifiers&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;Later on, in a comment from that post, we find:&lt;br /&gt;&lt;ul style="font-style: italic; font-family: times new roman;"&gt;&lt;li&gt;&lt;span style="color: rgb(0, 0, 0);"&gt;        &gt; In your presentation last night you had one slide which&lt;br /&gt;&gt; talked about the "str" vs "bytes" types in Python 3000. On&lt;br /&gt;&gt; the bottom of that slide was something like:&lt;br /&gt;&gt;&lt;br /&gt;&gt; str(b"asdf") == "b'asdf'"&lt;br /&gt;&gt;&lt;br /&gt;&gt; However, in discussing this slide (very briefly) you said&lt;br /&gt;&gt; that a type constructors like "str" could be used to do&lt;br /&gt;&gt; conversion. It seems like "str" is behaving more like&lt;br /&gt;&gt; "repr" in this case, which seems unusual and less useful&lt;br /&gt;&gt; to me. Was this a typo, or is this actually the way it's&lt;br /&gt;&gt; supposed to work? What's the rationale?&lt;br /&gt;&lt;br /&gt;To be honest, this is an open issue. The slide was wrong compared to the current implementation; but the implementation currently defaults to utf8 (so str(b'a') == 'a'), which is not right either. The problem is that there are conflicting requirements: str() of any object should ideally always return something, but we don't want str() to assume a specific default encoding.&lt;br /&gt;&lt;br /&gt;To be continued...&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;This change seems innocuous enough...&lt;br /&gt;&lt;br /&gt;As a web server, Crunchy sends to and receives information from the browser as "binary data" or "bytes".  As a generalized Python interpreter, Crunchy manipulates the information as "strings".  It appears that the "bytes" implementation is done much more completely in Python 3.0a2 than it was in Python 3.0a1.  And this is the source of many problems.&lt;br /&gt;&lt;br /&gt;For example, Crunchy sends from the browser some information about the path to which a Python file should be saved and its content as follows:&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 0, 153); font-weight: bold;"&gt;'/Users/andre/.crunchy/temp.py&lt;span style="color: rgb(0, 153, 0);"&gt;_::EOF::_&lt;/span&gt;from Tkinter import *\nroot = Tk()\nw = Label(root, text="Crunchy!")\nw.pack()\nroot.mainloop()'&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This is sent as a binary stream which needs to be converted to the string written above.  This conversion is done via str(...).  Using Python 3.0a1 (and 2.4 and 2.5), the result was as above; splitting the string gave the following:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(0, 0, 153);"&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;[&lt;/span&gt;'/Users/andre/.crunchy/temp.py'&lt;span style="color: rgb(51, 204, 0);"&gt;, &lt;/span&gt;'from Tkinter import *\nroot = Tk()\nw = Label(root, text="Crunchy!")\nw.pack()\nroot.mainloop()'&lt;span style="color: rgb(51, 204, 0);"&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now, with Python 3.0a2, it gets slightly more complicated.  The first string acquires a "b" prefix upon conversion (as mentioned in the comment from Guido's blog mentioned before). After splitting, the result is&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold; color: rgb(51, 204, 0);"&gt;[&lt;/span&gt;&lt;span style="color: rgb(0, 0, 153); font-weight: bold;"&gt;"b'/Users/andre/.crunchy/temp.py"&lt;/span&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;,&lt;/span&gt; &lt;/span&gt;&lt;span style="color: rgb(0, 0, 153); font-weight: bold;"&gt;'from Tkinter import *\\nroot = Tk()\\nw = Label(root, text="Crunchy!")\\nw.pack()\\nroot.mainloop()\''&lt;/span&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt; So, we now have a first string with a "&lt;span style="font-weight: bold; color: rgb(0, 0, 153);"&gt;b'&lt;/span&gt;" prefix embedded in it, and a second one without. It seems that each case will have to be handled carefully on its own.  And I suspect more problems will show up as we get closer to the final 3.0 release.&lt;br /&gt;&lt;br /&gt;I know, I know, I'm really not following the "recommended" practice, as quoted on Guido's blog.  I should probably wait first for Python 2.6 to come out.  Then, I should have a complete unit test coverage and use the conversion tool to create a Python 3.0 version ....   However, I am not convinced that the conversion tool will be smart enough to know when a function (that I write) expect a "str" object and when it expect a "byte" one.  Furthermore, the few unit tests I had worked fine under both Python 2.5 and 3.0 ... but some functions that I had written with the expectation that they would receive some string arguments did not work in "production code", as they were getting some bytes arguments.  And this failed completely silently...&lt;br /&gt;&lt;br /&gt;If I had to give some advice to someone about creating Python programs that can work with both Python 2.x and Python 3.x, I would say like Guido: &lt;span style="font-weight: bold;"&gt;don't&lt;/span&gt;.  :-) Unless of course you are like me and are doing this for fun and to get to learn about the differences between Python 2.x and 3.x along the way.   But then, "be prepared for the unexpected" like the following: turning on a few print statements (via a "debug flag") can result in breaking some code; turn them off and the code works again... Yes, it did happen to me - I still have to figure out how...</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/crunchy-and-python-30a2.html' title='Crunchy and Python 3.0a2'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=4287350583461503755' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/4287350583461503755/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/4287350583461503755'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/4287350583461503755'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-6160583254716289558</id><published>2007-12-27T15:27:00.001-05:00</published><updated>2007-12-27T15:50:07.399-05:00</updated><title type='text'>Crunchy and Python 3.0a1</title><content type='html'>&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://bp3.blogger.com/_KpSgL5zKAvE/R3QLJdeYK4I/AAAAAAAAAAk/mDfK1uotPZs/s1600-h/crunchy-Py3.0a1.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://bp3.blogger.com/_KpSgL5zKAvE/R3QLJdeYK4I/AAAAAAAAAAk/mDfK1uotPZs/s400/crunchy-Py3.0a1.png" alt="crunchy running under Python 3.0a1" id="BLOGGER_PHOTO_ID_5148752531150089090" border="0" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;It is often said that a picture is worth a thousand words...&lt;br /&gt;&lt;br /&gt;I have managed to make Crunchy run under Python 3.0a1.  Some of the features are not working but the interpreter and the editor work.  The turtle module I have been working on also works "nicely" (read: as slow as before) with this new Python version.  Unfortunately, when it is run under Python 3.0a1, Crunchy can not load most pages - including those of the official Python 3.0 tutorial.  The reason is that is uses ElementTree to parse pages and it is unforgiving when it comes to having unclosed tags (as in &amp;lt;link&amp;gt; and &amp;lt;meta...&amp;gt; for example); it also seems to not be able to handle the &amp;lt;script&amp;gt;s that are included on the page.  I have not yet found a way to reliably "clean" the pages before parsing them with ElementTree.  While I believe that I should be able to do so with a bit more work, there is a bigger problem...&lt;br /&gt;&lt;br /&gt;Unfortunately, Crunchy does not run under Python 3.oa2, and the error messages I get have not been too helpful in figuring out the error.  However, perhaps this is due to a faulty installation.  What makes me think so is that when I start a 3.0a2 session at a terminal, I get an error message when I use exit().  This is most unexpected.&lt;br /&gt;&lt;br /&gt;In any even, the next release should include the new crunchy turtle module and be usable with 3.0a1.   Perhaps Johannes, or some curious user, will be able to figure out how to make it run under 3.0a2 as well.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/crunchy-and-python-30a1.html' title='Crunchy and Python 3.0a1'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=6160583254716289558' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/6160583254716289558/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/6160583254716289558'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/6160583254716289558'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-5009822449100911277</id><published>2007-12-25T15:18:00.001-05:00</published><updated>2007-12-25T15:18:02.784-05:00</updated><title type='text'>Slow turtle ... in time for Xmas
</title><content type='html'>One of the task assigned in Google's HOP contest was to design a simple turtle graphics module for Crunchy.  This was done successfully by a student as a prototype.  This prototype had some unfortunate limitations in terms of number of turtles and simultaneous graphics canvas existing on the same page, but it did give me the impetus to use the student code as a proof-of-concept and implement a more complete turtle module for Crunchy.&lt;br /&gt;&lt;br /&gt;Playing with turtles, and trying to draw fairly complex shapes, made me realize that the combination of using an html canvas and the Crunchy comet communication makes for an extremely &lt;span style="font-weight: bold;"&gt;slow&lt;/span&gt; turtle. It would be really nice to  find a better (faster) way.&lt;br /&gt;&lt;br /&gt;The next Crunchy release should include that turtle module ... and an additional bonus: Crunchy can now be launched successfully using either Python 2.5 (or 2.4) and Python 3.0a1.  And the turtle module works with both.&lt;br /&gt;&lt;br /&gt;At the moment, not all of Crunchy's features are supported when using Python 3.0.  However, this should no longer be the case by the time version 1.0 comes out.&lt;br /&gt;&lt;br /&gt;And, for those that might be tempted to point out Guido's blog entry about not making programs compatible with both Python 2.x and 3.x, please don't bother.  I realize that it is not wise in general to try to do so.  However, given Crunchy's design philosophy to make it as easy for students/teachers/tutorial writers to use - it just does make sense: download, unzip, double-click; nothing else should be needed to start having fun with Python - no matter what new Python version gets installed.&lt;br class="khtml-block-placeholder"&gt;&lt;br /&gt;        &lt;br&gt;</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/slow-turtle-in-time-for-xmas.html' title='Slow turtle ... in time for Xmas
'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=5009822449100911277' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/5009822449100911277/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/5009822449100911277'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/5009822449100911277'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-6655524594848300031</id><published>2007-12-18T22:22:00.000-05:00</published><updated>2007-12-19T06:04:53.990-05:00</updated><title type='text'>(NOT) Bitten by PEP 3113</title><content type='html'>&lt;span style="font-weight: bold; color: rgb(0, 0, 153);"&gt;UPDATE:  The comments left on this post (1 and 3) in particular corrected my misreading of PEP 3113.  There is no such wart as I describe in Python 3.0.  I should have known better than to question GvR and friends. :-)  &lt;/span&gt;&lt;span style="color: rgb(0, 0, 153);"&gt;I'm leaving this post as a reference.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In trying to make Crunchy useful &amp;amp; interesting for beginning programmers to learn Python, I designed a small graphics library following some "natural" notation.  As an aside, Johannes Woolard is the one who made sure that this library could be easily used interactively within Crunchy.  I mention his name since too many people seem to assume that I am the only one involved in Crunchy's design.  Anyway, back to the library...&lt;br /&gt;&lt;br /&gt;In that library, the function used to draw a line between two points uses the syntax&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;line(&lt;/span&gt;(x1, y1),  (x2, y2)&lt;span style="color: rgb(51, 204, 0); font-weight: bold;"&gt;&lt;span style="color: rgb(0, 153, 0);"&gt;)&lt;/span&gt;   &lt;/span&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;&lt;span style="color: rgb(0, 0, 0);"&gt;&lt;br /&gt;&lt;br /&gt;      for example:   &lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;line(&lt;/span&gt;(100, 100),  (200, 200)&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;) &lt;span style="color: rgb(51, 51, 255);"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;which should be familiar to everyone.  Unfortunately, following the implementation of &lt;a href="http://www.python.org/dev/peps/pep-3113/"&gt;PEP 3113&lt;/a&gt; in Python 3.0, this syntax is no longer allowed.  This is ... annoying!  There are two alternatives I can use:&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;line(&lt;/span&gt;x1, y1, x2, y2&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;)&lt;br /&gt;&lt;/span&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;&lt;span style="color: rgb(0, 0, 0);"&gt;&lt;br /&gt;   for example: &lt;span style="font-weight: bold; color: rgb(0, 153, 0);"&gt;line(&lt;/span&gt;100, 100, 200, 200&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;or&lt;br /&gt;&lt;br /&gt;&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;line(&lt;/span&gt;point_1,  point_2&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;where point_a = (x_a, y_a).  &lt;span style="color: rgb(51, 51, 255);"&gt;&lt;span style="font-weight: bold;"&gt;Update: with this second definition, it will be possible to invoke the function as &lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: rgb(51, 204, 0);"&gt;&lt;span style="color: rgb(0, 0, 0);"&gt;&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;line(&lt;/span&gt;(100, 100),  (200, 200)&lt;span style="color: rgb(0, 153, 0); font-weight: bold;"&gt;) &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Of course, either of these two option is easy to implement (and is going to be backward compatible with Python 2k).  However, I don't find either one of them particularly clear for beginners (who might be familiar with the normal mathematical notation) and &lt;span style="color: rgb(51, 51, 255);"&gt;&lt;span style="font-weight: bold;"&gt;do not&lt;/span&gt; &lt;/span&gt;consider this a (small) wart of Python 3k.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/bitten-by-pep-3113.html' title='(NOT) Bitten by PEP 3113'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=6655524594848300031' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/6655524594848300031/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/6655524594848300031'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/6655524594848300031'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-4668673239468363338</id><published>2007-12-18T19:00:00.001-05:00</published><updated>2007-12-18T19:11:45.354-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><category scheme='http://www.blogger.com/atom/ns#' term='ghop'/><title type='text'>reStructuredText files and Crunchy</title><content type='html'>Crunchy can now handle reStructuredText (.rst) files in the same way it can process plain html ones!  This requires the user to have docutils installed - which is normally the case for anyone that writes .rst files.&lt;br /&gt;&lt;br /&gt;The test coverage for Crunchy is slowly improving.  Currently, 10 modules are mostly covered by doctest-based unit tests, out of approximately 40.  Since I make use of .rst files to keep the unit tests, these can now be browsed "pleasantly" using Crunchy itself.&lt;br /&gt;&lt;br /&gt;Furthermore ... all the unit tests written so far work under Python 2.4, Python 2.5, and ... Python 3.0a1!   This required some tedious rewriting of some parts of the code but the end result is well worth it - if only to really learn about differences between Python 2.5 and Python 3.0.&lt;br /&gt;&lt;br /&gt;One thing that I found, which will be no surprise to TDD aficionados, is that code written without testing in mind can be quite tricky to write comprehensive tests for.  Add to this the extra complication of making that code run under two incompatible Python versions, and you are on your way to major headaches.  It's a good thing I am doing this only for fun!</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/restructuredtext-files-and-crunchy.html' title='reStructuredText files and Crunchy'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=4668673239468363338' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/4668673239468363338/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/4668673239468363338'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/4668673239468363338'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-4055726983078611596</id><published>2007-12-07T23:04:00.000-05:00</published><updated>2007-12-07T23:19:21.269-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><category scheme='http://www.blogger.com/atom/ns#' term='ghop'/><title type='text'>Launching Python 3.0 program from Crunchy running under Python 2.5</title><content type='html'>As part of Google's Highly Open Participation contest, Michele Mazzoni completed the task of creating a new option for Crunchy: one can now launch &lt;span style="font-size:78%;"&gt;(starting with the next release of Crunchy - 0.9.8.5&lt;/span&gt;) a program using a different version of Python than the one used by Crunchy itself.  While I had suggested that the alternate Python version could be set via the configuration options for Crunchy (usually accessible from a Python interpreter), Michele had the brilliant idea to add a simple input box where one can specify the path (or 'alias') of the Python version used right on the page where the program is launched from.  This makes it extremely easy to change the interpreter version used to launch a user written program.&lt;br /&gt;&lt;br /&gt;Michele has prepared a screencast demonstrating this, which should appear on &lt;a href="http://showmedo.com/"&gt;ShowMeDo&lt;/a&gt; hopefully soon.&lt;br /&gt;&lt;br /&gt;Thank you Michele - and thank you Google!</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/launching-python-30-program-from.html' title='Launching Python 3.0 program from Crunchy running under Python 2.5'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=4055726983078611596' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/4055726983078611596/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/4055726983078611596'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/4055726983078611596'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-1022637696665248216</id><published>2007-12-04T06:50:00.000-05:00</published><updated>2007-12-04T18:02:02.437-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><title type='text'>More results from GHOP</title><content type='html'>Google's Highly Open Participation (GHOP) contest is attracting a lot of attention from the right people: pre-university students.  The PSF is one of ten organizations mentoring students working on Python-related projects.  Since I submitted tasks suggestions early on and volunteered to help following a call for volunteers from Titus Brown, Crunchy has benefited from  many students contributions.  Crunchy's messages have been translated in Estonian, Macedonian, Polish and Italian with, hopefully, more translations to come.  Some new unit tests have been added with more to come.  There may be a couple of nice surprises coming out soon too :-)&lt;br /&gt;&lt;br /&gt;While other projects have also benefited from GHOP's students contributions, there could be more.  If you have some good ideas for mini-projects (doable in 3-5 days, at a couple of hours per day with perhaps one full day), your suggestions would most likely be most welcome.  Just check out the &lt;a href="http://groups.google.com/group/ghop-python"&gt;GHOP Python discussion group&lt;/a&gt;.  And, if you would like to join the (too small) ranks of Python mentors, please do; we need all the help we can get.</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/12/more-results-from-ghop.html' title='More results from GHOP'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=1022637696665248216' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/1022637696665248216/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/1022637696665248216'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/1022637696665248216'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9266717.post-3474551656659995981</id><published>2007-11-30T21:09:00.000-05:00</published><updated>2007-11-30T21:13:29.061-05:00</updated><title type='text'>First Crunchy screencast</title><content type='html'>I finally got around to produce a &lt;a href="http://showmedo.com/videos/video?name=1430000&amp;amp;fromSeriesID=143"&gt;first Crunchy screencast&lt;/a&gt;.  Since Crunchy is an interactive program, I thought I should do screencasts that reproduced the interactive feel: that is to say, I would record a live, more or less improvised session.  This means that the screen cast is not as polished as it could be - an even has a few minor mistakes in it.  Still, I think it gives a good (superficial) overview of what Crunchy is capable of.&lt;br /&gt;&lt;br /&gt;What do you think?</content><link rel='alternate' type='text/html' href='http://aroberge.blogspot.com/2007/11/first-crunchy-screencast.html' title='First Crunchy screencast'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9266717&amp;postID=3474551656659995981' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/3474551656659995981/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://aroberge.blogspot.com/feeds/posts/default/3474551656659995981'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9266717/posts/default/3474551656659995981'/><author><name>André</name><uri>http://www.blogger.com/profile/08131391818998844540</uri><email>noreply@blogger.com</email></author></entry></feed>