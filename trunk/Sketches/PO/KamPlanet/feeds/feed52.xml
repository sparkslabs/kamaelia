<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-28236292</id><updated>2007-12-04T16:06:11.783Z</updated><title type='text'>Crunchy</title><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>14</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-28236292.post-2579990892544816455</id><published>2007-05-17T22:31:00.001+01:00</published><updated>2007-05-18T18:29:03.143+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='sourceforge'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='cgi'/><title type='text'>Python CGI Howto</title><content type='html'>I'm trying to use this blog as a place to document my new experiences with Python: some of them are very basic (like this post) and some are somewhat more advanced (for example the internal workings of &lt;a href="http://code.google.com/p/crunchy"&gt;Crunchy&lt;/a&gt;). So please don't be surprised at my "noobie" take on some things...&lt;br /&gt;&lt;br /&gt;Anyway, the other day I was playing around with &lt;a href="http://hacketyhack.net"&gt;HacketyHack&lt;/a&gt; (just to &lt;span style="font-style:italic;"&gt;know my enemy&lt;/span&gt;, as it were). Overall, I was quite impressed by it - although it does have slightly different aims to Crunchy. One of the best "features" of HacketyHack is its overall polish, and this was largely due to its excellent website. So I decided to make use of the Sourceforge webspace that Crunchy has had for a while (it used to be our main site) and at the same time learn how CGI works.&lt;br /&gt;&lt;br /&gt;In case you didn't know, CGI stands for &lt;span style="font-style:italic;"&gt;Common Gateway Interface&lt;/span&gt; and allows web pages to be generated on the fly by arbitrary programs. CGI works by literally sending printed output from the program down a pipe to the user's browser. Python, of course, has libraries to make CGI scripting easy. Here is a very simple python CGI script:&lt;br /&gt;&lt;pre title="py_code"&gt;&lt;br /&gt;#!/usr/bin/python&lt;br /&gt;import cgi&lt;br /&gt;&lt;br /&gt;cgi.test()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;I know that normally you wouldn't worry about that first line, but for CGI scripts it is absolutely essential! (without it you get an &lt;span style="font-style:italic;"&gt;Internal Server Error&lt;/span&gt;). The second line imports Python's special CGI helper library and which includes a useful test function that we call in the final line. To make it work you have to place this script in your &lt;span style="font-style:italic;"&gt;cgi-bin/&lt;/span&gt; directory and give it global read and execute permissions using the *nix command:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;$ chmod +rx &lt;span style="font-style:italic;"&gt;filename&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Once you've done this you can visit the page in your browser (it will probably be at a path something like &lt;span style="font-style:italic;"&gt;/cgi-bin/test.py&lt;/span&gt;, depending on how you named your script). You should see a detailed description of the environment in which you're script is running, but it won't look very pretty.&lt;br /&gt;&lt;br /&gt;Writing a proper hello world CGI script is very simple, it looks like this:&lt;br /&gt;&lt;pre title="py_code"&gt;&lt;br /&gt;#!/usr/bin/python&lt;br /&gt;&lt;br /&gt;print "Content-type: text/html"&lt;br /&gt;print&lt;br /&gt;&lt;br /&gt;print "&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello World&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Some more explanation: we don't actually need the cgi helper library here, so we don't load it. The first line of python code prints out a MIME-type that tells the browser what is coming next, then we print a blank line to indicate that we have finished generating headers, finally we print out the HTML code that we want to send.&lt;br /&gt;&lt;br /&gt;Of course this is just a very short introduction to CGI scripting with Python, and if you want to create a larger dynamic website in Python you're probably better off using one of the Python web frameworks (like &lt;a href="http://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt; or &lt;a href="http://pylonshq.com/"&gt;Pylons&lt;/a&gt;). One day I might write a post about them...</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2007/05/python-cgi-howto.html' title='Python CGI Howto'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=2579990892544816455' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/2579990892544816455/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/2579990892544816455'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/2579990892544816455'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-3749415011117756944</id><published>2007-05-03T09:17:00.000+01:00</published><updated>2007-05-04T16:41:13.892+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='eclipse'/><category scheme='http://www.blogger.com/atom/ns#' term='svn'/><title type='text'>SVN Merging using SubClipse</title><content type='html'>Up until a few days ago I was laboriously merging in changes in Subclipse by hand: copying files across manually, trying to make sure I didn't miss anything. Then I discovered the merge tool: Now I can merge in complex changes that would have taken hours in just a few minutes.&lt;br /&gt;&lt;br /&gt;The process is remarkably simple: Start by right click the root of the tree that you want the code to be merged into (in the file browser) and go to &lt;span style="font-style:italic;"&gt;Team -&gt; Merge&lt;/span&gt;. This gives you a somewhat unintuitive dialog: it took me a while to figure out that it was only asking for a source to merge from (even though one section does say &lt;span style="font-style:italic;"&gt;To:&lt;/span&gt;). For most reasonable cases you want to use the same SVN path in the &lt;span style="font-style:italic;"&gt;From:&lt;/span&gt; and the &lt;span style="font-style:italic;"&gt;To:&lt;/span&gt; sections. In the &lt;span style="font-style:italic;"&gt;From&lt;/span&gt; revision box you will want to put the revision which you last merged in, and in the &lt;span style="font-style:italic;"&gt;To&lt;/span&gt; section select &lt;span style="font-style:italic;"&gt;Head Revision&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;Now you're ready to go: just hit &lt;span style="font-style:italic;"&gt;Merge&lt;/span&gt; and SVN will work its magic (although it might take a while - be patient). Once it has finished it will display a log of its actions in the Console window, most of it will have worked fine - but there will probably be some conflicts, marked with a red &lt;span style="color: red; font-style:italic;"&gt;C&lt;/span&gt;. All you have to do here is locate the relevant files in the file browser, right click on them and hit &lt;span style="font-style:italic;"&gt;Team -&gt; Edit Conflicts&lt;/span&gt;. This will open a new editor window with two panes, you're version on the left and the other version on the right.&lt;br /&gt;&lt;br /&gt;In the Edit Conflicts window all conflicts will be highlighted, and all you have to do is resolve them by making suitable changes to the left-hand pane and saving (this is easy: they're rarely more than a few lines of code). Once things are sorted out, right click on the file in the file browser again and select &lt;span style="font-style:italic;"&gt;Team -&gt; Mark as Resolved&lt;/span&gt;. Once you've resolved all the conflicts you're done. Subclipse really is a wonderful piece of software.&lt;br /&gt;&lt;br /&gt;One last tip: I find it useful to commit my branch just before merging changes: that way if something goes wrong I just have to hit &lt;span style="font-style:italic;"&gt;Team -&gt; Revert&lt;/span&gt; and everything is better again.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Note:&lt;/span&gt; For those of you who haven't tried Eclipse, &lt;a href="http://subclipse.tigris.org/"&gt;Subclipse&lt;/a&gt; is an &lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; plugin that adds SVN support - I use it in conjunction with &lt;a href="http://pydev.sourceforge.net/"&gt;Pydev&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2007/05/svn-merging-using-subclipse.html' title='SVN Merging using SubClipse'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=3749415011117756944' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/3749415011117756944/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/3749415011117756944'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/3749415011117756944'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-191319574372370197</id><published>2007-04-30T15:16:00.000+01:00</published><updated>2007-05-01T02:01:19.745+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><category scheme='http://www.blogger.com/atom/ns#' term='plugin'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>A Python Plugin System</title><content type='html'>A couple of months ago &lt;a href="http://aroberge.blogspot.com"&gt;André&lt;/a&gt; mentioned that having a plugin system in Crunchy would be "nice thing". I was feeling bored when I read his email, and so decided to go away and write one.&lt;br /&gt;&lt;br /&gt;This post documents my attempt, which I like to think was actually rather successful.&lt;br /&gt;&lt;br /&gt;Basically, Crunchy plugins are .py files that reside in a specific directory. They are automatically imported and initialised by the Crunchy core system on startup.&lt;br /&gt;&lt;br /&gt;So the first thing we need to do is figure out what that special path is and enumerate all the .py files in it:&lt;br /&gt;&lt;br /&gt;&lt;pre title="py_code"&gt;&lt;br /&gt;import os&lt;br /&gt;import os.path&lt;br /&gt;import imp&lt;br /&gt;&lt;br /&gt;pluginpath = os.path.join(os.path.dirname(imp.find_module("pluginloader")[1]), "plugins/")&lt;br /&gt;pluginfiles = [fname[:-3] for fname in os.listdir(pluginpath) if fname.endswith(".py")]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;I'm afraid both lines are rather complicated, but they certainly demonstrate the power of Python.  Because this code is run from within the module &lt;span style="font-style:italic;"&gt;pluginloader&lt;/span&gt; we look up its (absolute) path and join that to the (relative) subpath &lt;span style="font-style:italic;"&gt;plugins/&lt;/span&gt;. This gives us the absolute path to the plugin directory in a system-independent way.&lt;br /&gt;&lt;br /&gt;The second line is (as you probably realised) a list comprehension, it first generates a list of the files in the plugin directory, then adds filters that list for files ending in &lt;span style="font-style:italic;"&gt;.py&lt;/span&gt;, and finally removes the trailing &lt;span style="font-style:italic;"&gt;.py&lt;/span&gt;s from the filenames to give a list of module names. All in one line!&lt;br /&gt;&lt;br /&gt;Now that we have a list of modules, all we have to do is import them, which we can do with another list comprehension:&lt;br /&gt;&lt;br /&gt;&lt;pre title="py_code"&gt;&lt;br /&gt;import sys&lt;br /&gt;&lt;br /&gt;if not pluginpath in sys.path:&lt;br /&gt;    sys.path.insert(pluginpath)&lt;br /&gt;imported_modules = [__import__(fname) for fname in pluginfiles]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Once again, the Python code is disarmingly simple: all it does is add the plugin directory to the module import path and import all the modules, generating a list of the imported modulle objects along the way.&lt;br /&gt;&lt;br /&gt;In the Crunchy Plugin API we ask that all initialisation code be placed in a custom &lt;span style="font-style:italic;"&gt;register()&lt;/span&gt; function inside each plugin module. We can now call these functions with just one more line:&lt;br /&gt;&lt;br /&gt;&lt;pre title="py_code"&gt;&lt;br /&gt;[mod.register() for mod in imported_modules]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;And there you have it, a simple but powerful plugin system written in just 10 lines of Python code. Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Edit:&lt;/span&gt; &lt;a href="http://cheeseshop.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt; does the same job, with many more features and more flexibility.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2007/04/python-plugin-system.html' title='A Python Plugin System'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=191319574372370197' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/191319574372370197/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/191319574372370197'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/191319574372370197'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-2746805262041300941</id><published>2007-04-30T15:00:00.000+01:00</published><updated>2007-04-30T14:54:02.631+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='crunchy'/><category scheme='http://www.blogger.com/atom/ns#' term='SoC'/><title type='text'>...and back again...</title><content type='html'>Hi, again.&lt;br /&gt;&lt;br /&gt;I've been lazy, and let this lapse (I know, no posts since July last year!). Now I want to resurrect my blog - in order to post some interesting things that I've been working on.&lt;br /&gt;&lt;br /&gt;Firstly some news about Crunchy: Since I last posted it has been renamed from &lt;span style="font-style: italic;"&gt;Crunchy Frog&lt;/span&gt; to just plain &lt;span style="font-style: italic;"&gt;Crunchy.&lt;span style="font-style: italic;"&gt; &lt;/span&gt;&lt;/span&gt;This was because of another project called &lt;a href="http://www2.blogger.com/img/gl.link.gif"&gt;&lt;span style="font-style: italic;"&gt;CrunchyFrog&lt;/span&gt;&lt;/a&gt;. The AJAX based IO system that I mentioned last July has finally come together in the last couple of months as part of a complete rewrite of Crunchy - with a plugin-based architecture (more on that soon), a very neat HTTP Server (with COMET capabilities) &amp;c &amp;amp;c.&lt;br /&gt;&lt;br /&gt;And finally some personal news: I successfully completed the Summer of Code last year as a student, and am acting as a mentor this year (for Bryan Psimas - a very promising student from the states). I'm also working in the City of London this year: as a techie at an investment bank.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2007/04/and-back-again.html' title='...and back again...'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=2746805262041300941' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/2746805262041300941/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/2746805262041300941'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/2746805262041300941'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-115235056862915722</id><published>2006-07-08T09:56:00.000+01:00</published><updated>2006-07-08T10:24:29.536+01:00</updated><title type='text'>Lights and Sound</title><content type='html'>Among quite a few small things that I've been working on over the last week, I've added `proof of concept` Sound Synthesizer and some fancier formatting to the output.&lt;br /&gt;&lt;br /&gt;The sound synthesizer has no dependencies outside of the Python built-in library modules (wave, ossaudiodev and winsound) and should be completely cross-platform (OK, maybe not mac-compatible :-( ), although I haven't had a chance to test it on Windows yet. Admittedly this isn't really a feature of crunchy, more a demo of what is possible with crunchy - but it should still be interesting for kids.&lt;br /&gt;&lt;br /&gt;The formatting uses HTML in the webpage to show stdout output blue and stderr output red, which makes errors that bit more readable. The project to handle errors more gracefully has stalled somewhat because of the huge number of different ways most errors can occur - for instance SystemError - you really can't do much with it other than display the whole lot.&lt;br /&gt;&lt;br /&gt;One problem that has become more pressing with the introduction of the SoundSynth is the way program execution blocks the interface. I'm working on a way of simulating a remote tty using AJAX which will solve both the asynchronous execution and the raw_input problems. I don't have all that much experience at threaded programming, so it's very much a learning experience for me!&lt;br /&gt;&lt;br /&gt;Once we have integrated the graphics canvas into the normal interpreter (so that graphics commands can be called from anywhere within crunchy and they will still load) I think we'll be ready for a new release of crunchy and I will be ready to start writing tutorials.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/07/lights-and-sound.html' title='Lights and Sound'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=115235056862915722' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/115235056862915722/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/115235056862915722'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/115235056862915722'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-115161510053315587</id><published>2006-06-29T22:01:00.000+01:00</published><updated>2006-06-29T23:35:26.140+01:00</updated><title type='text'>Say no to temporary files!</title><content type='html'>&lt;p&gt;My last post mentioned the problems I was having with doctests, luckily I managed to solve them - but only after about 5 hours of frustrated playing with the API.&lt;/p&gt;&lt;p&gt;The problem arose because to get a DocTest object you have to know the namespace over which it is to be tested, but getting that namespace in the right place is tricky. My final solution was (I like to think) quite an inspired hack:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Take the code to generate the namespace and append some code to generate and run a doctest.&lt;/li&gt;&lt;li&gt;generate DocTestParser and DocTestRunner objects.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;exec the code in a namespace that has references to the DocTestParser, the DocTestRunner and a string containing the actual doctests.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The end result looks something like this:&lt;/p&gt;&lt;blockquote style="font-family: courier new;"&gt;def run_doctest(code, test):&lt;br /&gt;....code = code + '\n__dtest=__parser.get_doctest(__test, globals(), "Crunchy Doctest", "crunchy", 0)\n__runner.run(__dtest)\n'&lt;br /&gt;....runner = DocTestRunner()&lt;br /&gt;....parser = DocTestParser()&lt;br /&gt;....exec code in {'__runner':runner,         '__parser':parser, '__test':test}&lt;/blockquote&gt;It's a wonderful feeling when something is suddenly so obvious!</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/06/say-no-to-temporary-files.html' title='Say no to temporary files!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=115161510053315587' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/115161510053315587/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/115161510053315587'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/115161510053315587'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-115144606644025756</id><published>2006-06-27T23:04:00.000+01:00</published><updated>2006-06-27T23:07:46.463+01:00</updated><title type='text'>AJAX Joy</title><content type='html'>&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;p&gt;Over the last two days I've been playing with HTTP POST and the xmlhttprequest object and teaching myself the HTML DOM (basically the stuff underneath AJAX, although without the AX). Crunchy now only uses HTTP GET for loading new pages and the graphics canvas (which will change as soon as I've tidied up what I've done already)&lt;/p&gt;  &lt;p&gt;The speed improvements feel incredible  - pages no longer even pause when running most simple code. &lt;br/&gt; &lt;/p&gt;  &lt;p&gt;Another change I've made is stopping code executing in temporary files, sadly I can't see how to do doctests without writing to a temporary file because we need a module to run doctest in and as far as I know, module objects are only created when a file is read.&lt;/p&gt;  &lt;p&gt;Another welcome side effect of these changes is that it will be almost trivial to add in support for custom error reporting, we just have to subclass code.InteractiveInterpreter - isn't Python beautiful?!&lt;/p&gt;  &lt;p&gt;I'll be posting a request for comments on simplified error reporting on the edu-sig mailing list in a couple of days once I've come up with some decent ideas.&lt;/p&gt;  &lt;p&gt;In other news, I'm starting to doubt the viability of teaching programming to 7 year old's without recourse to an adult on hand all the time - but on the other hand Crunchy is becoming a viable platform even for more advanced students (Andrew Harrington from Loyola University seems very interested in it). I will continue to endeavour to come up with ways of making this easy enough for kids &amp;lt;10 years old, but I feel it would be more constructive to concentrate on an age group of &amp;gt;10. A tutorial that a 10 year old can understand without adult guidance should be possible for a 7 year old with an adult!&lt;br/&gt; &lt;/p&gt;  &lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/06/ajax-joy.html' title='AJAX Joy'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=115144606644025756' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/115144606644025756/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/115144606644025756'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/115144606644025756'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-115124648842601681</id><published>2006-06-25T15:34:00.000+01:00</published><updated>2006-06-25T15:41:28.446+01:00</updated><title type='text'>Back!</title><content type='html'>I know it's been 3 weeks since I last posted, I've been suffering from chronic exams and revision. Now I'm finally back home and working hard again.&lt;br /&gt;&lt;br /&gt;There has been lots of progress of crunchy - we have a Graphics Canvas (coded by Andre) using javascript and the canvas tag, Andre has squashed a whole load of bugs and added a proper error interface.&lt;br /&gt;&lt;br /&gt;Over the next few days I will be working on a system to parse errors in student's code and present the students with simplified/more meaningful error messages. I'll also start making POST requests work in preparation for moving a lot of the functionality over to AJAX.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/06/back.html' title='Back!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=115124648842601681' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/115124648842601681/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/115124648842601681'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/115124648842601681'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114911046221578677</id><published>2006-05-31T21:54:00.000+01:00</published><updated>2006-05-31T22:21:02.240+01:00</updated><title type='text'>Progress...</title><content type='html'>...has been slow this week - I have mocks on Thursday and Friday.&lt;br /&gt;&lt;br /&gt;There have been lots of helpful suggestions for a graphics library varying from feature requests (The need to address individual pixels) to heavy duty discussions on the pedagogical aspects of graphics.&lt;br /&gt;&lt;br /&gt;I started coding a library at the beginning of the week, but I have since realised that it was far too complex for a 7 year old. The &lt;a href="http://www.livewires.org.uk/python/"&gt;Livewires&lt;/a&gt; API looks interesting but is aimed at 12+, maybe 7 year olds are a bit ambitious. Platform independence is another issue: Cairo is all well and good on UNIX, but it has stupid dependencies on Windows - there is a large part of me that wants to use Cairo on *NIX (it even has SVG support, imagine the possibilities!) and fall back on something less impressive for Windows. Or maybe I should create my own distribution of PyCairo for Windows that doesn't depend on GTK.&lt;br /&gt;&lt;br /&gt;I have also just realised that sound is going to be an issue - PyGame has excellent support for playing pregenerated sound, but virtually none for synthesized sound, which was what I had envisaged. Some kind of interface to MIDI would be perfect - although maybe too much to hope for. I don't want to have to rely on pre-recorded sound, it's much less interesting.&lt;br /&gt;&lt;br /&gt;Anyway, end of winge. There won't be another status update until Sunday at the earliest I'm afraid.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/progress.html' title='Progress...'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114911046221578677' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114911046221578677/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114911046221578677'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114911046221578677'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114865911444203549</id><published>2006-05-26T16:56:00.000+01:00</published><updated>2006-05-26T16:59:03.770+01:00</updated><title type='text'>Code Explanations</title><content type='html'>I've created a page where I will put explanations of my code: &lt;a href="http://crunchy.python-hosting.com/wiki/WalkThroughs"&gt;http://crunchy.python-hosting.com/wiki/WalkThroughs&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Think of the stuff here as more advanced tutorials that don't fit in with the 7-14 target age range!</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/code-explanations.html' title='Code Explanations'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114865911444203549' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114865911444203549/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114865911444203549'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114865911444203549'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114865298377072553</id><published>2006-05-26T14:37:00.000+01:00</published><updated>2006-05-26T15:16:23.786+01:00</updated><title type='text'>Small Update</title><content type='html'>Andre found a solution to the exiting problem - I had just been setting the wrong variable!&lt;br /&gt;&lt;br /&gt;In other news, I have registered an account with &lt;a href="http://python-hosting.com"&gt;python-hosting.com&lt;/a&gt; which I will be using as an SVN repository - at the moment I don't have any plans to use the wiki apart from the front page: take a look at &lt;a href="http://crunchy.python-hosting.com"&gt;crunchy.python-hosting.com&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/small-update.html' title='Small Update'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114865298377072553' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114865298377072553/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114865298377072553'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114865298377072553'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114860417953900297</id><published>2006-05-26T01:32:00.000+01:00</published><updated>2006-05-26T01:55:05.853+01:00</updated><title type='text'>CherryPy is Gone!</title><content type='html'>When I posted my last missive, my version of Crunchy didn't do everything it should have - but I've now got it to a point where everything apart from exiting works (I've decided to drop support for arbitrary local tutorials for now - see below). So I can now say that CherryPy has been eliminated without any major issues.&lt;br /&gt;&lt;br /&gt;The problem with exiting seems to be because HTTP/1.1 has persistent connections, so BaseHTTPServer.HandleRequest never actually returns (I don't really understand the intricacies of HTTP very well though - I should go and read the RFC I guess). I've given the code to Andre - maybe he can spot something to help.&lt;br /&gt;&lt;br /&gt;I have some ideas about packaging groups of individual tutorials as "courses" - with additional metadata describing the relationships between tutorials (pages) in the course (see Andrew Harrington's &lt;a href="http://mail.python.org/pipermail/edu-sig/2006-May/006496.html"&gt;post&lt;/a&gt; on the edu-sig list - this is what prompted the idea).&lt;br /&gt;&lt;br /&gt;Basically, a course would be encapsulated in a directory (could also some kind of archive, say a zip file), and would have an index file that contained any metadata needed in multiple pages. The individual pages would then be referenced by the index (naturally pages could still link to each other). The index could also define some bijection from page "meta-names" to page files.&lt;br /&gt;&lt;br /&gt;I will post my ideas on the edu-sig list once they're more mature.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/cherrypy-is-gone.html' title='CherryPy is Gone!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114860417953900297' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114860417953900297/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114860417953900297'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114860417953900297'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114848052484858458</id><published>2006-05-24T15:15:00.000+01:00</published><updated>2006-05-24T15:22:53.193+01:00</updated><title type='text'>Progress so far</title><content type='html'>I'm a naturally impatient person, so I actually started working on the project on Monday - 48 hours before I actually got confirmation I was in.&lt;br /&gt;&lt;br /&gt;So far I've succeeded in removing the dependency on CherryPy using the BaseHTTPServer module from the Python base libraries. This was actually quite fun, because I've written a simple HTTP server in C before, but the Python version is far more elegant. Note that while I have replaced the whole server, it didn't actually mean using much more code - which really goes to show how unnecessary CherryPy is when you're doing something moderatley simple.&lt;br /&gt;&lt;br /&gt;I am told that Elementtree is in Python 2.5, so getting rid of it isnt a priority at all (thankfully).&lt;br /&gt;&lt;br /&gt;I've sent the code to Andre, so hopefully we'll see something like this in a release soon.</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/progress-so-far.html' title='Progress so far'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114848052484858458' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114848052484858458/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114848052484858458'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114848052484858458'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-28236292.post-114846313178452195</id><published>2006-05-24T10:18:00.000+01:00</published><updated>2007-05-09T11:54:18.490+01:00</updated><title type='text'>Hi!</title><content type='html'>&lt;span style="font-weight:bold;"&gt;Note:&lt;/span&gt; this was written back in 2006 when I was about to become an SoC student, see &lt;a href="http://pytute.blogspot.com/2007/04/and-back-again.html"&gt;this post&lt;/a&gt; for some updates on what I'm doing now.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Hi, I'm Johannes Woolard, a 19 year old student at the University of Oxford in the UK. I've just heard that I've been accepted into the Google Summer of Code scheme to work for the Python Software Foundation. I'm planning to use this blog to document my progress and experiences along the way.&lt;br /&gt;Briefly, my project involves writing interactive web-based tutorials for 7-14 year olds. I'm being mentored by Andre Roberge (he has a &lt;a href="http://aroberge.blogspot.com"&gt;blog&lt;/a&gt; too).</content><link rel='alternate' type='text/html' href='http://pytute.blogspot.com/2006/05/hi_24.html' title='Hi!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=28236292&amp;postID=114846313178452195' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/114846313178452195/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://pytute.blogspot.com/feeds/posts/default/114846313178452195'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/28236292/posts/default/114846313178452195'/><author><name>Johannes Woolard</name><uri>http://www.blogger.com/profile/11444047692360756346</uri><email>noreply@blogger.com</email></author></entry></feed>