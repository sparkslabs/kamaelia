#! /usr/bin/env python
"""

Flow diagram
------------

          {Other Jam Instances}
                    |
              [UDP Receiver]
                    |
                 [DeOsc]
                    |
                [Splitter] => Send the right OSC messages to the right UI
                 |      |     elements, either throught a seperate component or
                 |      |     clever linkages
                 |      |
             [GUI Components]
              |            | 
 [Osc (Music Data)]    [Osc (Change Data)] => For example "Play a note now" is
        |                     |               music data, whereas "Joe User
        |                     |               inserted a note" is change data
        |                     |
   [UDP Sender]          [UDP Sender]
        |                     |
   {Music App}      {Other Jam Instances}

"""

try:
    import pypm
except ImportError:
    MIDI_AVAILABLE = False
else:
    MIDI_AVAILABLE = True

from optparse import OptionParser

from Kamaelia.Chassis.Graphline import Graphline
from Kamaelia.Chassis.Pipeline import Pipeline
from Kamaelia.Util.Clock import CheapAndCheerfulClock as Clock
from Kamaelia.Util.Backplane import Backplane, PublishTo, SubscribeTo
from Kamaelia.Util.Fanout import Fanout
from Kamaelia.Util.OneShot import OneShot
from Kamaelia.Util.Console import ConsoleEchoer

from Kamaelia.Apps.Jam.Protocol.Osc import Osc, DeOsc
from Kamaelia.Apps.Jam.Internet.UDP_ng import UDPReceiver, UDPSender, PostboxPeer
from Kamaelia.Apps.Jam.Internet.UDPDispatcher import UDPDispatcher
from Kamaelia.Apps.Jam.UI.XYPad import XYPad
from Kamaelia.Apps.Jam.UI.StepSequencer import StepSequencer
from Kamaelia.Apps.Jam.Util.PeerSelector import PeerSelector
from Kamaelia.Apps.Jam.Util.MusicTiming import SyncMaster

FPS = 60

#TODO: Move filters
#TODO: Filters should exit

import Axon
import sets

class AddPeerFilter(Axon.Component.component):
    def main(self):
        while 1:
            if self.dataReady("inbox"):
                data = self.recv("inbox")
                # Data is of the form ((oscAddr, oscArgs, timeTag),
                #                      (address, port))
                # oscArgs is either [port], or [address, port]
                if data[0][0].split("/")[-1] == "Connect":
                    oscArgs = data[0][1]
                    if len(oscArgs) == 1:
                        # oscArgs == [port]
                        address = data[1][0]
                        port = oscArgs[0]
                    else:
                        # oscArgs == [address, port]
                        address = oscArgs[0]
                        port = oscArgs[1]
                self.send((address, port), "outbox")
            if not self.anyReady():
                self.pause()
            yield 1

class XYFilter(Axon.Component.component):
    def __init__(self, padNumber=1):
        super(XYFilter, self).__init__()
        self.padNumber = padNumber

    def main(self):
        while 1:
            if self.dataReady("inbox"):
                data = self.recv("inbox")
                if data[0][0].find("/XY/%i/" % self.padNumber) >= 0:
                    self.send(data[0])
            if not self.anyReady():
                self.pause()
            yield 1

class PeerListFilter(Axon.Component.component):
    def main(self):
        while 1:
            if self.dataReady("inbox"):
                data = self.recv("inbox")
                if data[0][0].split("/")[-1] == "PeerList":
                    # OSC message flattens the peer list, so we need to group
                    # them into (address, port) tuples again
                    peerList = sets.Set()
                    for i in enumerate(data[0][1]):
                        # FIXME: Boy is this ugly...
                        if not i[0] % 2:
                            peerList.add((i[1], data[0][1][i[0]+1]))
                    self.send(peerList, "outbox")
            if not self.anyReady():
                self.pause()
            yield 1
            
class StepSequencerFilter(Axon.Component.component):
    def main(self):
        while 1:
            if self.dataReady("inbox"):
                data = self.recv("inbox")
                if data[0][0].find("/StepSequencer/") >= 0:
                    self.send(data[0], "outbox")
            if not self.anyReady():
                self.pause()
            yield 1

class TimingFilter(Axon.Component.component):
    def main(self):
        while 1:
            if self.dataReady("inbox"):
                data = self.recv("inbox")
                if data[0].split("/")[-1] == "Timing":
                    self.send(data[1], "outbox")
            if not self.anyReady():
                self.pause()
            yield 1
                    
def parseOptions():
    parser = OptionParser()
    # Address and port to send music data
    parser.add_option("-a", "--osc-address", dest="oscAddress",
                help="The IP address to send OSC data to (default=127.0.0.1)")
    parser.add_option("-p", "--osc-port", dest="oscPort", type="int",
            help="The UDP port number to send OSC data to (default=2000)")
    parser.set_defaults(oscAddress="127.0.0.1", oscPort=2000)

    # Address and port to listen for change data on
    parser.add_option("--listen-address", dest="listenAddress",
                      help="The IP address to listen for other connecting Jam clients on (default=127.0.0.1)")
    parser.add_option("--listen-port", dest="listenPort", type="int",
                      help="The UDP port number to listen for other connecting Jam clients on (default=2001)")
    parser.set_defaults(listenAddress="127.0.0.1", listenPort=2001)

    # Address and port of a second Jam instance to connect to
    parser.add_option("--remote-address", dest="remoteAddress",
                      help="The IP address of another Jam client to connect to (default=None)")
    parser.add_option("--remote-port", dest="remotePort", type="int",
                      help="The UDP port number of another Jam client to connect to (default=None)")
    parser.set_defaults(remoteAddress=None, remotePort=None)

    # Timing options - this is half-baked at best
    # TODO: Add all the options in and make them work, not conflict etc.
    parser.add_option("-b", "--bpm", dest="bpm", type="int",
                       help="The tempo of the song in beats per minute (default=120)")
    parser.set_defaults(bpm=120)

    options, args = parser.parse_args()
    if options.remoteAddress and not options.remotePort:
         parser.error("Must provide --remote-port with --remote-address")
    if options.remotePort and not options.remoteAddress:
        parser.error("Must provide --remote-address with --remote-port")
    return options


if __name__ == "__main__":
    options = parseOptions()

    # Component time sync
    if not (options.remoteAddress and options.remotePort):
        # We are the first Jam instance in a network, so we get to set the bpm,
        # loop length etc.
        Pipeline(SyncMaster(externalSync=False),
                 PublishTo("sync")).activate()
    else:
        # TODO: The external syncing code doesn't exist yet.  Not cool
        if 0:
            Pipeline(SubscribeTo("dataIn"),
                     TimingFilter(),
                     SyncMaster(externalSync=True),
                     PublishTo("sync")).activate()

    # OSC messages in
    Pipeline(UDPReceiver(localaddr=options.listenAddress,
                         localport=options.listenPort),
             DeOsc(index=0),
             PublishTo("dataIn")).activate()

    # Frame rate control
    Pipeline(Clock(float(1)/FPS),
             PublishTo("frameRateClock")).activate()

    # Peer select/add
    Graphline(dataSub = SubscribeTo("dataIn"),
              fanout = Fanout(["addPeer", "peerList"]),
              addPeerFilter = AddPeerFilter(),
              peerListFilter = PeerListFilter(),
              osc = Osc("/Jam", 2),
              peerSelector = PeerSelector(options.listenPort),
              sender = PostboxPeer(),
              linkages = {("dataSub", "outbox"):("fanout", "inbox"),
                          ("fanout", "addPeer"):("addPeerFilter", "inbox"),
                          ("addPeerFilter","outbox"):("peerSelector", "addPeer"),
                          ("fanout", "peerList"):("peerListFilter", "inbox"),
                          ("peerListFilter", "outbox"):("peerSelector", "peerSet"),
                          ("peerSelector", "outbox"):("osc", "inbox"),
                          ("osc", "outbox"):("sender", "inbox")
                          }
              ).activate()

    # XY pad 1
    Graphline(clockSub = SubscribeTo("frameRateClock"),
              xyPad = XYPad(messagePrefix = "/XY/1/", position = (0, 0)),
              localPub = PublishTo("localDataOut"),
              remotePub = PublishTo("remoteDataOut"),
              linkages = {("clockSub", "outbox"):("xyPad", "newframe"),
                          ("xyPad", "outbox"):("localPub", "inbox"),
                          ("xyPad", "localChanges"):("remotePub", "inbox")}
              ).activate()

    # XY pad 2
    Graphline(dataSub = SubscribeTo("dataIn"),
              clockSub = SubscribeTo("frameRateClock"),
              xyFilter = XYFilter(1),
              xyPad = XYPad(messagePrefix = "/XY/2/", editable=False,
                            position=(120, 0)),
              localPub = PublishTo("localDataOut"),
              linkages = {("dataSub", "outbox"):("xyFilter", "inbox"),
                          ("xyFilter", "outbox"):("xyPad", "remoteChanges"),
                          ("clockSub", "outbox"):("xyPad", "newframe"),
                          ("xyPad", "outbox"):("localPub", "inbox")}
              ).activate()

    # Step sequencer
    Graphline(dataSub = SubscribeTo("dataIn"),
              syncSub = SubscribeTo("sync"),
              ssFilter = StepSequencerFilter(),
              ss = StepSequencer(position=(0, 120),
                                 messagePrefix="/StepSequencer/",
                                 sync=True),
              localPub = PublishTo("localDataOut"),
              remotePub = PublishTo("remoteDataOut"),
              linkages = {("dataSub", "outbox"):("ssFilter", "inbox"),
                          ("ssFilter", "outbox"):("ss", "remoteChanges"),
                          ("syncSub", "outbox"):("ss", "sync"),
                          ("ss", "outbox"):("localPub", "inbox"),
                          ("ss", "localChanges"):("remotePub", "inbox")}
              ).activate()

    # Local OSC messages
    Pipeline(SubscribeTo("localDataOut"), Osc("/Jam"),
             UDPSender(receiver_addr=options.oscAddress,
                       receiver_port=options.oscPort)).activate()

    # OSC messages out
    Graphline(remoteSub = SubscribeTo("remoteDataOut"),
              dataSub = SubscribeTo("dataIn"),
              fanout = Fanout(["addPeer", "peerList"]),
              addPeerFilter = AddPeerFilter(),
              osc = Osc("/Jam"),
              dispatcher = UDPDispatcher(),
              linkages = {("remoteSub", "outbox"):("osc", "inbox"),
                          ("osc", "outbox"):("dispatcher", "inbox"),
                          ("dataSub", "outbox"):("fanout", "inbox"),
                          ("fanout", "addPeer"):("addPeerFilter", "inbox"),
                          ("addPeerFilter","outbox"):("dispatcher", "addPeer"),
                          ("fanout", "peerList"):("peerListFilter", "inbox"),
                          ("peerListFilter", "outbox"):("dispatcher", "peerSet")
                          }
              ).activate()

    Backplane("sync").activate()
    Backplane("dataIn").activate()
    Backplane("frameRateClock").activate()
    Backplane("localDataOut").activate()
    Backplane("remoteDataOut").activate()

    if options.remoteAddress and options.remotePort:
        Pipeline(OneShot(("/Jam/Connect", (options.listenPort))), Osc(),
                 UDPSender(receiver_addr=options.remoteAddress,
                           receiver_port=options.remotePort)
                ).activate()

    Axon.Scheduler.scheduler.run.runThreads()

    
             
