<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-9238405</id><updated>2008-06-05T11:21:45.450-07:00</updated><title type='text'>Agile Testing</title><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>310</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-9238405.post-5724152665307800029</id><published>2008-05-23T15:49:00.000-07:00</published><updated>2008-05-23T16:34:29.753-07:00</updated><title type='text'>Incremental backups to Amazon S3</title><content type='html'>Based on this great &lt;a href="http://www.brainonfire.net/2007/08/11/remote-encrypted-backup-duplicity-amazon-s3/"&gt;blog post&lt;/a&gt; by Tim McCormack, I managed to write some scripts that back up files to Amazon S3. The files are encrypted with GnuPG and rsync-ed to S3 using a Python-based tool called &lt;a href="http://duplicity.nongnu.org/"&gt;duplicity&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Here's what I did in order to get all this going on a CentOS 5.1 server running Python 2.5.&lt;br /&gt;&lt;br /&gt;1) Signed up for Amazon S3 and got the AWS_ACCESS_KEY_ID and the AWS_SECRET_ACCESS_KEY.&lt;br /&gt;&lt;br /&gt;2) Downloaded and installed the following packages: &lt;a href="http://code.google.com/p/boto/"&gt;boto&lt;/a&gt;, &lt;a href="http://py-gnupg.sourceforge.net/"&gt;GnuPGInterface&lt;/a&gt;, &lt;a href="http://librsync.sourceforge.net/"&gt;librsync&lt;/a&gt;, &lt;a href="http://duplicity.nongnu.org/"&gt;duplicity&lt;/a&gt;. All of them except librsync are Python-based, so they can be installed via 'python setup.py install'. For librsync you need to use './configure; make; make install'.&lt;br /&gt;&lt;br /&gt;3) Generated a GPG key pair using "gpg --gen-key". Made a note of the hex fingerprint of the key (you can list the fingerprints of your keys via "gpg --fingerprint").&lt;br /&gt;&lt;br /&gt;4) Wrote a simple boto-based Python script to create and list S3 buckets (the equivalent of directories in S3 parlance). Note that boto uses SSL, so your Python installation &lt;a href="http://agiletesting.blogspot.com/2008/05/compiling-python-25-with-ssl-support.html"&gt;needs to have SSL enabled&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Here's how the script looks:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;#!/usr/bin/env python&lt;br /&gt;&lt;br /&gt;ACCESS_KEY_ID = 'theaccesskeyid'&lt;br /&gt;SECRET_ACCESS_KEY = 'thesecretaccesskey'&lt;br /&gt;&lt;br /&gt;from boto.s3.connection import S3Connection&lt;br /&gt;conn = S3Connection(ACCESS_KEY_ID, SECRET_ACCESS_KEY)&lt;br /&gt;buckets = [&lt;br /&gt;         'mybuckets_myserver_mysqldump',&lt;br /&gt;         'mybuckets_myserver_full',&lt;br /&gt;     ]&lt;br /&gt;for bucket in buckets:&lt;br /&gt; conn.create_bucket(bucket)&lt;br /&gt;rs = conn.get_all_buckets()&lt;br /&gt;print 'Bucket listing:'&lt;br /&gt;for b in rs:&lt;br /&gt; print b.name&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;5) Wrote a bash script (heavily influenced by Tim McCormack's post) that runs duplicity and backs up the root partition of my Linux server (minus some directories) to S3. The nice thing about duplicity is that it uses rsync, so it only transfers the diffs over the wire. Here's how my script looks like:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;export myEncryptionKeyFingerprint=somehexnumber&lt;br /&gt;export mySigningKeyFingerprint=somehexnumber&lt;br /&gt;export AWS_ACCESS_KEY_ID=accesskeyid&lt;br /&gt;export AWS_SECRET_ACCESS_KEY=secretaccesskey&lt;br /&gt;export PASSPHRASE=mypassphrase&lt;br /&gt;&lt;br /&gt;/usr/local/bin/duplicity --encrypt-key=$myEncryptionKeyFingerprint&lt;br /&gt;--sign-key=$mySigningKeyFingerprint --exclude=/sys --exclude=/dev&lt;br /&gt;--exclude=/proc --exclude=/tmp --exclude=/mnt --exclude=/media /&lt;br /&gt;s3+http://mybuckets_myserver_full&lt;br /&gt;&lt;br /&gt;export AWS_ACCESS_KEY_ID=&lt;br /&gt;export AWS_SECRET_ACCESS_KEY=&lt;br /&gt;export PASSPHRASE=&lt;br /&gt;&lt;/pre&gt;NOTE: duplicity will interactively prompt you for your GPG key's passphrase, unless you have a variable called PASSPHRASE that contains the passphrase. Since I wanted to run this script as a cron job, I chose the less secure way of specifying the passphrase in clear inside the script. YMMV.&lt;br /&gt;&lt;br /&gt;That's about it. Running the script produces an output such as this:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;--------------[ Backup Statistics ]--------------&lt;br /&gt;StartTime 1211482825.55 (Thu May 22 12:00:25 2008)&lt;br /&gt;EndTime 1211488426.17 (Thu May 22 13:33:46 2008)&lt;br /&gt;ElapsedTime 5600.62 (1 hour 33 minutes 20.62 seconds)&lt;br /&gt;SourceFiles 174531&lt;br /&gt;SourceFileSize 5080402735 (4.73 GB)&lt;br /&gt;NewFiles 174531&lt;br /&gt;NewFileSize 5080402735 (4.73 GB)&lt;br /&gt;DeletedFiles 0&lt;br /&gt;ChangedFiles 0&lt;br /&gt;ChangedFileSize 0 (0 bytes)&lt;br /&gt;ChangedDeltaSize 0 (0 bytes)&lt;br /&gt;DeltaEntries 174531&lt;br /&gt;RawDeltaSize 1200920038 (1.12 GB)&lt;br /&gt;TotalDestinationSizeChange 2702953170 (2.52 GB)&lt;br /&gt;Errors 0&lt;br /&gt;-------------------------------------------------&lt;br /&gt;&lt;/pre&gt;The first time you run the script it will take a while, but subsequent runs will only back up the files that were changed since the last run. For example, my second run transferred only 19.3 MB:&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;--------------[ Backup Statistics ]--------------&lt;br /&gt;StartTime 1211529638.99 (Fri May 23 01:00:38 2008)&lt;br /&gt;EndTime 1211529784.18 (Fri May 23 01:03:04 2008)&lt;br /&gt;ElapsedTime 145.19 (2 minutes 25.19 seconds)&lt;br /&gt;SourceFiles 174522&lt;br /&gt;SourceFileSize 5084478500 (4.74 GB)&lt;br /&gt;NewFiles 64&lt;br /&gt;NewFileSize 2280357 (2.17 MB)&lt;br /&gt;DeletedFiles 28&lt;br /&gt;ChangedFiles 418&lt;br /&gt;ChangedFileSize 217974696 (208 MB)&lt;br /&gt;ChangedDeltaSize 0 (0 bytes)&lt;br /&gt;DeltaEntries 510&lt;br /&gt;RawDeltaSize 2465010 (2.35 MB)&lt;br /&gt;TotalDestinationSizeChange 20211663 (19.3 MB)&lt;br /&gt;Errors 0&lt;br /&gt;&lt;br /&gt;ASas&lt;br /&gt;-------------------------------------------------&lt;/pre&gt;To restore files from S3, you use duplicity and specify the source as s3+http://mybuckets_myserver_full and the destination as a local directory.&lt;br /&gt;&lt;br /&gt;Thanks to Tim McCormack for his detailed blog post, it made things so much easier than digging all this info by Google Fu.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/incremental-backups-to-amazon-s3.html' title='Incremental backups to Amazon S3'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=5724152665307800029' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/5724152665307800029/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/5724152665307800029'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/5724152665307800029'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-6228952258136536524</id><published>2008-05-19T14:25:00.001-07:00</published><updated>2008-05-19T14:32:01.201-07:00</updated><title type='text'>Compiling Python 2.5 with SSL support</title><content type='html'>If you compile Python 2.5.x from source, you need to jump through some hoops so that SSL support is enabled. Googling around, I found Patrick Altman's excellent &lt;a href="http://paltman.com/2007/11/15/getting-ssl-support-in-python-251/"&gt;blog post&lt;/a&gt; talking about this very issue.&lt;br /&gt;&lt;br /&gt;In my case, I needed to enable SSL support for Python 2.5.2 on CentOS 5.1. I already had the openssl development libraries installed:&lt;br /&gt;&lt;br /&gt;# yum list installed | grep ssl&lt;br /&gt;mod_ssl.i386                             1:2.2.3-11.el5_1.cento installed&lt;br /&gt;openssl.i686                             0.9.8b-8.3.el5_0.2     installed&lt;br /&gt;openssl-devel.i386                       0.9.8b-8.3.el5_0.2     installed&lt;br /&gt;&lt;br /&gt;Here's what I did next, following Patrick's post:&lt;br /&gt;&lt;br /&gt;1) edited Modules/Setup.dist from the Python 2.5.2 source distribution and made sure the correct lines were put back in (they were commented out by default):&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;_socket socketmodule.c&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;# Socket module helper for SSL support; you must comment out the other&lt;br /&gt;# socket line above, and possibly edit the SSL variable:&lt;br /&gt;#SSL=/usr/local/ssl&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;_ssl _ssl.c \&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;    -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \&lt;/span&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;    -L$(SSL)/lib -lssl -lcrypto&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;2) ran ./configure; make; make install&lt;br /&gt;&lt;br /&gt;3) verified that I can access socket.ssl:&lt;br /&gt;&lt;br /&gt;# python2.5&lt;br /&gt;Python 2.5.2 (r252:60911, May 19 2008, 14:23:27)&lt;br /&gt;[GCC 4.1.2 20070626 (Red Hat 4.1.2-14)] on linux2&lt;br /&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;br /&gt;&gt;&gt;&gt; import socket&lt;br /&gt;&gt;&gt;&gt; socket.ssl&lt;br /&gt;&lt;function&gt;function ssl at 0xb7ef410c&gt;&lt;br /&gt;&lt;br /&gt;That's it. Not sure why it's so non-intuitive though.&lt;/function&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/compiling-python-25-with-ssl-support.html' title='Compiling Python 2.5 with SSL support'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=6228952258136536524' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/6228952258136536524/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/6228952258136536524'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/6228952258136536524'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-1508452509221019277</id><published>2008-05-15T10:52:00.000-07:00</published><updated>2008-05-15T11:34:48.115-07:00</updated><title type='text'>Encrypting a Linux root partition with LUKS and DM-CRYPT</title><content type='html'>One of our customers needed to have his Linux laptop's root partition encrypted. We found a &lt;a href="http://musialek.org/?p=3"&gt;HOWTO&lt;/a&gt; on achieving this with RHEL5, and we adapted it for CentOS 5. The technique is based on &lt;a href="http://luks.endorphin.org/"&gt;LUKS&lt;/a&gt; and &lt;a href="http://www.saout.de/misc/dm-crypt/"&gt;DM-CRYPT&lt;/a&gt;. Kudos to my colleague Chris Evans for going through the exercise of getting this to work on CentOS 5 and for producing the documentation that follows, which I'm posting here hoping that it will benefit somebody at some point.&lt;br /&gt;&lt;br /&gt;* Boot off of a Live CD, I used Fedora Core 9 Preview&lt;br /&gt;* Find out which disk is which; for me /dev/sda was the external usb, and /dev/sdb was the internal&lt;pre&gt;sfdisk -d /dev/sdb | sfdisk /dev/sda&lt;br /&gt;pvcreate --verbose /dev/sda2&lt;br /&gt;vgextend --verbose VolGroup00 /dev/sda2&lt;br /&gt;pvmove --verbose /dev/sdb2 /dev/sda2 # This takes ages&lt;br /&gt;vgreduce --verbose VolGroup00 /dev/sdb2&lt;br /&gt;pvremove --verbose /dev/sdb2&lt;br /&gt;fdisk /dev/sdb&lt;br /&gt;&lt;/pre&gt;* Change the partition type to 83 for /dev/sdb2&lt;br /&gt;* Here is when you get to choose the password that will protect your partition:&lt;br /&gt;&lt;pre&gt;cryptsetup --verify-passphrase --key-size 256 luksFormat /dev/sdb2&lt;br /&gt;&lt;br /&gt;cryptsetup luksOpen /dev/sdb2 cryptroot&lt;br /&gt;pvcreate --verbose /dev/mapper/cryptroot&lt;br /&gt;vgextend --verbose VolGroup00 /dev/mapper/cryptroot&lt;br /&gt;pvmove --verbose /dev/sda2 /dev/mapper/cryptroot # This takes ages&lt;br /&gt;vgreduce --verbose VolGroup00 /dev/sda2&lt;br /&gt;pvremove --verbose /dev/sda2&lt;br /&gt;mkdir /mnt/tmp&lt;br /&gt;mount /dev/VolGroup00/LogVol00 /mnt/tmp&lt;br /&gt;cp -ax /dev/* /mnt/tmp/dev # I said no to overwriting any files&lt;br /&gt;chroot /mnt/tmp/&lt;br /&gt;(chroot) # mount -t proc proc /proc&lt;br /&gt;(chroot) # mount -t sysfs sysfs /sys&lt;br /&gt;(chroot) # mount /boot&lt;br /&gt;(chroot) # swapon -a&lt;br /&gt;(chroot) # vgcfgbackup&lt;/pre&gt;&lt;p&gt;For the initrd, the blog mentions /etc/sysconfig/mkinitrd as a file. CentOS had a directory, I tried doing their suggestion as a file in there, moving the directory out, and making the file as they suggested. Both failed. So I ran the following command: &lt;/p&gt; &lt;pre&gt;(chroot) # mkinitrd -v /boot/initrd-2.6.18-53.el5.crypt.img --with=aes --with=sha256 --with=dm-crypt 2.6.18-53.el5&lt;br /&gt;&lt;/pre&gt; &lt;p&gt;Now we need to modify the initrd so that it will decrypt the partition at boot time &lt;/p&gt; &lt;pre&gt;(chroot) # cd /boot&lt;br /&gt;(chroot) # mkdir /boot/initrd-2.6.18-53.el5.crypt.dir&lt;br /&gt;(chroot) # cd /boot/initrd-2.6.18-53.el5.crypt.dir&lt;br /&gt;(chroot) # gunzip &lt; ../initrd-2.6.18-53.el5.crypt.img | cpio -ivd &lt;/pre&gt;&lt;p&gt;Now, we need to modify init by adding the following lines after the line which reads “mkblkdevs” and before “echo Scanning and configuring dmraid supported devices.”: &lt;/p&gt; &lt;pre&gt;echo Decrypting root device&lt;br /&gt;cryptsetup luksOpen /dev/sda2 cryptroot&lt;br /&gt;echo Scanning logical volumes&lt;br /&gt;lvm vgscan --ignorelockingfailure&lt;br /&gt;echo Activating logical volumes&lt;br /&gt;lvm vgchange -ay --ignorelockingfailure vg00&lt;br /&gt;&lt;/pre&gt; &lt;p&gt;Copy cryptsetup and lvm to be put into the initrd, the blog doesn't mention it, but I'm sure it needs it. &lt;/p&gt; &lt;pre&gt;cp /sbin/cryptsetup bin/&lt;br /&gt;cp /sbin/lvm bin/&lt;br /&gt;&lt;/pre&gt; &lt;p&gt;Compress the new initrd &lt;/p&gt; &lt;pre&gt;find ./ | cpio -H newc -o | gzip -9 &gt; /boot/initrd-2.6.18-53.el5.crypt.img&lt;br /&gt;&lt;/pre&gt; &lt;p&gt;Modify the grub.conf. Copy the grub entry for the current kernel, and change as follows &lt;/p&gt; &lt;pre&gt;title Centos &lt;b&gt;Encrypted&lt;/b&gt; Server (2.6.18-53.1.4.el5)&lt;br /&gt;initrd /initrd-2.6.18-53.el5.&lt;b&gt;crypt&lt;/b&gt;.img&lt;br /&gt;&lt;/pre&gt; &lt;p&gt;Unmount the fs's in the chroot, and exit &lt;/p&gt; &lt;pre&gt;cd /&lt;br /&gt;umount /boot&lt;br /&gt;umount /proc&lt;br /&gt;umount /sys&lt;br /&gt;exit&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;NOTE: Don't upgrade the kernel without upgrading the initrd and grub.conf. &lt;/p&gt;&lt;p&gt;Reboot and test :)&lt;br /&gt;&lt;/p&gt;At this point you have an encrypted root partition. You should be prompted for a password during the boot process (the boot partition is not encrypted). If somebody steals your laptop, they won't be able to mount the root partition without knowing the password.&lt;br /&gt;&lt;p&gt;After you have crypto setup, you can find out information about it (such as the crypto algorithm used) via this command:&lt;br /&gt;&lt;/p&gt; &lt;pre&gt;# cryptsetup luksDump /dev/sda2&lt;br /&gt;LUKS header information for /dev/sda2&lt;br /&gt;&lt;br /&gt;Version:        1&lt;br /&gt;Cipher name:    aes&lt;br /&gt;Cipher mode:    cbc-essiv:sha256&lt;br /&gt;Hash spec:      sha1&lt;br /&gt;Payload offset: 2056&lt;br /&gt;MK bits:        256&lt;br /&gt;MK digest:      af 2e e6 39 3e 79 60 bb 4a 2b 33 05 1c 86 3a 83 bc a0 ef c1&lt;br /&gt;MK salt:        79 b2 13 53 6f 52 72 a1 b5 3d dc d3 72 cd d6 f4&lt;br /&gt;               e3 25 3c 6e 08 00 f3 1d 44 1e 90 47 bc 43 e7 07&lt;br /&gt;MK iterations:  10&lt;br /&gt;UUID:           721abe52-5122-447b-8ed0-5ca3b2b32366&lt;br /&gt;&lt;br /&gt;Key Slot 0: ENABLED&lt;br /&gt;       Iterations:             247223&lt;br /&gt;       Salt:                   86 c7 53 6a 13 a9 77 81 89 ec 90 b3 e5 6a ea 8d&lt;br /&gt;                               da 0c 6f ad ec 3e 3c 47 2d 6e 5f 59 28 4e 7c 63&lt;br /&gt;       Key material offset:    8&lt;br /&gt;       AF stripes:             4000&lt;br /&gt;Key Slot 1: DISABLED&lt;br /&gt;Key Slot 2: DISABLED&lt;br /&gt;Key Slot 3: DISABLED&lt;br /&gt;Key Slot 4: DISABLED&lt;br /&gt;Key Slot 5: DISABLED&lt;br /&gt;&lt;/pre&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/encrypting-linux-root-partition-with.html' title='Encrypting a Linux root partition with LUKS and DM-CRYPT'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=1508452509221019277' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/1508452509221019277/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/1508452509221019277'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/1508452509221019277'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-7663945367612013621</id><published>2008-05-08T17:16:00.000-07:00</published><updated>2008-05-12T14:16:22.443-07:00</updated><title type='text'>Notes from the latest SoCal Piggies meeting</title><content type='html'>...have been &lt;a href="http://python-groups.blogspot.com/2008/05/notes-from-socal-piggies-meeting-on-may.html"&gt;posted&lt;/a&gt; to the "Happenings in Python User groups" blog.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Update&lt;/span&gt;: Ben Bangert sent me the slides he used. You can download or view the PDF from &lt;a href="http://socal-piggies.org/presentations/ben_bangert/2008_05_01/Pylons.pdf"&gt;here&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/notes-from-latest-socal-piggies-meeting.html' title='Notes from the latest SoCal Piggies meeting'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=7663945367612013621' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/7663945367612013621/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/7663945367612013621'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/7663945367612013621'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-7176615188103657724</id><published>2008-05-05T15:29:00.000-07:00</published><updated>2008-05-05T15:34:54.368-07:00</updated><title type='text'>Guido open sources Code Review app running on GAPE</title><content type='html'>Not sure why this wasn't publicized more, but Guido van Rossum announced today that he open sourced the code for &lt;a href="http://codereview.appspot.com"&gt;Code Review&lt;/a&gt;, a Google AppEngine app he released last week. Code Review is based on Mondrian, the internal code review tool that Guido wrote for Google. The relationship between the two apps in terms of features is: Code Review &lt; Mondrian.&lt;br /&gt;&lt;br /&gt;The code for Code Review is part of a Google code project called &lt;a href="http://code.google.com/p/rietveld/"&gt;Rietveld&lt;/a&gt;. I haven't looked at it yet, but I'll certainly do so soon, just to see the master's view on how to write a GAPE application.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/guido-open-sources-code-review-app.html' title='Guido open sources Code Review app running on GAPE'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=7176615188103657724' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/7176615188103657724/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/7176615188103657724'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/7176615188103657724'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-4147717348339647963</id><published>2008-05-05T14:07:00.000-07:00</published><updated>2008-05-05T14:11:56.157-07:00</updated><title type='text'>Ruby to Python bytecode compiler</title><content type='html'>&lt;a href="http://farmdev.com/thoughts/49/after-the-release-of-google-app-engine-the-rubyists-/"&gt;Kumar&lt;/a&gt; beat me to it, but I'll mention it here too: &lt;a href="http://whytheluckystiff.net/"&gt;Why the Lucky Stiff&lt;/a&gt; published a &lt;a href="http://github.com/why/unholy/tree/master"&gt;Ruby-to-Python-bytecode compiler&lt;/a&gt;, as well as tools to decompile the byte code into source code. According to the README file, he based his work on blog posts by &lt;a href="http://nedbatchelder.com/"&gt;Ned Batchelder&lt;/a&gt; related to dissecting Python bytecode. I wholeheartedly agree with Why's comment at the end of the README file:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;  You know, it's crazy that Python&lt;br /&gt; and Ruby fans find themselves&lt;br /&gt; battling so much.  While syntax&lt;br /&gt; is different, this exercise&lt;br /&gt; proves how close they are to&lt;br /&gt; each other!  And, yes, I like&lt;br /&gt; Ruby's syntax and can think much&lt;br /&gt; better in it, but it would be&lt;br /&gt; nice to share libs with Python&lt;br /&gt; folk and not have to wait forever&lt;br /&gt; for a mythical VM that runs all&lt;br /&gt; possible languages.&lt;/pre&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/05/ruby-to-python-bytecode-compiler.html' title='Ruby to Python bytecode compiler'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=4147717348339647963' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/4147717348339647963/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/4147717348339647963'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/4147717348339647963'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-2905170341532078423</id><published>2008-04-29T11:08:00.000-07:00</published><updated>2008-04-29T12:57:36.576-07:00</updated><title type='text'>Special guest for next SoCal Piggies meeting</title><content type='html'>We'll have the &lt;a href="http://socal-piggies.org/scp"&gt;SoCal Piggies&lt;/a&gt; meeting this Thursday May 1st at the &lt;a href="http://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=Gorilla+Nation&amp;amp;sll=33.733477,-117.328491&amp;amp;sspn=3.001089,5.559082&amp;amp;ie=UTF8&amp;amp;ll=34.002866,-118.345413&amp;amp;spn=0.093497,0.173721&amp;amp;z=13&amp;amp;iwloc=A&amp;amp;om=0"&gt;Gorilla Nation office&lt;/a&gt; in Culver City. Our special guest will be &lt;a href="http://www.groovie.org/"&gt;Ben Bangert&lt;/a&gt;, the creator of &lt;a href="http://pylonshq.com/"&gt;Pylons&lt;/a&gt;, who will give us an introduction to his framework. We'll also have a presentation from Pablo Noego from Gorilla Nation on a chat application he wrote using Google App Engine. We'll probably also have an informal discussion on Python mock testing tools and techniques.&lt;br /&gt;&lt;br /&gt;BTW, I am putting together a Google code project for mock testing techniques in Python, in preparation for a presentation I would like to give to the group at some point. I called the project &lt;a href="http://code.google.com/p/moctep/"&gt;moctep&lt;/a&gt;, in honor of that ancient Egyptian deity, the protector of testers (or mockers, or maybe both). It doesn't have much so far, but there's some sample code you can browse through in the svn repository if you're curious. I'll be adding more meat to it soon.&lt;br /&gt;&lt;br /&gt;Anyway, if you're a Pythonista who happens to be in the L.A. area on Thursday, please consider attending our meeting. It will be lots of fun, guaranteed.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/special-guest-for-next-socal-piggies.html' title='Special guest for next SoCal Piggies meeting'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=2905170341532078423' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/2905170341532078423/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/2905170341532078423'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/2905170341532078423'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-5789133249506193540</id><published>2008-04-22T12:03:00.000-07:00</published><updated>2008-04-22T12:06:41.743-07:00</updated><title type='text'>"OLPC Automated Testing" project accepted for SoC</title><content type='html'>I'm happy to say that Zach Riggle's application for this year's Google Summer of Code, "&lt;a href="http://code.google.com/soc/2008/psf/appinfo.html?csaid=F89A4969030B59E6"&gt;OLPC Project Automated Testing&lt;/a&gt;", was accepted. I'm looking forward to mentoring Zach, and having Titus as a backup mentor. There's some very cool stuff that can be done in this area, and I hope that at the end of the summer we'll have some solid automated testing techniques and tools that can be applied to any Python project, not only to the OLPC Sugar environment. Stay tuned for more info on this project. BTW, here is the &lt;a href="http://code.google.com/soc/2008/psf/about.html"&gt;list of PSF-sponsored applications&lt;/a&gt; accepted for this years' SoC.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/olpc-automated-testing-project-accepted.html' title='&quot;OLPC Automated Testing&quot; project accepted for SoC'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=5789133249506193540' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/5789133249506193540/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/5789133249506193540'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/5789133249506193540'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-8140015552038814154</id><published>2008-04-17T14:28:00.000-07:00</published><updated>2008-04-17T14:32:59.782-07:00</updated><title type='text'>Come work for RIS Technology</title><content type='html'>&lt;span style="font-family: &amp;quot;Verdana&amp;quot;,&amp;quot;sans-serif&amp;quot;; color: rgb(66, 65, 66);"&gt;We just posted this on craigslist, but it never hurts to blog about it too. If you're interested, send an email to techjobs at ristech.net. You and I might get to work together on the same team!&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-weight: bold;"&gt;Open Source Tech Top Guns Wanted&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;Verdana&amp;quot;,&amp;quot;sans-serif&amp;quot;; color: rgb(66, 65, 66);"&gt;Are you a passionate Linux user? Are you running the latest Ubuntu alpha release on your laptop just because you can? Are you wired to the latest technologies -- things like Amazon EC2/S3 and Google AppEngine? Are you a virtuoso when it comes to virtualization (Xen/VMWare)?&lt;br /&gt;&lt;br /&gt;Do you program in Python? Do you take hard problems as personal challenges and don't give up until you solve them?&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.ristech.net"&gt; RIS Technology Inc.&lt;/a&gt; is a rapidly growing Los Angeles-based premium managed hosting provider that hosts and manages internet applications for medium to large size organizations nationwide. We have grown consistently at 100% each of the past four years and are currently hiring for additional growth at our corporate operations center near LAX, in Los Angeles, CA. We have immediate openings for dedicated and knowledgeable technology engineers. If the answer to the questions above is YES, then we'd like to extend an invitation to interview with us.&lt;br /&gt;&lt;br /&gt;We are an equal opportunity employer and have excellent benefits. We realize that one of the main things that makes us excellent are the people we choose to work with. We look for the best and brightest and our goal is to make work less "work" and more fun.&lt;/span&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/come-work-for-ris-technology.html' title='Come work for RIS Technology'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=8140015552038814154' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/8140015552038814154/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/8140015552038814154'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/8140015552038814154'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-1523522134437380032</id><published>2008-04-16T15:19:00.000-07:00</published><updated>2008-04-16T15:30:18.780-07:00</updated><title type='text'>Google App Engine feels constrictive</title><content type='html'>I've been toying a bit with &lt;a href="http://appengine.google.com/"&gt;Google App Engine&lt;/a&gt;. I was lucky enough to score one of the 10,000 developer accounts. I first went through their tutorial, which was fine. Then I tried to port a simple application that I used to run from the command line, which queried a range of IP addresses for their reverse DNS names. No luck. I was using the &lt;a href="http://www.dnspython.org/"&gt;dnspython&lt;/a&gt; module, which in turn uses the Python socket module -- and socket is not available within the Google App Engine sandbox environment.&lt;br /&gt;&lt;br /&gt;Also, I was talking to Michał on rewriting the &lt;a href="http://mousebender.wordpress.com/2007/02/09/cheesecake-for-all/"&gt;Cheesecake service&lt;/a&gt; to run on Google App Engine, but he pointed out that cron jobs are not allowed, so that won't work either... It seems that with everything I've tried with GAE I've run into a wall so far. I know it's a 'paradigm change' for Web development, but still, I can't help wishing I had my favorite Python modules to play with.&lt;br /&gt;&lt;br /&gt;What has your experience been with GAE so far? I know &lt;a href="http://farmdev.com/"&gt;Kumar&lt;/a&gt; wrote a cool &lt;a href="http://farmdev.com/thoughts/44/pypi-cheeseshop-on-google-app-engine/"&gt;PyPI mirror in GAE&lt;/a&gt;, but I haven't seen many other 'real life' applications mentioned on Planet Python.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/google-app-engine-feels-constrictive.html' title='Google App Engine feels constrictive'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=1523522134437380032' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/1523522134437380032/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/1523522134437380032'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/1523522134437380032'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-7658883971259092053</id><published>2008-04-11T14:07:00.000-07:00</published><updated>2008-04-11T14:17:41.030-07:00</updated><title type='text'>Ubuntu Gutsy woes with Intel 801 graphics card</title><content type='html'>I just upgraded my Dell Inspiron 6000 laptop to Ubuntu Gutsy last night. My graphics card is based on the Intel 810 chipset. After the upgrade, everything graphics-related was dog-slow. Scrolling in Firefox was choppy, IM-ing was choppy, even typing at the console was choppy. Surprisingly, I didn't find a lot of solutions to this problem. But many people on Ubuntu forums suggested disabling &lt;a href="https://help.ubuntu.com/community/CompositeManager"&gt;compiz/xgl&lt;/a&gt;, so that's what I ended up doing. In fact, I uninstalled all compiz and xgl-related packages, rebooted, and graphics became snappy again. Now back to trying to write an application to run on &lt;a href="http://blag.whit537.org/2008/04/simplates-biblical-greek-on-google-app.html"&gt;THE GOOGLE&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/ubuntu-gutsy-woes-with-intel-801.html' title='Ubuntu Gutsy woes with Intel 801 graphics card'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=7658883971259092053' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/7658883971259092053/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/7658883971259092053'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/7658883971259092053'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-1639169302906674601</id><published>2008-04-10T16:22:00.000-07:00</published><updated>2008-04-10T16:23:55.964-07:00</updated><title type='text'>Meme du jour: shell history</title><content type='html'>Here's mine from my Ubuntu laptop:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;$ history|awk '{a[$2]++ } END{for(i in a){print a[i] " " i}}' |sort -rn|head&lt;br /&gt;121 cd&lt;br /&gt;91 ssh&lt;br /&gt;82 ls&lt;br /&gt;46 vi&lt;br /&gt;28 python&lt;br /&gt;26 scp&lt;br /&gt;16 dig&lt;br /&gt;12 more&lt;br /&gt;7 twistd&lt;br /&gt;6 rm&lt;br /&gt;&lt;/pre&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/meme-du-jour-shell-history.html' title='Meme du jour: shell history'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=1639169302906674601' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/1639169302906674601/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/1639169302906674601'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/1639169302906674601'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-39140761307615214</id><published>2008-04-03T08:46:00.000-07:00</published><updated>2008-04-03T13:16:13.016-07:00</updated><title type='text'>Steve Loughran on 'Farms, Fabrics and Clouds'</title><content type='html'>Yesterday I and my colleagues at RIS Technology had the pleasure of attending a remote presentation given to us by &lt;a href="http://www.1060.org/blogxter/publish/5"&gt;Steve Loughran&lt;/a&gt;, who works as a researcher at HP Labs and is also a committer on the Ant project. I had seen Steve's slides from a &lt;a href="http://www.1060.org/blogxter/entry?publicid=23AE9FADDAE7A343528B4FAF6244949A"&gt;presentation&lt;/a&gt; he gave at the University of Bristol on 'Farms, Fabrics and Clouds' back in December 2007, and I have been pestering him via email ever since, hoping to have him release a screencast. After much back and forth, Steve offered to simply present for now directly to us via Skype. He did it out of the goodness of his heart, but both he and I realized that there's a nice little business opportunity in this type of presentation: you release the slides with no audio, then you get hired to present to interested parties in person, remotely, via Skype and a shared set of slides, with a Q&amp;amp;A session at the end. Everybody wins in this scenario. Filing it in the 'ideas worth trying' category.&lt;br /&gt;&lt;br /&gt;To come back to Steve's presentation -- here are the &lt;a href="http://people.apache.org/%7Estevel/slides/farms_fabrics_and_clouds.pdf"&gt;slides&lt;/a&gt; from a previous version. I hope he will soon post the updated version we saw yesterday, but the differences are not major. The co-author of the talk is Julio Guijarro. Their area of interest within HP Labs is the deployment of large applications across distributed resources and the management of these apps/resources with an eye to maximizing their output and minimizing their cost. A familiar (and hard) problem for everybody who works in the hosting industry.&lt;br /&gt;&lt;br /&gt;Steve talked about how the infrastructure architectures have changed over the years from a single web server talking to a single database server, to clustering, and finally to server farms and computing-on-demand. The challenge for us 'server farmers' is to figure a way to manage thousands of servers, heaps of storage, a myriad of network infrastructure devices, and large distributed applications on top of that -- all while keeping everything purring and happy, running to their maximum potential. Sounds impossible, but Amazon seems to be doing a decent job at it. And in fact Steve spent quite some time talking about how Amazon changed the game by their S3 and EC2 offerings. Even though they're not quite ready for prime time in terms of production deployments, Amazon will soon get there. As a proof, see their recent introduction of static IP addresses in EC2, and of the possibility of running your application in different data centers.&lt;br /&gt;&lt;br /&gt;In my opinion, the best of Steve's slides are the 'Assumptions that are now invalid' ones. They really turn the 'established facts and best practices' of infrastructure and application design on their heads. Here are some examples of assumptions that don't hold anymore in our day and time:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;it is expensive to create, deploy and duplicate a new system, running a Linux image of your choice (see &lt;a href="http://www.instalinux.com/howto.php"&gt;Instalinux&lt;/a&gt; as a counter-example)&lt;/li&gt;&lt;li&gt;system failure is unusal and 100% availability can be achieved&lt;/li&gt;&lt;li&gt;databases are the best form of storage&lt;/li&gt;&lt;li&gt;you need physical access to the data center&lt;/li&gt;&lt;li&gt;a single server farm needs to scale to infinity&lt;/li&gt;&lt;/ul&gt;My other favorite part, which is not in the online slides yet, is the concept of '&lt;span style="font-weight: bold;"&gt;agile infrastructure&lt;/span&gt;'. I haven't seen this concept before applied to server hosting, but Steve has a great point here. If you look at something like Amazon EC2, where you can pay as you go, you can test you application in a smaller environment and then scale it up, you can move your application between data centers -- this is indeed an agile environment that also imposes some new demands on your application.&lt;br /&gt;&lt;br /&gt;I really recommend that you check out Steve's slides. There's a lot to chew on, but you can't afford not to chew on it, if you have anything to do with the IT industry these days.&lt;br /&gt;&lt;br /&gt;Here are a couple more links that might prove useful:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://wiki.smartfrog.org/wiki/display/sf/Anubis"&gt;Anubis&lt;/a&gt;: a tuple-space implementation that uses multicast to share information between hosts within a site&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.smartfrog.org/"&gt;SmartFrog&lt;/a&gt;: a technology from HP used to distribute and manage applications (think &lt;a href="http://puppet.reductivelabs.com/"&gt;puppet&lt;/a&gt; but geared towards application deployment); see also &lt;a href="http://video.google.com/videoplay?docid=-4478242864801668108"&gt;Google video&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Thanks again to Steve for presenting to us. Now, as a server farmer, I need to go back to my plow and try to improve it (maybe buy a tractor?)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Update&lt;/span&gt;: Steve has some &lt;a href="http://www.1060.org/blogxter/entry?publicid=A4E44B16B7DFF9574F07795DC734C782&amp;amp;token="&gt;more thoughts on the Agile Infrastructure concept&lt;/a&gt;. Intriguing. This is something I'll definitely keep a very close eye on and tinker with.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/steve-loughran-on-farms-fabrics-and.html' title='Steve Loughran on &apos;Farms, Fabrics and Clouds&apos;'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=39140761307615214' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/39140761307615214/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/39140761307615214'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/39140761307615214'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-4722364007115444741</id><published>2008-04-02T15:11:00.001-07:00</published><updated>2008-04-02T15:13:57.529-07:00</updated><title type='text'>For you students interested in GSoC</title><content type='html'>If you're a student and you want to apply for a Python-related project for Google Summer of Code 2008, Matt Harrison has &lt;a href="http://panela.blog-city.com/gsoc_project_for_branch_coverage_reporting_for_python.htm"&gt;just the project for you&lt;/a&gt;. The project has to do with branch coverage analysis and reporting. Matt is willing to mentor too. It's a really good opportunity, so don't hesitate to apply. Hurry up though, the deadline is April 8th.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/for-you-students-interested-in-gsoc.html' title='For you students interested in GSoC'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=4722364007115444741' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/4722364007115444741/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/4722364007115444741'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/4722364007115444741'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-4096476391991893883</id><published>2008-04-01T08:00:00.000-07:00</published><updated>2008-04-01T08:05:54.312-07:00</updated><title type='text'>TurboGears and Pylons finally merging</title><content type='html'>This has been a long time coming, and fans of both projects have been eagerly waiting for it, but it's finally happened. Not sure if you've seen the announcements from Kevin Dangoor, Mark Ramm and Ben Bangert on their projects' mailing lists, but basically they boil down to "we feel like after the sprints at PyCon we made enough progress so that we can pull the trigger on merging the source code from the 2 projects in one common trunk." They make it sound like it was purely a technological problem, but I have my doubts about that. I think it was driven in part by the increasing popularity of Django. Unifying TurboGears and Pylons is a somewhat desperate measure to chip away at the Django market share. We'll see if it works or not. Check out the brand new page of the TurboPylons project.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/04/turbogears-and-pylons-finally-merging.html' title='TurboGears and Pylons finally merging'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=4096476391991893883' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/4096476391991893883/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/4096476391991893883'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/4096476391991893883'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-4034119983905010702</id><published>2008-03-31T10:15:00.000-07:00</published><updated>2008-03-31T10:24:27.560-07:00</updated><title type='text'>ReviewBoard: open source code review tool</title><content type='html'>Via Marc Hedlund's &lt;a href="http://radar.oreilly.com/archives/2008/03/review-board-is-good-software.html"&gt;post&lt;/a&gt; on O'Reilly Radar, here's an open source code review tool from VMWare:&lt;a href="http://review-board.org/"&gt; ReviewBoard&lt;/a&gt;. For all of us non-googlers out there, it's probably the next best thing to Guido's Mondrian (question: why has that tool not been released as open source?). Check out the sweet &lt;a href="http://flickr.com/photos/chipx86/sets/72157600297790516/detail/"&gt;screenshots&lt;/a&gt;. The kicker though is that &lt;a href="http://code.google.com/p/reviewboard/"&gt;it uses Python and Django&lt;/a&gt;. Way to go, VMWare!</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/reviewboard-open-source-code-review.html' title='ReviewBoard: open source code review tool'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=4034119983905010702' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/4034119983905010702/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/4034119983905010702'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/4034119983905010702'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-1695291957816043153</id><published>2008-03-31T09:55:00.001-07:00</published><updated>2008-03-31T12:46:26.981-07:00</updated><title type='text'>Python code complexity metrics and tools</title><content type='html'>There's a buzz in the air around code complexity, metrics, code coverage, etc. It started with Matt Harrison's &lt;a href="http://panela.blog-city.com/pycon_2008_managing_complexity_slides.htm"&gt;PyCon presentation&lt;/a&gt;, then Ned Batchelder &lt;a href="http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html"&gt;jumped in&lt;/a&gt; with a nice McCabe &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt; computation/visualization tool, and now David Stanek posted about his &lt;a href="http://www.traceback.org/2008/03/31/measuring-cyclomatic-complexity-of-python-code/"&gt;pygenie&lt;/a&gt; tool -- which also measures the McCabe cyclomatic complexity of Python code. Now it's time to unify all these ideas in one powerful tool that computes not only complexity but also path or at least branch coverage. This would make a nice Google Summer of Code project. Too bad the deadline for 2008 GSoC applications is in 7 hours...Maybe for next year.&lt;br /&gt;&lt;br /&gt;Update: David Goodger left a comment pointing me to Martin Blais's &lt;a href="http://furius.ca/snakefood/"&gt;snakefood&lt;/a&gt; package, which computes and shows dependencies for your Python code. It's a good complement to the tools I mentioned above.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/python-code-complexity-metrics-and.html' title='Python code complexity metrics and tools'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=1695291957816043153' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/1695291957816043153/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/1695291957816043153'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/1695291957816043153'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-6977316933082901710</id><published>2008-03-28T10:59:00.000-07:00</published><updated>2008-03-28T11:05:37.823-07:00</updated><title type='text'>Recommended testing conference: CAST 2008</title><content type='html'>If you're a tester and are serious about learning and advancing in your trade, I warmly recommend the &lt;a href="http://www.associationforsoftwaretesting.org/drupal/CAST2008"&gt;CAST 2008&lt;/a&gt; conference which will be held in Toronto, July 14-16. The theme of the conference is "Beyond the Boundaries:  Interdisciplinary Approaches to Software Testing" and the keynote speaker is none other than &lt;a href="http://www.blogger.com/profile/05902673055244863609"&gt;Jerry Weinberg&lt;/a&gt;. And it's REALLY hard to get Jerry Weinberg to speak at a conference, so you might as well take advantage of this opportunity. For more details on CAST 2008, download the &lt;a href="http://www.associationforsoftwaretesting.org/drupal/files/CAST_Brochure.pdf"&gt;PDF brochure&lt;/a&gt;. &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/recommended-testing-conference-cast.html' title='Recommended testing conference: CAST 2008'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=6977316933082901710' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/6977316933082901710/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/6977316933082901710'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/6977316933082901710'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-7113470616182713855</id><published>2008-03-28T10:24:00.000-07:00</published><updated>2008-03-28T10:41:33.304-07:00</updated><title type='text'>It's a good time to be a Python programmer</title><content type='html'>We had the SoCal Piggies meeting at the Disney Animation Studios last night. It was a great meeting -- great presentations from Disney engineers on how they use Python at Disney (and they use it A LOT!), great food, great turnout, and great atmosphere. Let me tell you -- the Disney Animation Studios are *lush*. Thanks to Paul Hildebrandt for organizing the meeting.&lt;br /&gt;&lt;br /&gt;I'll probably blog separately about the technical content of the presentations, but for now I just wanted to comment on the fact that everybody seems to be hiring Python programmers -- &lt;a href="http://gorillanation.com/"&gt;Gorilla Nation&lt;/a&gt; and &lt;a href="http://https://www.virgincharter.com/"&gt;Virgin Charter&lt;/a&gt; are just two companies in the L.A. area that are aggressively looking to hire Python talent. Another thing: we used to have difficulties in finding venues for our meetings. We used to meet at either USC or Caltech, and around 10-12 people max. would show up. Now companies are clamoring for organizing the meetings at their offices, and we have 20-30 people in the audience, with many new faces at every meeting. Even more: Ruby on Rails programmers are showing up at our meetings, looking for an opportunity to be more involved with Python!&lt;br /&gt;&lt;br /&gt;I take that as a sign that Python has arrived. It's a good time to be a Python programmer (or tester, for that matter.)</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/its-good-time-to-be-python-programmer.html' title='It&apos;s a good time to be a Python programmer'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=7113470616182713855' title='9 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/7113470616182713855/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/7113470616182713855'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/7113470616182713855'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-6681817488675650159</id><published>2008-03-25T15:54:00.001-07:00</published><updated>2008-03-25T20:24:36.221-07:00</updated><title type='text'>Easy parsing with pyparsing</title><content type='html'>If you haven't used Paul McGuire's &lt;a href="http://pyparsing.wikispaces.com/"&gt;pyparsing&lt;/a&gt; module yet, you've been missing out on a great tool. Whenever you hit a wall trying to parse text with regular expressions or string operations, 'think pyparsing'.&lt;br /&gt;&lt;br /&gt;I had the need to parse a load balancer configuration file and save certain values in a database. Most of the stuff I needed was fairly easily obtainable with regular expressions or Python string operations. However, I was stumped when I encountered a line such as:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;bind http "Customer Server 1" http "Customer Server 2" http&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This line 'binds' a 'virtual server' port to one or more 'real servers' and their ports (I'm using here this particular load balancer's jargon, but the concepts are the same for all load balancers.)&lt;br /&gt;&lt;br /&gt;The syntax is 'bind' followed by a word denoting the virtual server port, followed by one or more pairs of real server names and ports. The kicker is that the real server names can be either a single word containing no whitespace, or multiple words enclosed in double quotes.&lt;br /&gt;&lt;br /&gt;Splitting the line by spaces or double quotes is not the solution in this case. I started out by rolling my own little algorithm and keeping track of where I am inside the string, then I realized that I'm actually writing my own parser at this point. Time to reach for pyparsing.&lt;br /&gt;&lt;br /&gt;I won't go into the details of how to use pyparsing, since there is great documentation available (see Paul's &lt;a href="http://www.geocities.com/ptmcg/python/pycon06/pyCon2006_pres1.html"&gt;PyCon06 presentation&lt;/a&gt;, the &lt;a href="http://pyparsing.wikispaces.com/Examples"&gt;examples&lt;/a&gt; on the pyparsing site, and also Paul's &lt;a href="http://www.oreilly.com/catalog/9780596514235/index.html"&gt;O'Reilly Shortcut book&lt;/a&gt;). Basically you need to define your grammar for the expression you need to parse, then translate it into pyparsing-specific constructs. Because pyparsing's API is so intuitive and powerful, the translation process is straightforward.&lt;br /&gt;&lt;br /&gt;Here's how I ended up implementing my pyparsing grammar:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;from pyparsing import *&lt;br /&gt;&lt;br /&gt;def parse_bind_line(line):&lt;br /&gt;   quoted_real_server = dblQuotedString.setParseAction(removeQuotes)&lt;br /&gt;   real_server = Word(alphas, printables) | quoted_real_server&lt;br /&gt;   port = Word(alphanums)&lt;br /&gt;   real_server_port = Group(real_server + port)&lt;br /&gt;   bind_expr = Suppress(Literal("bind")) + \&lt;br /&gt;               port + \&lt;br /&gt;               OneOrMore(real_server_port)&lt;br /&gt;   return bind_expr.parseString(line)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;That's all there is to it. You need to read it from the bottom up to see how the expression gets decomposed into elements, and elements get decomposed into sub-elements.&lt;br /&gt;&lt;br /&gt;I'll explain each line, starting with the last one before the return:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;   bind_expr = Suppress(Literal("bind")) + \&lt;br /&gt;               port + \&lt;br /&gt;               OneOrMore(real_server_port)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A bind expression starts with the literal "bind", followed by a port, followed by one or more real server/port pairs. That's pretty much what the line above actually says, isn't it. The Suppress construct tells pyparsing that we're not interested in returning the literal "bind" in the final token list.&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;   real_server_port = Group(real_server + port)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A real server/port pair is simply a real server name followed by a port. The Group construct tells pyparsing that we want to group these 2 tokens in a list inside the final token list.&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;   port = Word(alphanums)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A port is a word composed of alphanumeric characters. In general, word means 'a sequence of characters containing no whitespace'. The 'alphanums' variable is a special pyparsing variable already containing the list of alphanumeric characters.&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;   real_server = Word(alphas, printables) | quoted_real_server&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A real server is either a single word, or an expression in quotes. Note that we can declare a pyparsing Word with 2 arguments; the 1st argument specifies the allowed characters for the initial character of the word, whereas the 2nd argument specified the allowed characters for the body of the word. In this case, we're saying that we want a real server name to start with an alphabetical character, but other than that it can contain any printable character.&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;   quoted_real_server = dblQuotedString.setParseAction(removeQuotes)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here is where you can glimpse the power of pyparsing. With this single statement we're parsing a sequence of words enclosed in double quotes, and we're saying that we're not interested in the quotes. There's also a sglQuotedString class for words enclosed in single quotes. Thanks to Paul for bringing this to my attention. My clumsy attempt at manually declaring a sequence of words enclosed in double quotes ran something like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;no_quote_word = Word(alphanums+"-.")&lt;br /&gt;quoted_real_server = Suppress(Literal("\"")) + \&lt;br /&gt;                      OneOrMore(no_quote_word) + \&lt;br /&gt;                      Suppress(Literal("\""))&lt;br /&gt;quoted_real_server.setParseAction(lambda tokens: " ".join(tokens))&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The only useful thing you can take away from this mumbo-jumbo is that you can associate an action with each token. When pyparsing will encounter that token, it will apply the action (function or class) you specified on that token. This is useful for doing validation of your tokens, for example for a date. Very powerful stuff.&lt;br /&gt;&lt;br /&gt;Now it's time to test my function on a few strings:&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;if __name__ == "__main__":&lt;br /&gt;   tests = """\&lt;br /&gt;bind http "Customer Server 1" http "Customer Server 2" http&lt;br /&gt;bind http "Customer Server - 11" 81 "Customer Server  12" 82&lt;br /&gt;bind http www.mywebsite.com-server1 http www.mywebsite.com-server2 http&lt;br /&gt;bind ssl www.mywebsite.com-server1 ssl www.mywebsite.com-server2 ssl&lt;br /&gt;bind http TEST-server http&lt;br /&gt;bind http MY-cluster-web11 83 MY-cluster-web-12 83&lt;br /&gt;bind http cust1-server1.site.com http cust1-server2.site.com http&lt;br /&gt;""".splitlines()&lt;br /&gt;&lt;br /&gt;   for t in tests:&lt;br /&gt;       print parse_bind_line(t)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Running the code above produces this output:&lt;br /&gt;&lt;br /&gt;&lt;pre class="code"&gt;&lt;br /&gt;$ ./parse_bind.py&lt;br /&gt;['http', ['Customer Server 1', 'http'], ['Customer Server 2', 'http']]&lt;br /&gt;['http', ['Customer Server - 11', '81'], ['Customer Server  12', '82']]&lt;br /&gt;['http', ['www.mywebsite.com-server1', 'http'], ['www.mywebsite.com-server2', 'http']]&lt;br /&gt;['ssl', ['www.mywebsite.com-server1', 'ssl'], ['www.mywebsite.com-server2', 'ssl']]&lt;br /&gt;['http', ['TEST-server', 'http']]&lt;br /&gt;['http', ['MY-cluster-web11', '83'], ['MY-cluster-web-12', '83']]&lt;br /&gt;['http', ['cust1-server1.site.com', 'http'], ['cust1-server2.site.com', 'http']]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;From here, I was able to quickly identify for a given virtual server everything I needed: a virtual server port, and all the real server/port pairs associated with it. Inserting all this into a database was just another step. The hard work had already been done by pyparsing.&lt;br /&gt;&lt;br /&gt;Once more, kudos to Paul McGuire for creating such an useful and fun tool.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/easy-parsing-with-pyparsing.html' title='Easy parsing with pyparsing'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=6681817488675650159' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/6681817488675650159/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/6681817488675650159'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/6681817488675650159'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-6416550052554388352</id><published>2008-03-23T13:43:00.000-07:00</published><updated>2008-03-23T13:48:48.091-07:00</updated><title type='text'>PyCon08 gets great coverage</title><content type='html'>Reports on the &lt;a href="http://groups.google.com/group/comp.lang.python/browse_thread/thread/2b6cb0e7245347be/363c0a5eb952a263%23363c0a5eb952a263"&gt;death of the PyCon conference&lt;/a&gt; as a community experience have been greatly exaggerated. I personally have never seen any PyCon edition as well covered in the blogs aggregated in Planet Python as the 2008 PyCon. If you don't believe me, maybe you'll believe &lt;a href="http://blogsearch.google.com/blogsearch?hl=en&amp;amp;q=pycon&amp;amp;btnG=Search+Blogs"&gt;Google Blog Search&lt;/a&gt;. I think the Python community is alive and well, and ready to rock at PyCon conferences for the foreseeable future. I'm looking forward to PyCon09 in Chicago, and then probably in San Francisco for 2010/11.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/pycon08-gets-great-coverage.html' title='PyCon08 gets great coverage'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=6416550052554388352' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/6416550052554388352/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/6416550052554388352'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/6416550052554388352'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-3900111237524351847</id><published>2008-03-19T09:37:00.001-07:00</published><updated>2008-03-19T09:38:49.997-07:00</updated><title type='text'>PyCon presenters, unite!</title><content type='html'>If you gave a talk at PyCon and haven't uploaded your slides to the official PyCon website yet, but you have posted them online somewhere else, please leave a comment to this post with the location of your slides. I'm helping Doug Napoleone upload the slides, since some authors have experienced issues when trying to upload the slides using their PyCon account. Thanks!</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/pycon-presenters-unite.html' title='PyCon presenters, unite!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=3900111237524351847' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/3900111237524351847/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/3900111237524351847'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/3900111237524351847'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-5562548247615244334</id><published>2008-03-18T11:41:00.000-07:00</published><updated>2008-03-18T12:24:00.155-07:00</updated><title type='text'>Links to resources from PyCon talks</title><content type='html'>I took some notes at the PyCon talks I've been to, and I'm gathering links to resources referenced in these talks. Hopefully they'll be useful to somebody (I know they will be to me at least.)&lt;br /&gt;&lt;br /&gt;      "&lt;span style="font-weight: bold;"&gt;MPI Cluster Programming with Python and Amazon EC2&lt;/span&gt;" by Pete Skomoroch&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://www.datawrangling.com/media/elasticwulf_pycon_talk.pdf"&gt;slides&lt;/a&gt; in PDF format&lt;br /&gt;* Message Passing Interface (MPI) modules for Python: &lt;a href="http://mpi4py.scipy.org/"&gt;mpi4py&lt;/a&gt;, &lt;a href="http://pympi.sourceforge.net/"&gt;pympi&lt;/a&gt;&lt;br /&gt;* &lt;a href="http://code.google.com/p/elasticwulf/"&gt;ElasticWulf&lt;/a&gt; project (Beowulf-like setup on Amazon EC2)&lt;br /&gt;* &lt;a href="http://ipython.scipy.org/doc/ipython1/html/parallel_intro"&gt;IPython1&lt;/a&gt;: parallel computing in Python&lt;br /&gt;* &lt;a href="http://del.icio.us/pskomoroch/ec2+gotchas"&gt;EC2 gotchas&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;"Like Switching on the Light: Managing an Elastic Compute Cluster with Python"&lt;/span&gt; by George Belotsky&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://code.google.com/p/s3fs/wiki/FuseOverAmazon"&gt;S3FS&lt;/a&gt;: mount S3 as a local file system using Fuse (unstable)&lt;br /&gt;* &lt;a href="http://developer.amazonwebservices.com/connect/entry.jspa?externalID=609"&gt;EC2UI&lt;/a&gt;: Firefox extension for managing EC2 clusters&lt;br /&gt;* &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/3247"&gt;S3 Organizer&lt;/a&gt;: Firefox extension for managing S3 storage&lt;br /&gt;* &lt;a href="http://docs.amazonwebservices.com/AmazonEC2/dg/2006-06-26/bundling-an-ami.html"&gt;bundling an EC2 AMI and storing it to S3&lt;/a&gt;&lt;br /&gt;* the &lt;a href="http://code.google.com/p/boto/"&gt;boto library&lt;/a&gt;, which allows programmatic manipulation of Amazon Web services such as EC2, S3, SimpleDB etc. (a python-boto package is available for most Linux distributions too; for example 'yum install python-boto)&lt;br /&gt;&lt;div style="text-align: justify;"&gt;* &lt;a href="http://uml.nagafix.co.uk/"&gt;UML image repository&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;"&lt;span style="font-weight: bold;"&gt;PyTriton: building a petabyte storage system&lt;/span&gt;" by Jonathan Ellis&lt;br /&gt;&lt;br /&gt;* All this was done at &lt;a href="http://mozy.com/"&gt;Mozy&lt;/a&gt; (online remote backup, now owned by EMC, just like Avamar, the company I used to work for)&lt;br /&gt;* They maxed out Foundry load balancers, so they ended up using &lt;a href="http://www.linuxvirtualserver.org/"&gt;LVS&lt;/a&gt; + &lt;a href="http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/LVS-HOWTO.ipvsadm.html"&gt;ipvsadm&lt;/a&gt;&lt;br /&gt;* They used &lt;a href="http://en.wikipedia.org/wiki/Erasure_code"&gt;erasure coding&lt;/a&gt; for data integrity -- rolled their own algorithm but Jonathan recommended that people use &lt;a href="http://pypi.python.org/pypi/zfec"&gt;zfec&lt;/a&gt; &lt;span style="text-decoration: underline;"&gt;&lt;/span&gt;developed by &lt;a href="http://www.allmydata.com/"&gt;AllMyData&lt;/a&gt;&lt;br /&gt;* An alternative to erasure coding would be to use &lt;a href="http://en.wikipedia.org/wiki/RAID6#RAID_6"&gt;RAID6&lt;/a&gt;, which is used by &lt;a href="http://www.carbonite.com/"&gt;Carbonite&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"&lt;span style="font-weight: bold;"&gt;Use Google Spreadsheets API to create a database in the cloud&lt;/span&gt;" by Jeffrey Scudder&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://docs.google.com/Present?docid=dcmg89gw_70g6ct9jcz"&gt;slides&lt;/a&gt; online&lt;br /&gt;* &lt;a href="http://code.google.com/apis/spreadsheets/overview.html"&gt;APIs and documentation&lt;/a&gt; on google code&lt;br /&gt;&lt;br /&gt;"&lt;span style="font-weight: bold;"&gt;Supervisor as a platform&lt;/span&gt;" by Chris McDonough and Mike Naberezny&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://supervisord.org/wp-content/uploads/2008/03/supervisor-pycon2008.pdf"&gt;slides&lt;/a&gt; online&lt;br /&gt;* &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; home page&lt;br /&gt;&lt;br /&gt;"&lt;span style="font-weight: bold;"&gt;Managing complexity (and testing)&lt;/span&gt;" by Matt Harrison&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://files.blog-city.com/files/F05/96843/b/complexitypycon2008.pdf"&gt;slides&lt;/a&gt; online&lt;br /&gt;* &lt;a href="http://sourceforge.net/projects/pymetrics"&gt;PyMetrics&lt;/a&gt; module for measuring the McCabe complexity of your code&lt;br /&gt;* &lt;a href="http://nedbatchelder.com/code/modules/coverage.html"&gt;coverage&lt;/a&gt; module and &lt;a href="http://darcs.idyll.org/%7Et/projects/figleaf/doc/"&gt;figleaf&lt;/a&gt; module for measuring your code coverage&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;font-size:smaller;" &gt;&lt;/span&gt;&lt;span style="font-weight: bold;"&gt;Resources from lightning talks&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;* &lt;a href="http://bug.gd/"&gt;bug.gd&lt;/a&gt; -- online repository of solutions to bugs, backtraces, exceptions etc (you can easy_install bug.gd, then call error_help() after you get a traceback to try to get a solution)&lt;br /&gt;* &lt;a href="http://exogen.case.edu/projects/geopy/"&gt;geopy&lt;/a&gt; -- geocode package&lt;br /&gt;* &lt;a href="http://pvote.org/"&gt;pvote.org&lt;/a&gt; -- &lt;a href="http://zesty.ca/"&gt;Ka-Ping Yee&lt;/a&gt;'s electronic voting software in 460 lines of Python (see also Ping's PhD dissertation on the topic of &lt;a href="http://zesty.ca/pubs/yee-phd.pdf"&gt;Building Reliable Voting Machine Software&lt;/a&gt;)&lt;br /&gt;* &lt;a href="http://bitsyblog.biz/"&gt;bitsyblog&lt;/a&gt; -- a minimalist approach to blog software</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/links-to-resources-from-pycon-talks.html' title='Links to resources from PyCon talks'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=5562548247615244334' title='6 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/5562548247615244334/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/5562548247615244334'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/5562548247615244334'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-5300944077701754823</id><published>2008-03-18T08:57:00.001-07:00</published><updated>2008-03-18T09:01:06.964-07:00</updated><title type='text'>JP posted nose talk slides and code</title><content type='html'>If you attended Jason Pellerin's talk on the &lt;a href="http://code.google.com/p/python-nose/"&gt;nose&lt;/a&gt; test framework at PyCon08, you'll be glad to know he just posted his &lt;a href="http://us.pycon.org/common/2008/talkdata/PyCon2008/079/nose_pycon08.pdf"&gt;slides&lt;/a&gt; and the &lt;a href="http://us.pycon.org/common/2008/talkdata/PyCon2008/079/nose_pycon08_atomzr_final.tgz"&gt;sample app&lt;/a&gt; that shows how he writes and runs unit and functional tests under nose. I'm advertising this here because he only sent a message to the nose mailing list.</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/jp-posted-nose-talk-slides-and-code.html' title='JP posted nose talk slides and code'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=5300944077701754823' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/5300944077701754823/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/5300944077701754823'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/5300944077701754823'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-9238405.post-8449681739136892105</id><published>2008-03-17T17:06:00.000-07:00</published><updated>2008-03-17T17:25:30.303-07:00</updated><title type='text'>Slides and links from the Testing Tools tutorial</title><content type='html'>Here are &lt;a href="http://agilistas.org/presentations/pycon08/grig_tutorial_pycon08.pdf"&gt;my slides&lt;/a&gt; from the Testing Tools tutorial in PDF format. Not very informative I'm afraid -- I didn't actually show them to the attendees, I just talked about those topics while demo-ing them. If you want to find out more about the state of the Selenium project, watch this YouTube video of the &lt;a href="http://youtube.com/watch?v=EDb8yOM3Vpw"&gt;Selenium Meetup&lt;/a&gt; at Google.&lt;br /&gt;&lt;br /&gt;Here are some random thoughts on Selenium testing which I mentioned during the tutorial:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;composing Selenium tests, especially for Ajax functionality, is HARD; the Selenium IDE helps a bit, but you still have to figure out how to wait for certain HTML elements to either appear or disappear from the page under test&lt;/li&gt;&lt;li&gt;version 1.0 of the Sel. IDE, soon to be released, will record Ajax actions by default, so hopefully this will speed up Selenium test creation&lt;/li&gt;&lt;li&gt;if you already have a Selenium Core test in HTML format, an easy way to obtain a Selenium RC test in Python is to open the HTML file in the Selenium IDE, then export the test case as Python; however, to actually make the resulting code readable/reusable, you have to do some pretty major refactoring&lt;/li&gt;&lt;li&gt;identifying HTML elements (or locators, as Selenium calls them) by their XPath value is hard, but it's sometimes the only way to get to them in order to assert something about them; I found tools such as &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/1095"&gt;XPath Checker&lt;/a&gt;, &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/1192"&gt;XPather&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/1843"&gt;Firebug&lt;/a&gt; invaluable (they all happen to be Mozilla add-ons, but you can use Firefox to compose your tests, then run them in any browser supported by Selenium; however, YMMV especially when it comes to evaluating XPath expressions in IE)&lt;/li&gt;&lt;li&gt;because XPath locators are brittle in the face of constant HTML changes, please use HTML ID tags to identify your elements; I know at least one company (hi, Terry) where testers do not even start writing Selenium tests until developers have identified all elements of interest with an HTML ID&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;For people interested in FitNesse and on various acceptance testing topics, please see my blog posts in the Acceptance Testing and Web Application Testing sections of &lt;a href="http://vallista.idyll.org/%7Egrig/articles/"&gt;this page&lt;/a&gt;. If you are interested in how Titus and I tested the MailOnnaStick application, we have a &lt;a href="http://agile.idyll.org/"&gt;whole wiki&lt;/a&gt; dedicated to this topic. Another resource of interest might be the &lt;a href="http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy"&gt;Python Testing Tools Taxonomy&lt;/a&gt; wiki, with links to a myriad of Python testing tools.&lt;br /&gt;&lt;br /&gt;I'll post soon on some topics that were discussed during the tutorial, especially on how to test an application against external interfaces or resources that are not under your control (think 'mocking').</content><link rel='alternate' type='text/html' href='http://agiletesting.blogspot.com/2008/03/slides-and-links-from-testing-tools.html' title='Slides and links from the Testing Tools tutorial'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=9238405&amp;postID=8449681739136892105' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/8449681739136892105/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://agiletesting.blogspot.com/feeds/posts/default/8449681739136892105'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/9238405/posts/default/8449681739136892105'/><author><name>Grig Gheorghiu</name><uri>http://www.blogger.com/profile/17863511617654196370</uri><email>noreply@blogger.com</email></author></entry></feed>