<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-19730683</id><updated>2008-04-25T20:18:09.204-04:00</updated><title type='text'>Jeremy Hylton: Inconceivable</title><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>68</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-19730683.post-8580917530466092749</id><published>2008-04-06T21:24:00.004-04:00</published><updated>2008-04-06T21:29:41.516-04:00</updated><title type='text'>Election Certificate</title><content type='html'>&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://bp2.blogger.com/_AKRpDaFfLvs/R_l42qZNEYI/AAAAAAAABbE/jfLK5DT71Mw/s1600-h/certificate.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://bp2.blogger.com/_AKRpDaFfLvs/R_l42qZNEYI/AAAAAAAABbE/jfLK5DT71Mw/s320/certificate.png" alt="" id="BLOGGER_PHOTO_ID_5186309326382109058" border="0" /&gt;&lt;/a&gt;&lt;br /&gt;   I won a local election a few years ago by a single vote--my own.  It was fun to receive the official certification, which has a form to fill out with name and vote total.  The form includes the word "votes" rather than "vote(s)," which would have been more appropriate in my case.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2008/04/election-certificate.html' title='Election Certificate'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=8580917530466092749' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/8580917530466092749/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/8580917530466092749'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/8580917530466092749'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-499822485347515670</id><published>2008-03-21T20:15:00.011-04:00</published><updated>2008-03-22T11:54:07.921-04:00</updated><title type='text'>Lightning Talks</title><content type='html'>I missed PyCon this year.  It was the first time I skipped a Python conference since I started going in 1997.  I've been reading reports from bloggers eagerly.  One of the larger discussions is about the sponsor lightning talks, which weren't well received.  &lt;a href="http://www.sauria.com/blog/bio/"&gt;Ted Leung&lt;/a&gt; commented that we should thank the Perl folks for the &lt;a href="http://www.sauria.com/blog/2008/03/20/on-conferences/"&gt;lightning talks&lt;/a&gt;, but I think they have a long history at Python conferences.&lt;br /&gt;&lt;br /&gt;I ran the first session of &lt;a href="http://www.python.org/workshops/1997-10/shorties.html"&gt;short talks&lt;/a&gt; at the Python conference in 1997: "Content-wise, anything goes, as long as it is deemed interesting for a room full of Python users and developers, and as long as the content is technical, not marketing material."&lt;br /&gt;&lt;br /&gt;I have a distinct recollection of seeing a short talk  by &lt;a href="http://www.dogfish.org/chris/"&gt;Christopher Small&lt;/a&gt; at a Usenix conference that inspired our short talks session.  He had just a few minutes for the talk and something like 17 slides.  He had someone turn the slides for him at regular intervals and he tried to keep up.  It was really entertaining.  (I would have guessed it was at the &lt;a href="http://www.usenix.org/publications/library/proceedings/osdi96/wip.html"&gt;1996 OSDI WIP session&lt;/a&gt;, but he's not on the list of speakers.)&lt;br /&gt;&lt;br /&gt;The first speaker at our short talks session with &lt;a href="http://en.wikipedia.org/wiki/Scott_Deerwester"&gt;Scott Deerwester&lt;/a&gt;, and he agreed to use the same presentation style as Small.  I turned his slides for him, whether he was ready or not.  He was a good sport and I think it set a light tone for the rest of the session.&lt;br /&gt;&lt;br /&gt;We didn't have short talks the following year and didn't have a Python conference at all in 1999.  &lt;a href="http://www.dabeaz.com/"&gt;David Beazley&lt;/a&gt; ran the short talks session in 2000.  (&lt;a href="http://www.amk.ca/"&gt;Andrew Kuchling&lt;/a&gt; noted the short talks in his&lt;a href="http://www.amk.ca/python/writing/ipc8"&gt; conference summary&lt;/a&gt;.) The Python folks started calling them &lt;a href="http://mail.python.org/pipermail/python-list/2001-February/071830.html"&gt;lightning talks in 2001 &lt;/a&gt;at the 9th Python conference.  David Ascher ran a session called lightning talks at OSCON in 2003, too.&lt;br /&gt;&lt;br /&gt;I think the name lightning talk is due to &lt;a href="http://perl.plover.com/"&gt;Mark-Jason Dominus&lt;/a&gt;.  We exchanged some email about the Python short talks long ago, when he was planning the first&lt;a href="http://perl.plover.com/lightning-talks.html"&gt; lightning talks session&lt;/a&gt; at a Perl conference.  I've never seen a Perl lightning talk session, so I don't know how they compare to the Python short talks / lightning talks.  I think they deserve a lot of credit for popularizing the idea.&lt;br /&gt;&lt;br /&gt;We've always tried to have fun with the lightning talks.  It's a good place for outrageous opinions or quick demos.  We've gotten less and less formal about it, too.  The first few session required you to sign up in advance and had a full schedule.  Later, we let people sign up on the spot and made up the schedule as we went along.&lt;br /&gt;&lt;br /&gt;The lightning talks have become one of the most popular sessions at the recent PyCons.   They've been scheduled with nothing opposite them (like keynotes, unlike regular talks), and there have been several sessions of them.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2008/03/lightning-talks.html' title='Lightning Talks'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=499822485347515670' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/499822485347515670/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/499822485347515670'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/499822485347515670'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-8592100898346516586</id><published>2008-01-24T14:50:00.000-05:00</published><updated>2008-01-24T23:05:23.407-05:00</updated><title type='text'>Dave Weissman needs a haircut</title><content type='html'>He may argue the point, but I think he is wrong.&lt;br /&gt;&lt;br /&gt;Update: &lt;a href="http://mreid.livejournal.com/2202.html"&gt;mreid agrees.&lt;/a&gt;  &lt;a href="http://nina.kang.googlepages.com/dave-weissman-hair-bandwagon"&gt;kang agrees.&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2008/01/dave-weissman-needs-haircut.html' title='Dave Weissman needs a haircut'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=8592100898346516586' title='9 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/8592100898346516586/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/8592100898346516586'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/8592100898346516586'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-9151047832363116739</id><published>2007-09-18T14:13:00.000-04:00</published><updated>2007-09-18T14:30:18.898-04:00</updated><title type='text'>Beautiful libraries</title><content type='html'>I found this &lt;a href="http://www.curiousexpeditions.org/2007/09/a_librophiliacs_love_letter_1.html"&gt;love letter to libraries&lt;/a&gt; via &lt;a href="http://www.researchbuzz.org/wp/2007/09/18/researchbuzz-roundup-091807/"&gt;ResearchBuzz&lt;/a&gt;.    I've only been to a few of these libraries myself:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The &lt;a href="http://www.curiousexpeditions.org/Peabody%20Library.jpg"&gt;Peabody Library&lt;/a&gt; in Baltimore.  I lived a few blocks away.&lt;/li&gt;&lt;li&gt;The &lt;a href="http://www.curiousexpeditions.org/TRINITY-COLLEGE-LIBRARY-DUB%20%28%29.jpg"&gt;Long Room&lt;/a&gt; at Trinity College Dublin.  I lived more than a few blocks away, but not too far.&lt;/li&gt;&lt;li&gt;The public libraries in Boston and New York&lt;/li&gt;&lt;li&gt;Not on the list, but others I've enjoyed:  The &lt;a href="http://www.hno.harvard.edu/gazette/2004/09.30/photos/15-widener2-225.jpg"&gt;Widener Library&lt;/a&gt;.  The Hayden science library at MIT is not pretty; it looks like a cheap motel.  It does have a &lt;a href="http://web.mit.edu/cai/www/photo/MITlibrary/k001012.jpg"&gt;wonderful view of Boston and the Charles River&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/09/beautiful-libraries.html' title='Beautiful libraries'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=9151047832363116739' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/9151047832363116739/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/9151047832363116739'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/9151047832363116739'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-7105390090218006763</id><published>2007-05-09T22:32:00.000-04:00</published><updated>2007-05-10T10:44:06.020-04:00</updated><title type='text'>McNamara, Unions, and Labor Costs</title><content type='html'>Paul Graham recently posted &lt;a href="http://www.paulgraham.com/unions.html"&gt;An Alternative Theory of Unions&lt;/a&gt; that compares union workers with servers--in particular with the notion that Internt Bubble companies overpaid for servers the way manufacturing companies overpaid works in the 1950s.  He picks car manufacturers as a specific example:&lt;br /&gt;&lt;blockquote&gt;If you looked in the head of a 1950s auto executive, the attitude must have been: sure, give 'em whatever they ask for, so long as the new model isn't delayed.&lt;/blockquote&gt;I don't agree with the argument in general, and I think this particular suggestion is just plain wrong.  &lt;a href="http://web.worldbank.org/WBSITE/EXTERNAL/EXTABOUTUS/EXTARCHIVES/0,,contentMDK:20502974%7EpagePK:36726%7EpiPK:437378%7EtheSitePK:29506,00.html"&gt;Robert McNamara&lt;/a&gt; who was responsible for financial controls and planning for the Ford Motor Company in the 1950s, ultimately becoming president in 1960.  McNamara was well aware of the cost of every part of producing a car and worked hard to keep costs down at Ford.&lt;br /&gt;&lt;br /&gt;I've been reading David Halberstam's brilliant book on Vietnam, &lt;a href="http://www.amazon.com/Best-Brightest-David-Halberstam/dp/0449908704"&gt;&lt;span style="font-style: italic;"&gt;The Best and the Brightest&lt;/span&gt;&lt;/a&gt;.  He has an interesting discussion of McNamara's relationship with labor unions at Ford.  He suggests that McNamara, a liberal former Harvard professor, was sympathetic to union concerns but more concerned about cutting costs.&lt;br /&gt;&lt;br /&gt;McNamara was one of the people behind the Ford Falcon, a smaller, cheaper Ford car that was a big success.  The Wikipedia article on the &lt;a href="http://en.wikipedia.org/wiki/Ford_Falcon_%28North_American%29"&gt;Ford Falcon&lt;/a&gt; observes that towards the end of the 1950s American cars were becoming increasingly expensive because of wage inflation.&lt;br /&gt;&lt;br /&gt;I don't know much about manufacturing in general, but the analogy does not seem to apply in cars.  Labor was expensive for carmakers in the 1950s.  They seemed to be aware of the costs and tried to control them.&lt;br /&gt;&lt;br /&gt;If anything, the earlier generation of Ford leadership liked unions even less.  Halberstam writes,&lt;br /&gt;&lt;blockquote&gt;Under Henry [Ford] senior and Harry Bennett the policies of the company were singularly primitive.  The public was a problem, the unions were a problem, the bankers were a problem.&lt;/blockquote&gt;Update: Some of the &lt;a href="http://www.marginalrevolution.com/marginalrevolution/2007/05/paul_graham_on_.html"&gt;comments on Paul's article at Marginal Revolution&lt;/a&gt; make similar points.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/05/mcnamara-unions-and-labor-costs.html' title='McNamara, Unions, and Labor Costs'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=7105390090218006763' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/7105390090218006763/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/7105390090218006763'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/7105390090218006763'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-4365331868498776031</id><published>2007-04-12T11:27:00.000-04:00</published><updated>2007-04-12T11:37:42.621-04:00</updated><title type='text'>Armadillo Migration</title><content type='html'>There's no reason to post about armadillos today.  Many years ago, I read an entertaining article in the &lt;a href="http://pqasb.pqarchiver.com/washingtonpost/access/32376699.html?dids=32376699:32376699&amp;FMT=ABS&amp;amp;FMTS=ABS:FT&amp;date=JUL+27%2C+1998&amp;amp;author=Jennifer+8.+Lee&amp;pub=The+Washington+Post&amp;amp;desc=At+4+to+6+Miles+a+Year%2C+%60Little+Armored+Ones%27+Advance+North&amp;pqatl=google"&gt;Washington Post about armadillos&lt;/a&gt;.  I remembered that the armadillos could be expected to survive in Maryland and Pennsylvania, but I didn't remember how slow the northward migration was.  I foolishly hoped to see an armadillo in my backyard one day.&lt;br /&gt;&lt;br /&gt;Tara and I found the original article in Google's news archive last night.  It says&lt;br /&gt;&lt;blockquote&gt;In another century or so, they could reach the White House as they continue their northward migration.&lt;/blockquote&gt;It will be a long time until we see them in Easton.&lt;br /&gt;&lt;br /&gt;The article quotes &lt;a href="http://biology.missouristate.edu/faculty_pages/Robbins/bats/index.htm"&gt;Lynn Robbins&lt;/a&gt; on the subject.  His co-author Joshua Nixon has a short overview page on &lt;a href="http://www.msu.edu/%7Enixonjos/armadillo/expansion.html"&gt;armadillo expansion&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/04/armadillo-migration.html' title='Armadillo Migration'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=4365331868498776031' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/4365331868498776031/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/4365331868498776031'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/4365331868498776031'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-7212068257255406926</id><published>2007-02-27T13:35:00.000-05:00</published><updated>2007-02-27T13:40:24.852-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><title type='text'>Flight delayed, bugs fixed</title><content type='html'>My original flight from Dallas back to Newark was cancelled because of mechanical problems with the plane.  I got bumped from a 10:30 flight to a 2:45 flight, which left me a few hours for hacking and socializing at the &lt;a href="http://us.pycon.org/TX2007/Sprinting"&gt;PyCon sprints&lt;/a&gt; this morning.  I had breakfast with Jeff Elkner and caught up on his software and teaching projects, and I got to finish some &lt;a href="http://svn.python.org/view?rev=53997&amp;view=rev"&gt;bug fixes in typeobject.c&lt;/a&gt; that I had worked on yesterday.  I find it very satisfying to fix an Armin Rigo crash bug.  It's usually an accomplishment just to understand it.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/02/flight-delayed-bugs-fixed.html' title='Flight delayed, bugs fixed'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=7212068257255406926' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/7212068257255406926/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/7212068257255406926'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/7212068257255406926'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-3785457218310281334</id><published>2007-02-27T01:52:00.000-05:00</published><updated>2007-02-27T02:04:50.194-05:00</updated><title type='text'>nonlocal implemented</title><content type='html'>I'm going to love &lt;a href="http://www.python.org/dev/peps/pep-3000/"&gt;Python 3000&lt;/a&gt;!  Thomas Wouters and I implemented &lt;a href="http://www.python.org/dev/peps/pep-3104/"&gt;PEP 3104&lt;/a&gt; tonight.  It fixes a wart in the original nested scopes implementation that I did in 2001.  In that version of nested scopes, we did not allow names defined in one function to be rebound in an enclosing function.  It was impossible for the compiler to distinguish between an assignment that creates a local and an assignment that rebinds.  Python 3000 will fix this using the nonlocal statement.  I hate the name nonlocal, but no one has thought of a better name.  &lt;a href="http://zesty.ca/"&gt;Ka-Ping Yee&lt;/a&gt; wrote PEP 3104 and provided an exhaustive list of alternate names,&lt;br /&gt;&lt;br /&gt;The &lt;a href="http://svn.python.org/view?rev=53986&amp;view=rev"&gt;code itself &lt;/a&gt;was quite simple.  The only changes in compile.c were trivial.  The symbol table needed more changes, because it had to recognize a new kind of declaration and propagate that information to the compiler.  The symbol table uses a bit-field where a handful of the bits are used to represent the scope.  I spent a lot of time scratching my head until I remember that I needed to increase the width of mask used to extract the scope-related bits.  I think I'm not happy with the bit-field representation.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://us.imdb.com/name/nm0793968/"&gt;Pete Shinners&lt;/a&gt; and Neal Norwitz reviewed code and helped think of tests cases.&lt;br /&gt;&lt;br /&gt;That wraps up a fun day of sprinting for me.  I also closed several bugs and spent a few hours pouring over typeobject.c to fix some crasher bugs that Armin Rigo reported.  I have a fix for one of them, but I want to do a little refactoring before I check it in.  Next week, perhaps.  I'm flying home first thing in the morning.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/02/nonlocal-implemented.html' title='nonlocal implemented'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=3785457218310281334' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/3785457218310281334/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/3785457218310281334'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/3785457218310281334'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-1024448967112824711</id><published>2007-02-26T19:18:00.000-05:00</published><updated>2007-02-26T19:39:23.494-05:00</updated><title type='text'>Bug of the day</title><content type='html'>&lt;a href="http://mike.verdone.ca/blog/"&gt;Mike Verdone&lt;/a&gt; found a great Python bug today.  It's an interaction between two features.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://docs.python.org/ref/atom-identifiers.html"&gt;Name mangling&lt;/a&gt;.  If you use an identifier with two leading underscores in a class, the name is mangled to include the name of the class as a prefix, except if the name also ends with two trailing underscores.  In the class Spam, the identifier __eggs becomes _Spam__eggs.  Note that the language reference says that mangling applies to any identified&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.python.org/doc/essays/packages.html"&gt;Packages&lt;/a&gt;.  You can import a name like A.B.C.  This name describes a module C in package B inside package A.  Note that A, B, and C are identifiers, so if one of them has two leading underscores they should be mangled.  import __A.B.C should technically be turned into import _Spam__A.B.C if it occurs inside class Spam.&lt;/li&gt;&lt;/ul&gt;One detail of the implementation is that the compiler represents the sequence of identifiers in a package name as a single string.  The compiled code represents the dotted name as a single string argument to a bytecode instruction.  The implementation of name mangling checks for strings that start and end with double underscores.  Therein lies the problem.  The string "__A__.B.C" starts with two underscores, but does not end with two underscores.  It is mangled to "_Spam__A__.B.C."&lt;br /&gt;&lt;br /&gt;How old is this bug?  It is present in Python 1.5.2 and was probably present in the original release of Python 1.5.  The bug is about nine years old.&lt;br /&gt;&lt;br /&gt;We're going to do a quick fix: Change name mangling so that it does not mangle names with dots in them.  This will fix the __A__.B.C case, break the __A.B.C case, and leave broken the A.__B.C case.  It is likely that we will change the language spec and say identifiers in import statements are not mangled.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/02/bug-of-day.html' title='Bug of the day'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=1024448967112824711' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/1024448967112824711/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/1024448967112824711'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/1024448967112824711'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-5616150217285540076</id><published>2007-02-26T12:17:00.000-05:00</published><updated>2007-02-26T13:29:23.474-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><title type='text'>locals() and free variables</title><content type='html'>I've been struggling with some odd corner cases of free variables and &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;eval&lt;/span&gt;/exec in Python.&lt;br /&gt;&lt;br /&gt;There is a long-standing bug report that you can't access free variables when you created a nested code block with &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1"&gt;eval&lt;/span&gt; or exec--for example, putting a lambda in an expression passed to &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;eval&lt;/span&gt;.  It works if the variable happens to be free in the text of the function containing the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3"&gt;eval&lt;/span&gt;, but only then.  The bug report claimed that Scheme worked differently, but I don't think Scheme provides a way to capture an arbitrary environment to pass to &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_4"&gt;eval&lt;/span&gt;; it only provides access to top-level environments.&lt;br /&gt;&lt;br /&gt;The name locals() is misleading.  It returns free variables as well as local variables.  The name suggests that this behavior is wrong, but it is necessary to make exec and &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_5"&gt;eval&lt;/span&gt; work with free variables.  The function returns the names visible in the current scope.&lt;br /&gt;&lt;br /&gt;The discussion here is actually about much more than locals().  The same basic issues arise when you use exec or import * in a block or when you use the debugger or some other trace function installed via &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_6"&gt;sys&lt;/span&gt;.&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_7"&gt;settrace&lt;/span&gt;().  In all these cases, we extract variables in a dictionary to support introspection.&lt;br /&gt;&lt;br /&gt;There is still a problem with locals(), which results from the use of locals() in debugging.  The implementation makes sure that changes made to the locals dict are reflected in the running program in many cases.  In old versions of Python, local variables were stored in a dictionary and locals() returned the actual dictionary.  This feature is useful in the debugger.  When the &lt;span class="blsp-spelling-corrected" id="SPELLING_ERROR_8"&gt;implementation&lt;/span&gt; changed to use a simple C array instead of a dict, the interpreter arranged to copy variables back and forth between the dictionary and the array when the debugger was used.  (This behavior is also needed to make features like exec and import * work.)&lt;br /&gt;&lt;br /&gt;In many cases, it is fine to copy free variables into the dictionary returned by locals.  If changes are made to those variables, they can be written back to the appropriate part of the closure rather than creating local variables that shadow the free variables.&lt;br /&gt;&lt;br /&gt;Class &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_9"&gt;namespaces&lt;/span&gt; pose a serious problem in the current &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_10"&gt;CPython&lt;/span&gt; implementation.  The class stores local variables in a dictionary.  When the body of the class finishes execution, this dictionary is passed to the class constructor.  Keys in the dictionary become attributes of the class.  If you call locals(), free variables could be copied into the dictionary for access in the debugger or introspection.  But if they are copied, they will become attributes of the class, which was not intended.  It's a messy problem, because it is possible, though inscrutable, for&lt;br /&gt;the same name to be used for a free variable in a method and a class attribute; they have the same name, but they refer to different bindings.&lt;br /&gt;&lt;br /&gt;For now, we are fixing this in Python 2.x by omitting free variables from the dictionary returned by locals() when locals() is called in a class block.  This makes introspection more difficult but prevents locals() from polluting the class &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_11"&gt;namespace&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;What are some other solutions for the class problem?  It might be possible to return a copy of the class dictionary with the free variables added.  Changes to this dictionary are written back to the real dictionary or free variables when you run in the debugger.  It wouldn't be possible to reflect all changes to the dictionary; it would only work in contexts like debugging or using exec.  I'm not sure if that would be too confusing.&lt;br /&gt;&lt;br /&gt;We could also make two different functions, where locals() and vars() seem like reasonable names.  The locals() could return the actual dictionary object for classes, without adding the free variables.  The vars() could return a dictionary will all variables, but it would be a copy.  Then client code could get whatever they wanted.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/02/locals-and-free-variables.html' title='locals() and free variables'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=5616150217285540076' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/5616150217285540076/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/5616150217285540076'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/5616150217285540076'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-1779040715088847409</id><published>2007-02-26T02:26:00.000-05:00</published><updated>2007-02-28T22:21:09.633-05:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='pycon2007'/><title type='text'>PyCon Pictures</title><content type='html'>&lt;div style="text-align: center; width: 194px; font-family: arial,sans-serif; font-size: 83%;"&gt;&lt;div style="background: transparent url(http://picasaweb.google.com/f/img/transparent_album_background.gif) no-repeat scroll left center; height: 194px; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;"&gt;&lt;a href="http://picasaweb.google.com/jhylton/PyCon"&gt;&lt;img src="http://lh5.google.com/image/jhylton/ReJ9MiphxHE/AAAAAAAAAzs/ETozFumn4Kc/s160-c/PyCon.jpg" style="border: medium none ; padding: 0px; margin-top: 16px;" height="160" width="160" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;a href="http://picasaweb.google.com/jhylton/PyCon"&gt;&lt;div style="color: rgb(77, 77, 77); font-weight: bold; text-decoration: none;"&gt;PyCon&lt;/div&gt;&lt;/a&gt;&lt;div style="color: rgb(128, 128, 128);"&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;My first Python conference was almost ten years ago, at a hotel in downtown San Jose.  Guido introduced Python 1.5 that year, and &lt;a href="http://www.python.org/workshops/1997-10/proceedings/hugunin.html"&gt;Jim Hugunin introduced JPython&lt;/a&gt;.  I ran the very first lightning talks session.  Ten years later, there are still a lot of familiar faces, but the conference is much bigger.  The community is larger and their interests more diverse.  The keynote speakers were variously engaging and entertaining, probably equally Randy Pausch's talk in &lt;a href="http://www.python.org/workshops/2000-01/"&gt;2000&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I attended a few talks, fixed a few bugs, and got a chance to re-engage with Python development.  I have had little time for Python since 2.5 was released and the compiler rewrite finished.  I'm looking forward to a full sprint day to get some code written.  I had hoped to fix some obscure bugs, but Armin Rigo's bug reports were too obscure to get to the bottom of with just an hour's study.&lt;br /&gt;&lt;br /&gt;A small group of python-devers and Googlers had an over-the-top dinner at the Mansion on Turtle Creek.&lt;br /&gt;&lt;br /&gt;I've collected a few &lt;a href="http://picasaweb.google.com/jhylton/PyCon"&gt;PyCon pictures&lt;/a&gt; over the week, snapshots of friends, speakers, and other Pythonistas.  &lt;b&gt;Update:&lt;/b&gt; I added a few pictures from the sprints on Monday (2/26/07).</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2007/02/pycon-pictures.html' title='PyCon Pictures'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=1779040715088847409' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/1779040715088847409/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/1779040715088847409'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/1779040715088847409'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-116604714748529522</id><published>2006-12-13T16:58:00.000-05:00</published><updated>2007-02-06T07:54:09.086-05:00</updated><title type='text'>Adversarial Information Retrieval on the Web (AIRWeb'07)</title><content type='html'>If you are working on blogs, blog search, or related technologies, you are surely doing some work to combat blog spam.  If so, consider submitting a paper to the 2007 workshop on&lt;br /&gt;&lt;a href="http://airweb.cse.lehigh.edu/2007/cfp.html"&gt;Adversarial Information Retrieval on the Web (AIRWeb'07)&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/12/adversarial-information-retrieval-on.html' title='Adversarial Information Retrieval on the Web (AIRWeb&apos;07)'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=116604714748529522' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/116604714748529522/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/116604714748529522'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/116604714748529522'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-116517653321086492</id><published>2006-12-03T15:08:00.000-05:00</published><updated>2006-12-13T17:02:42.490-05:00</updated><title type='text'>Ritual Coffee Roasters</title><content type='html'>&lt;a href="http://www.cosmiccupcoffee.com/"&gt;My barista&lt;/a&gt; recommends &lt;a href="http://www.ritualroasters.com/"&gt;Ritual Coffee Roasters&lt;/a&gt; in the Mission District in San Francisco.  I'm going to be staying in SF Thursday and Friday this week, and I'll try to make it there.&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;&lt;br /&gt;Update: &lt;/span&gt;I did make it to Ritual on Thursday evening.  It was a great scene.&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/12/ritual-coffee-roasters.html' title='Ritual Coffee Roasters'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=116517653321086492' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/116517653321086492/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/116517653321086492'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/116517653321086492'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-116517634877538717</id><published>2006-12-03T15:05:00.000-05:00</published><updated>2007-02-07T10:22:23.396-05:00</updated><title type='text'>TV News in a Postmodern World The Unbundled Newsroom by Terry Heaton- The Digital Journalist</title><content type='html'>&lt;a href="http://digitaljournalist.org/issue0602/heaton.html"&gt;TV News in a Postmodern World The Unbundled Newsroom by Terry Heaton- The Digital Journalist&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/12/tv-news-in-postmodern-world-unbundled.html' title='TV News in a Postmodern World The Unbundled Newsroom by Terry Heaton- The Digital Journalist'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=116517634877538717' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/116517634877538717/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/116517634877538717'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/116517634877538717'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-116284979341061150</id><published>2006-11-06T16:40:00.000-05:00</published><updated>2007-06-15T18:03:40.700-04:00</updated><title type='text'>Recent Reading</title><content type='html'>&lt;table&gt;&lt;br /&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="font-weight: bold;"&gt;Title&lt;/td&gt;&lt;td style="font-weight: bold;"&gt;Author&lt;/td&gt;&lt;td style="font-weight: bold;"&gt;Finished&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;Neverwhere&lt;/td&gt;&lt;td&gt;Neil Gaiman&lt;/td&gt;&lt;td&gt;June 15, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;Persuasion&lt;/td&gt;&lt;td&gt;Jane Austen&lt;/td&gt;&lt;td&gt;June 5, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Ethics of What We Eat&lt;/td&gt;&lt;td&gt;Peter Singer and Jim Mason&lt;/td&gt;&lt;td&gt;May 31, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Wild Trees&lt;/td&gt;&lt;td&gt;Richard Preston&lt;/td&gt;&lt;td&gt;May 20, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Best and the Brightest&lt;/td&gt;&lt;td&gt;David Halberstam&lt;/td&gt;&lt;td&gt;May 14, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Amber Spyglass&lt;/td&gt;&lt;td&gt;Philip Pullman&lt;/td&gt;&lt;td&gt;April 20, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Subtle Knife&lt;/td&gt;&lt;td&gt;Philip Pullman&lt;/td&gt;&lt;td&gt;April 14, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Golden Compass&lt;/td&gt;&lt;td&gt;Philip Pullman&lt;/td&gt;&lt;td&gt;April 1, 2007&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;Against the Day&lt;/td&gt;&lt;td&gt;Thomas Pynchon&lt;/td&gt;&lt;td&gt;March 2007&lt;/td&gt;&lt;td&gt;&lt;br /&gt;&lt;em&gt;It took a long time, but I enjoyed it.&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;Greek Religion&lt;/td&gt;&lt;td&gt;Walter Burkert&lt;/td&gt;&lt;td&gt;Sept. 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;Arthur and George&lt;/td&gt;&lt;td&gt;Julian Barnes&lt;/td&gt;&lt;td&gt;Oct. 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Complete Greek Tragedies, Vol 1&lt;br /&gt;The Oresteia, Prometheus Unbound&lt;/td&gt;&lt;td&gt;Aeschylus&lt;/td&gt;&lt;td&gt;Oct. 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Library of Greek Mythology&lt;/td&gt;&lt;td&gt;Apollodorus, trans. Robin Hard&lt;/td&gt;&lt;td&gt;Mid Oct. 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;City of Glass&lt;/td&gt;&lt;td&gt;Paul Auster&lt;/td&gt;&lt;td&gt;Oct. 30, 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Inheritance of Loss&lt;/td&gt;&lt;td&gt;Kiran Desai&lt;/td&gt;&lt;td&gt;Nov. 2, 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;tr&gt;&lt;td&gt;The Amazing Adventures of Kavalier and Clay&lt;/td&gt;&lt;td&gt;Michael Chabon&lt;/td&gt;&lt;td&gt;Nov. 14, 2006&lt;/td&gt;&lt;/tr&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/tbody&gt;&lt;/table&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/11/recent-reading.html' title='Recent Reading'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=116284979341061150' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/116284979341061150/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/116284979341061150'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/116284979341061150'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-116169347850063424</id><published>2006-10-24T08:27:00.000-04:00</published><updated>2007-02-06T08:43:19.733-05:00</updated><title type='text'>Python search engine</title><content type='html'>Google launched &lt;a href="http://www.google.com/coop/cse/"&gt;custom search engines&lt;/a&gt; today.  You can customize the search engine in a variety of ways, but the primary control is selecting which sites to include in the search engine.  I've been working on a &lt;a href="http://www.google.com/coop/cse?cx=010104417661136834118%3Aat1-hsftvfo"&gt;Python search engine&lt;/a&gt; that has technical and community sites for Python programmers.  If search for socket, the top results is Andrew Kuchling's &lt;a href="http://www.amk.ca/python/howto/sockets/"&gt;Socket Programming HOWTO&lt;/a&gt;, which is result five on a regular Google search.&lt;br /&gt;&lt;br /&gt;Please give it a try.  If you find it helpful, you can volunteer to help maintain it.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/10/python-search-engine.html' title='Python search engine'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=116169347850063424' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/116169347850063424/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/116169347850063424'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/116169347850063424'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115978928148085217</id><published>2006-10-02T07:36:00.000-04:00</published><updated>2006-11-27T20:27:28.193-05:00</updated><title type='text'>PyPy paper available</title><content type='html'>Armin Rigo and Samuele Pedroni have written a paper for the Dynamic Languages Symposium at OOPSLA this month.  I haven't read it yet, but I'm looking forward to a self-contained summary of their work.  See &lt;a href="http://codespeak.net/svn/pypy/extradoc/talk/dls2006/pypy-vm-construction.pdf"&gt;PyPy's approach to virtual machine construction.&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/10/pypy-paper-available.html' title='PyPy paper available'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115978928148085217' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115978928148085217/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115978928148085217'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115978928148085217'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115867329713568741</id><published>2006-09-19T09:37:00.000-04:00</published><updated>2006-09-19T09:41:37.136-04:00</updated><title type='text'>SWIG and Overloaded Constructor</title><content type='html'>I have a class that has three constructors&lt;br /&gt;&lt;pre&gt;class Foo {&lt;br /&gt;Foo(const vector&amp;lt;const char *&amp;gt;* files, bool flag);&lt;br /&gt;Foo(const char* file, bool flag);&lt;br /&gt;Foo();&lt;br /&gt;// ...&lt;br /&gt;};&lt;/pre&gt;I am using typemap that maps between a list of strings and a const vector of const char*s.  The typemap works fine for a function, but has trouble with the overloading.  SWIG generates a wrapper function new_Foo() that dispatches based on the number and type of the arguments.  The dispatch function checks for the exactly matching vector pointer using SWIG_ConvertPtr().  This check fails for the list of strings, so new_Foo() reports there is no matching constructor.  The function that new_Foo() failed to call has the typemap code that converts the list of strings to the appropriate type.&lt;br /&gt;&lt;br /&gt;What am I doing wrong?</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/09/swig-and-overloaded-constructor.html' title='SWIG and Overloaded Constructor'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115867329713568741' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115867329713568741/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115867329713568741'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115867329713568741'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115867301897824834</id><published>2006-09-19T09:24:00.000-04:00</published><updated>2006-09-19T12:35:59.583-04:00</updated><title type='text'>Firefox parentlock</title><content type='html'>What do you do if Firefox refuses to start?  The error dialog says "Firefox is already running but not responding."  I've run into this problem a few times recently.  There is no Firefox process running, but it won't start.&lt;br /&gt;&lt;br /&gt;Solution: Delete the .parentlock file in one of the subdirectories of the .mozilla directory.&lt;br /&gt;&lt;br /&gt;Apparently this fix is described in the &lt;a href="http://www.mozilla.org/start/1.5/troubleshooting/#lock"&gt;Mozilla 1.5 troubleshooting guide&lt;/a&gt;, but a search with the text of the error message didn't produce any useful results.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/09/firefox-parentlock.html' title='Firefox parentlock'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115867301897824834' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115867301897824834/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115867301897824834'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115867301897824834'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115702590912758363</id><published>2006-08-31T07:54:00.000-04:00</published><updated>2007-02-06T02:42:46.950-05:00</updated><title type='text'>Barry would take it the hardest</title><content type='html'>When I heard the news, I knew &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=173477"&gt;Barry would take it the hardest&lt;/a&gt;.  I can always recognize his code by the &amp;lt;&amp;gt; comparisons and the ^Ls between classes.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/barry-would-take-it-hardest.html' title='Barry would take it the hardest'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115702590912758363' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115702590912758363/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115702590912758363'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115702590912758363'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115673840498767201</id><published>2006-08-28T00:11:00.000-04:00</published><updated>2006-08-31T03:46:46.803-04:00</updated><title type='text'>Future Python parsing strategy?</title><content type='html'>&lt;a href="http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home"&gt;ANTLR 3.0&lt;/a&gt; &lt;a href="http://www.antlr.org/wiki/display/ANTLR3/ANTLR3+Code+Generation+-+C"&gt;generates code for plain old C&lt;/a&gt; and someone has already written a &lt;a href="http://www.antlr.org/grammar/list"&gt;Python grammar&lt;/a&gt;. I should learn enough about ANTLR to figure out if it could generate an AST for Python directly.  It's certainly a richer toolkit.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/future-python-parsing-strategy.html' title='Future Python parsing strategy?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115673840498767201' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115673840498767201/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115673840498767201'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115673840498767201'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115673580786489752</id><published>2006-08-27T23:09:00.000-04:00</published><updated>2006-08-27T23:30:07.890-04:00</updated><title type='text'>An example code transformation</title><content type='html'>I wrote a simple transformer that works for a trivial case.  It demonstrates the basic structure of a transformer and highlights some hard issues still to resolve.  It is much too hard to generate the AST nodes (and corresponding tokens) for the newly generated code.&lt;br /&gt;&lt;br /&gt;Let's start with the easy part.  The HasKeyTransformer looks has all calls of a has_key attribute.  (There should be better type analysis to try to cope with cases where there is a non-dict with a has_key() method.)  It starts with an in-order walk of the tree looking for has_key() calls.  The search() method performs the search, defering to the is_has_key_call() predicate to test each node.  The predicate looks for a Call node, where the function being called is an attribute of another object; i.e. the call is of the form x.y(...).  If the y attribute is has_key, then the predicate returns true.&lt;br /&gt;&lt;pre&gt;import concrete&lt;br /&gt;&lt;br /&gt;class HasKeyTransformer:&lt;br /&gt;&lt;br /&gt;  def search(self, tree):&lt;br /&gt;      for node in concrete.TreeIter(tree):&lt;br /&gt;          if self.is_has_key_call(node):&lt;br /&gt;              yield node&lt;br /&gt;&lt;br /&gt;  def is_has_key_call(self, node):&lt;br /&gt;      if not isinstance(node, _ast.Call):&lt;br /&gt;          return False&lt;br /&gt;      callee = node.func&lt;br /&gt;      if not isinstance(callee, _ast.Attribute):&lt;br /&gt;          return False&lt;br /&gt;      return callee.attr == "has_key"&lt;/pre&gt;The next step is to replace the Call node with a Compare node, using the object with the has_key method as the right-hand side of an "in" comparison.  The new Compare node can re-use some of the old tokens and AST nodes but needs to generate its own "in" token.  In some cases, it may need to add parentheses, too.  The code turns ugly here.&lt;br /&gt;&lt;pre&gt;    def replace(self, node):&lt;br /&gt;       # Replace the Call node with a Compare node.  The&lt;br /&gt;       # base of the callee becomes the RHS and one argument&lt;br /&gt;       # in the call becomes the LHS.&lt;br /&gt;&lt;br /&gt;       the_dict = node.func.value&lt;br /&gt;       the_key = node.args[0]&lt;br /&gt;       strip_positions(the_key)&lt;br /&gt;&lt;br /&gt;       new = _ast.Compare()&lt;br /&gt;       new.left = the_key&lt;br /&gt;       the_in = _ast.In()&lt;br /&gt;&lt;br /&gt;       # We need to synthesize a full token for "in".  Yuck!&lt;br /&gt;       the_in.concrete = [(3, "in")]&lt;br /&gt;       new.ops = [the_in]&lt;br /&gt;       new.comparators = [the_dict]&lt;br /&gt;       new.concrete = [new.left] + new.ops + new.comparators&lt;br /&gt;       return new&lt;/pre&gt;The strip_positions() function removes the old position information from all the tokens representing the key.  We are moving the key to the left of "in," so none of those positions are correct.  We'll have to count on untokenize to do something reasonable.  We ought to be able to preserve relative spacing, but that's a detail.  It's hard to hook up the new node, because we need to fill in the concrete list and all the other node-specific attributes.  It should be possible to generate helper functions that take the concrete tokens and nodes and hook up all the attributes correctly.  The code will look better then.  We could also have token helper functions so that you can avoid writing tuples.&lt;br /&gt;&lt;pre&gt;    def replace(self, node):&lt;br /&gt;        # Replace the Call node with a Compare node.  The&lt;br /&gt;        # base of the callee becomes the RHS and one argument&lt;br /&gt;        # in the call becomes the LHS.&lt;br /&gt;&lt;br /&gt;        the_dict = node.func.value&lt;br /&gt;        the_key = node.args[0]&lt;br /&gt;        strip_positions(the_key)&lt;br /&gt;&lt;br /&gt;        return concrete.Compare(the_key, [token.STRING("in")], [the_dict])&lt;/pre&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/example-code-transformation.html' title='An example code transformation'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115673580786489752' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115673580786489752/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115673580786489752'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115673580786489752'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115673456663586572</id><published>2006-08-27T22:49:00.000-04:00</published><updated>2006-08-27T23:09:26.663-04:00</updated><title type='text'>Python tokenize module</title><content type='html'>The tokenize module generates a list of token tuples from Python source.  The expression 1 + 1 would yield the following tokens:&lt;br /&gt;&lt;pre&gt;NUMBER      '1'           (1, 0) (1, 1)&lt;br /&gt;OP          '+'           (1, 2) (1, 3)&lt;br /&gt;NUMBER      '1'           (1, 4) (1, 5)&lt;/pre&gt;The first element of the tuple is the token type.  The builtin Python tokenizer defines many token types, including NUMBER, NAME, STRING, and PLUS.  The tokenize module uses some of those tokens, but, for example, generates a generic OP instead of PLUS in the example above.  The next element is the token itself, a string.  The next two elements are tuples that describe the start and end positions of the token in the original source.&lt;br /&gt;&lt;br /&gt;The untokenize function takes a sequence of these tokens and return a string of program source.  I use this to generate source code for &lt;a href="http://jeremyhylton.blogspot.com/2006/08/python-3000-translation-strategy.html"&gt;transformed Python programs&lt;/a&gt;.  It mostly works, excep that tokenize does not generate tokens for continuation markers--the backslash that is used to indicate when a newline does not end a statement.  I need to change tokenize to generate this token.&lt;br /&gt;&lt;br /&gt;Martin and I also fixed a bug in tokenize in the handling of newlines following comments.  One good question is how many other bugs remain in tokenize.  We could test it more thoroughly&lt;br /&gt;by running it over a large body of Python code and comparing it to the output of the parser module.  You would have to extract the tokens from the parse tree and do some conversions, like PLUS to OP.&lt;br /&gt;&lt;br /&gt;The other major change is for untokenize.  It needs to be able to emit code for a mix of tokens with positions and tokens without positions.  When code transformation takes place, it is impractical to compute new position information for the new tokens (or those that have been moved around).  It would be incredibly tedious and no one would ever do it.  Instead, we'll have to trust untokenize to do the right thing when it encounters a token with missing positions.  It currently emits code for tokens without any position information, but the results are nearly unreadable, and it does not handle a mix of tokens with and without positions.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/python-tokenize-module.html' title='Python tokenize module'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115673456663586572' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115673456663586572/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115673456663586572'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115673456663586572'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115664666720478535</id><published>2006-08-26T22:36:00.000-04:00</published><updated>2007-01-26T06:18:20.376-05:00</updated><title type='text'>Python 3000 Translation Strategy</title><content type='html'>The basic strategy for transforming Python programs to run on Python 3000 is to parse the code to generate an abstract syntax tree (AST), write each transformation as a separate pass over the AST, and emit the modified AST as source code.  The real challenge is to preserve the formatting and comments of the original program in the transformed program.  We addressed most of the major conceptual issues during the sprint, but there is a lot of work to do to flesh out the prototype.&lt;br /&gt;&lt;br /&gt;A typical parser discards information about whitespace and comments at its lowest levels.  It extracts only the program tokens.  (In Python, those tokens do include indent and dedent tokens, but comments are completely ignored.)  The AST discards even more of the concrete text of the program.  There are no parentheses for grouping expressions and describing intended operator precedence.  The Python parser does record the row and column of the start of each token, but this information is not present in the AST.&lt;br /&gt;&lt;br /&gt;The first decision was to decorate the AST with information about the concrete tokens that represent that node.  Each decorated AST node has a concrete attribute that is a list of tokens and AST nodes, in the order they occur.  The expression (2 + 3) would have this sequence as its concrete attribute: [LPAREN, Num, Op(+), Num, RPAREN].  The effect is to create a second parallel tree.  You can iterate over the standard AST nodes and fields or you can iterate over concrete.  An in-order walk of the concrete tree yields all of the raw tokens in order.&lt;br /&gt;&lt;br /&gt;It's not entirely clear how to generate the concrete tokens for the AST.  There are several options available, but the right one is to modify the Python parser to record this information if the client asks for it.  Then modify the concrete-to-abstract transformation phase to pass it along.  It may be the right thing, but it involves modifying all sorts of C code, including the lowest levels of the parser (which I don't understand well) and the AST generation code (which I understand too well).  If we worked on that rewrite, we wouldn't have made any substantial progress during the sprint.&lt;br /&gt;&lt;br /&gt;I decided to use the tokenize module to extract the tokens with full position information and write a small Python program to attach the tokens to the AST.  The tokenize modules uses a set of regular expressions and other hacks to tokenize Python source.  For each token, it records the start and stop positions (row number, column offset).  It's possible to regenerate the exact source for these tokens in all but a few cases.  One problem here is that you wouldn't know whether the source used tabs or spaces.&lt;br /&gt;&lt;br /&gt;The tokens-to-AST matcher program is not terribly complicated, because we already have a parse tree!  You perform an in-order walk of the AST and consume tokens during the walk.  The only real problem is writing down all the rules for which tokens an AST node should consume.  An if statement for example, will always consume an 'if' token, followed by some arbitrary expression tokens (handled by its child expression node), and a colon token.   The rest of the rule is more complicated, because the else part of the statement is optional and the bodies of the then and else branches are of variable length.  We need to generate a set of token-matching rules conditioned on the specific AST, e.g. match an 'else' token if there is an orelse attribute on the AST.&lt;br /&gt;&lt;br /&gt;More details to follow.  The actual code is in the concrete module in the refactor sandbox.</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/python-3000-translation-strategy.html' title='Python 3000 Translation Strategy'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115664666720478535' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115664666720478535/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115664666720478535'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115664666720478535'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-19730683.post-115664564729417688</id><published>2006-08-26T22:12:00.000-04:00</published><updated>2006-08-27T23:45:43.823-04:00</updated><title type='text'>Sprint Report</title><content type='html'>I worked on a source-to-source translation system at the &lt;a href="http://www.google.com/url?sa=t&amp;ct=res&amp;amp;cd=1&amp;url=http%3A%2F%2Fwiki.python.org%2Fmoin%2FGoogleSprint&amp;amp;amp;amp;amp;ei=WAHxRO6ROLu0YZK6rI0C&amp;sig2=n-a2xcShazpd9XWk3QyZcA"&gt;Google Python sprint&lt;/a&gt;.  The system is intended to allow us to write transformations that upgrade programs from Python 2.x to Python 3.x.  I finished a toy example that demonstrated that the approach will work.  I translated a small program that use has_key to an equivalent program that uses in.&lt;br /&gt;&lt;pre&gt;d = dict(x=1)&lt;br /&gt;if d.has_key("x"):&lt;br /&gt;print "yes"&lt;br /&gt;else:&lt;br /&gt;print "no"&lt;/pre&gt;Is transformed to&lt;br /&gt;&lt;pre&gt;d = dict(x=1)&lt;br /&gt;if "x" in d             :&lt;br /&gt;print "yes"&lt;br /&gt;else:&lt;br /&gt;print "no"&lt;/pre&gt;(Yes. There are 13 spaces between the d and the :.) The code is checked into the &lt;a href="http://svn.python.org/view/sandbox/trunk/refactor/"&gt;Python sandbox under refactor&lt;/a&gt;.  I had a bunch of helpful conversations and did a little pair programming with Martin von Loewis.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.artima.com/weblogs/index.jsp?blogger=guido"&gt;Guido&lt;/a&gt; wrote a summary post about the &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=173453"&gt;Python 3000 sprint&lt;/a&gt; work.  &lt;span style="font-weight: bold;"&gt;Update:&lt;/span&gt; I fleshed out many of the details in several subsequent posts.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://jeremyhylton.blogspot.com/2006/08/python-3000-translation-strategy.html"&gt;Python 3000 Translation Strategy&lt;/a&gt; describes how to decorate an AST with concrete tokens.&lt;/li&gt;&lt;li&gt;&lt;a href="http://jeremyhylton.blogspot.com/2006/08/python-tokenize-module.html"&gt;Python tokenize module&lt;/a&gt; explains some details of the tokenize and untokenize functions I'm using.&lt;/li&gt;&lt;li&gt;&lt;a href="http://jeremyhylton.blogspot.com/2006/08/example-code-transformation.html"&gt;An example code transformation&lt;/a&gt; describes how the simple has_key() to in transformer works.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;</content><link rel='alternate' type='text/html' href='http://jeremyhylton.blogspot.com/2006/08/sprint-report.html' title='Sprint Report'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=19730683&amp;postID=115664564729417688' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/115664564729417688/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://jeremyhylton.blogspot.com/feeds/posts/default/115664564729417688'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/19730683/posts/default/115664564729417688'/><author><name>Jeremy Hylton</name><uri>http://www.blogger.com/profile/05832343974221233570</uri><email>noreply@blogger.com</email></author></entry></feed>