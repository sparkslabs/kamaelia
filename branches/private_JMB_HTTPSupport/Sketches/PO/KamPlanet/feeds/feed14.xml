<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-20144447</id><updated>2008-06-02T10:45:29.061-07:00</updated><title type='text'>Coder Who Says Py</title><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/'/><link rel='next' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>297</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-20144447.post-1563077708121682388</id><published>2008-05-15T13:06:00.003-07:00</published><updated>2008-05-15T13:45:08.976-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><title type='text'>What would it take for Python to have a regular release schedule?</title><content type='html'>Mark Shuttleworth has been writing about &lt;a href="http://www.markshuttleworth.com/archives/150"&gt;release cycles in open source&lt;/a&gt; as of late on his blog. An interesting thing he is arguing for is some level of synchronization between related upstream and downstream projects. For those of you who don't know what those terms mean, a project is upstream to you if you rely upon it (e.g., Python is upstream to Ubuntu because it relies on Python for its infrastructure, on top of including it in its distribution).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What Mark is advocating is a rough lock-step release cycle amongst upstream projects that are core, upstream applications, and Linux distributions. The idea is that Python, GCC, etc. all release in the same month their next versions, applications follow a month later, and then finally Linux distributions a month after that. The idea is that the Linux distros would then all ship with the same version of their upstream projects (e.g., everyone would ship with Python 2.5.x in 2008, 2.6.x in 2009, etc.).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I have to admit, from a Python developer's perspective, that does sound nice. Because the Linux distributions and their users tend to be a large chunk of the Python users out there, we see bug reports on the various versions of Python that each major distro is shipping. That can be annoying as there is a chunk of time where we can still get reports a whole version behind of what is stable. If a nice chunk of our users moved over to the same version each year the bug reports would be against a consistent version and thus hopefully lead less extraneous bugs being reported about older versions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now I don't think a one month spacing is enough for everyone to do thorough testing. I suspect spacing it out over six months instead of three might work out better (but since Python has hardly any external dependencies this is just from outside observation and not experience).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Locking down releases might also help us schedule sprints. If we said we would do major releases every September, and minor releases September and March then everyone would know when to submit language proposals, what they must hit for something to make it in, when python-dev will most likely need extra help to finish that final push to beta, etc. We would then know when betas would hit, and thus have sprints three months before so that there is enough time for crazy ideas that come up at the sprints to be coded, implemented, vetted, and tested before the beta hits.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are a couple of questions that need to be answered if this were to happen. One is whether python-dev has the discipline to pull this off? I say yes as long as we have a release manager that is willing to take the hard line on reverting patches that don't make the time cut-off. So far that has worked this year with our monthly releases.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another question is whether we are structured for this kind of thing? Releases take a couple of hours from several people. Now having a regular schedule would suggest that it would be easier for these people as they would know when to expect the big push to hit.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lastly, do we have the infrastructure and tools? Merging between the trunk and a branch is a pain. But if we really start to hold up features because they don't reach a release point means people really should start all work in branches and expect to miss a release instead of expecting to actually make their target and only shift to a branch if they miss. If this isn't done code goes stale thanks to the length of time it takes for Python to go from beta to a final release (this is why I shifted my importlib work to bzr since I expected I would miss 3.0).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If the final releases for 2.6 and 3.0 go well I might try to push for a regular release schedule for Python.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/05/what-would-it-take-for-python-to-have.html' title='What would it take for Python to have a regular release schedule?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=1563077708121682388' title='9 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/1563077708121682388/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/1563077708121682388'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/1563077708121682388'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-4242373317496791773</id><published>2008-05-15T00:17:00.002-07:00</published><updated>2008-05-15T00:26:18.333-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='pep 3108'/><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><category scheme='http://www.blogger.com/atom/ns#' term='PEPs'/><category scheme='http://www.blogger.com/atom/ns#' term='stdlib'/><title type='text'>PEP 3108 (stdlib cleanup) progress</title><content type='html'>As of this moment there are 81 deprecated modules in Python 2.6. I have personally deprecated 56 of them since PEP 3108 was accepted. There are about 15 modules left to still be deprecated and removed. None of these counts cover modules with new names.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Unfortunately there is still work to be done. Those 15 modules left, all but one are there because they require removing their usage from the stdlib in 2.6 (symtable might survive if it gets documentation written for it). There is also the issue of dealing with renamed modules which I have personally not touched yet (I view the deletions as more important since it removes code rather than just shuffling it around; plus 2to3 makes the change-over for new names easier to live with than an entire module disappearing). Still plenty to do between now and b1.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/05/pep-3108-stdlib-cleanup-progress.html' title='PEP 3108 (stdlib cleanup) progress'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=4242373317496791773' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/4242373317496791773/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/4242373317496791773'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/4242373317496791773'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-5763977249445778257</id><published>2008-05-06T16:58:00.003-07:00</published><updated>2008-05-06T17:05:13.287-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PEPs'/><category scheme='http://www.blogger.com/atom/ns#' term='stdlib'/><category scheme='http://www.blogger.com/atom/ns#' term='python 3.0'/><category scheme='http://www.blogger.com/atom/ns#' term='Python 2.6'/><title type='text'>PEP 3108 is accepted! Let the deprecations begin!</title><content type='html'>Guido officially accepted &lt;a href="http://www.python.org/dev/peps/pep-3108/"&gt;PEP 3108&lt;/a&gt; the other day! Now the work begins.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="http://bugs.python.org/issue2775"&gt;Issue 2775&lt;/a&gt; is tracking the PEP work. If people want to help out they can claim something to do there.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am personally starting with module deletions (audiodev was the first victim). The steps are laid out in the PEP and they are very straight-forward (which is why I made issue 2775 an &lt;a href="http://bugs.python.org/issue?%40search_text=&amp;amp;title=&amp;amp;%40columns=title&amp;amp;id=&amp;amp;%40columns=id&amp;amp;creation=&amp;amp;creator=&amp;amp;activity=&amp;amp;%40columns=activity&amp;amp;%40sort=activity&amp;amp;actor=&amp;amp;nosy=&amp;amp;type=&amp;amp;components=&amp;amp;versions=&amp;amp;dependencies=&amp;amp;assignee=&amp;amp;keywords=6&amp;amp;priority=&amp;amp;%40group=priority&amp;amp;status=1&amp;amp;%40columns=status&amp;amp;resolution=&amp;amp;%40pagesize=50&amp;amp;%40startwith=0&amp;amp;%40queryname=&amp;amp;%40old-queryname=&amp;amp;%40action=search"&gt;easy issue&lt;/a&gt;). And if you use TextMate it is even easier thanks to the new Python-Dev bundle! There is a command in it that will generate the boilerplate for the deprecation warning for you, complete with inserting the module's name!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you would like to help please submit patches to the issue. The betas for 2.6 and 3.0 cannot go out until this PEP is implemented!&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/05/pep-3108-is-accepted-let-deprecations.html' title='PEP 3108 is accepted! Let the deprecations begin!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=5763977249445778257' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/5763977249445778257/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/5763977249445778257'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/5763977249445778257'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-2872761426639490538</id><published>2008-04-28T19:32:00.003-07:00</published><updated>2008-04-28T19:33:31.914-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PEPs'/><category scheme='http://www.blogger.com/atom/ns#' term='stdlib'/><category scheme='http://www.blogger.com/atom/ns#' term='python 3.0'/><title type='text'>PEP 3108 finally sent to python-3000</title><content type='html'>After literally years at trying to get the stdlib lined up to be reorganized and thinned out,&lt;a href="http://www.python.org/dev/peps/pep-3108/"&gt; PEP 3108&lt;/a&gt; is finally off to python-3000. Here is to hoping it is a relatively painless ordeal.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/pep-3108-finally-sent-to-python-3000.html' title='PEP 3108 finally sent to python-3000'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=2872761426639490538' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/2872761426639490538/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/2872761426639490538'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/2872761426639490538'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-8239458860163626673</id><published>2008-04-28T13:23:00.002-07:00</published><updated>2008-04-28T13:57:38.397-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='cell phone'/><title type='text'>Cell phone development is like app design in the '90s</title><content type='html'>If you look at the state of cell phone application development, it feels like it is still in the stone age. I was thinking about the (possible) major cell phone platforms (&lt;a href="http://www.forum.nokia.com/main/platforms/s60/"&gt;s60&lt;/a&gt;, &lt;a href="http://developer.apple.com/iphone/"&gt;iPhone&lt;/a&gt;, and &lt;a href="http://code.google.com/android/"&gt;Android&lt;/a&gt;) and there not a single development platform that is consistent across them.  S60 gives you C++, J2ME, and Python. iPhone gives you Objective-C. Android gives you Java (not sure how much, though, full Java 5?). Notice how there is no platform that cross-cuts all of them. Java comes the closest, but please, who wants to do Java development when they can avoid it (I am obviously one of those people who thinks you should use a language like Python or Ruby for app development and leave languages like Java and C to systems programming).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And I don't need a cross-platform GUI library since cell phones have such varying input styles. But if I have basic application logic and model manipulation that is consistent across platforms I would be a much happier person. I suspect the instant this happens then cell phone development will spike.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/cell-phone-development-is-like-app.html' title='Cell phone development is like app design in the &apos;90s'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=8239458860163626673' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/8239458860163626673/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/8239458860163626673'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/8239458860163626673'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-7306986773420924337</id><published>2008-04-22T21:06:00.002-07:00</published><updated>2008-04-22T21:19:51.389-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Py3K'/><category scheme='http://www.blogger.com/atom/ns#' term='importlib'/><title type='text'>One down, three to go</title><content type='html'>I managed to knock off another failing test for integrating importlib into Py3K; test_pkg. That leaves three: test_coding, test_pep263, and test_runpy. The first two have something to do with the BOM and probably how I am trying to figure out the encoding of the source file. Test_runpy has something to do with relative imports. Hopefully solving test_coding or test_pep263 will knock the other one off, meaning I only have two bugs left to deal with by June 1.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/one-down-three-to-go.html' title='One down, three to go'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=7306986773420924337' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/7306986773420924337/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/7306986773420924337'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/7306986773420924337'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-8452092262863293114</id><published>2008-04-21T22:19:00.003-07:00</published><updated>2008-04-21T22:42:45.538-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='wishful thinking'/><title type='text'>How I want FriendFeed to play with Twitter (and eventually replace it)</title><content type='html'>Less than a week ago I re-created &lt;a href="http://twitter.com/brettsky"&gt;my Twitter account&lt;/a&gt;. Although I love Jaiku's feature set and appreciate its stability, the lack of users (partially thanks to the new account freeze since their acquisition by Google) really limited what it could do. Thus the switch to Twitter as my main platform (and having my Jaiku account consume my tweets).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But, as before when I left the service, Twitter has been having stability issues. This weekend especially has been bad as &lt;a href="http://scobleizer.com/2008/04/21/twitter-grabbing-defeat-from-the-jaws-of-success/"&gt;Robert Scoble pointed out&lt;/a&gt;. He makes an interesting point in that blog post that &lt;a href="http://friendfeed.com"&gt;FriendFeed&lt;/a&gt; could situate itself to take over for &lt;a href="http://twitter.com"&gt;Twitter&lt;/a&gt;. FriendFeed already posts comments you make to a tweet as an @reply from your account. If they made it so that plain comments to FriendFeed could be posted directly to your Twitter account then I could then skip using Twitter's site and various applications and just use FriendFeed or &lt;a href="http://www.alertthingy.com/"&gt;Alert Thingy&lt;/a&gt;. It would also mean that my comments/tweets would first hit FriendFeed which is very stable and then hit Twitter if the service is up.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But there is the trick of adding all the &lt;a href="http://twitter.com/brettsky/friends"&gt;people you follow on Twitter&lt;/a&gt;. You could set up &lt;a href="http://friendfeed.com/about/faq#imaginary"&gt;imaginary friends&lt;/a&gt; for every Twitter account, but that would be tedious. If the &lt;a href="http://friendfeed.com/api/"&gt;FriendFeed API&lt;/a&gt; supported creating imaginary friends then this could easily be automated. Even better, since Twitter supports &lt;a href="http://factoryjoe.com/blog/2008/03/11/portable-contact-lists-and-the-case-against-xfn/"&gt;contact list portability&lt;/a&gt; through rel-me links from &lt;a href="http://www.gmpg.org/xfn/"&gt;XFN&lt;/a&gt; you could use &lt;a href="http://code.google.com/apis/socialgraph/"&gt;Google's Social Graph API&lt;/a&gt; with your Twitter account to flesh your list of imaginary friends very nicely on FriendFeed.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Maybe I will get lucky and get my two features from FriendFeed. But probably not as I don't know if FriendFeed wants to potentially step on Twitter's toes like that.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/how-i-want-friendfeed-to-play-with.html' title='How I want FriendFeed to play with Twitter (and eventually replace it)'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=8452092262863293114' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/8452092262863293114/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/8452092262863293114'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/8452092262863293114'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-3647833497112811970</id><published>2008-04-15T17:50:00.002-07:00</published><updated>2008-04-15T18:05:22.465-07:00</updated><title type='text'>An idea for a critical file archive script</title><content type='html'>I am sure most of us have various critical files strewn about our systems that we would like to see backed up and accessible almost anywhere. I know in my case I have SSH keys, GPG keys, zsh configuration files, etc. This is stuff that I REALLY do not want to lose AND I would like to have available to me on any machine with a Net connection.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I could keep a bash script or something to collect these various files, zip them up, and then scp them to various machines I have about the Net. But I hate bash scripts. And if I want any form of intelligence or nice features then a shell script just ain't going to cut it. I could use rsync by having one file list all the files I care about and then another that listed all the servers to rsync to, but I would still need to deal with the file renamings if I wanted that (symlinks could work to solve that issue).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My thinking is to have a simple configuration file that uses ConfigParser. Sections would represent subdirectories in the archive. Keys in each section represent files that are to end up in the subdirectory (directories themselves represent the directory specified). And value is to stand for a possible rename of the file itself (e.g., so that configuration files with a leading dot can skip that in the archive and thus easily be viewed). Obviously nothing complex:&lt;/div&gt;&lt;pre&gt;[ZSH]&lt;br /&gt;~/.zshrc = zshrc&lt;br /&gt;&lt;br /&gt;[SSH]&lt;br /&gt;~/.ssh/id_dsa =&lt;br /&gt;&lt;/pre&gt;Could even go as far as having a configuration section to specify the archive file name, format, and servers to upload the file to.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But perhaps having a backup directory that has symlinks for the desired renaming and then use rsync to deal with the uploading might be the simplest solution.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/idea-for-critical-file-archive-script.html' title='An idea for a critical file archive script'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=3647833497112811970' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/3647833497112811970/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/3647833497112811970'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/3647833497112811970'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-7113233401511021002</id><published>2008-04-15T17:37:00.002-07:00</published><updated>2008-04-15T17:43:50.841-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><category scheme='http://www.blogger.com/atom/ns#' term='version control'/><title type='text'>Now using Bazaar branches on code.python.org for importlib stuff</title><content type='html'>I have been doing my importlib work (both the library and bootstrapping in 3.0) in local bzr branches on my machine. But today I finally decided to push them up to &lt;a href="http://code.python.org"&gt;code.python.org&lt;/a&gt;. If you go &lt;a href="http://code.python.org/python/users/brett/"&gt;here&lt;/a&gt; you will see the two branches I created. Ignore the fact that Apache lists the directories as empty; everything is kept in a .bzr directory.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/now-using-bazaar-branches-on.html' title='Now using Bazaar branches on code.python.org for importlib stuff'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=7113233401511021002' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/7113233401511021002/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/7113233401511021002'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/7113233401511021002'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-350392501015971511</id><published>2008-04-14T12:49:00.003-07:00</published><updated>2008-04-14T12:56:46.609-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Py3K'/><category scheme='http://www.blogger.com/atom/ns#' term='PEPs'/><title type='text'>I hate PEP 263</title><content type='html'>&lt;a href="http://www.python.org/dev/peps/pep-0263/"&gt;PEP 263&lt;/a&gt; is the one that allows one to specify the encoding of a Python source file. It is giving me such a headache with trying to bootstrap importlib. Because I must be able to open a source file with the proper encoding I must also have the entire codecs system working properly. This is a problem when the codecs system relies on imports to get to decoders.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now the UTF-8 decoder is set up by default. But everything else, including ASCII, must be reachable through an import. That can be a problem when it is import that needs that module.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is also a pain that one must open a file in a generic fashion, read the first two lines of a file, use a regex to try to find a specified encoding, and then reopen the file with the encoding found. That's a lot of stat calls and such that can be expensive. To deal with this and other bootstrapping issues I am going to have to expose some more C code in my special version of 3.0 in order to get this to work. Luckily it has partially been done for me thanks to imp.find_module() which does the proper file opening, albeit using the C import code. Once a pull it out to give me basically a custom source code open() function I should be able to move on to the next failing test.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Currently there are seven failing tests (albeit I can't run importlib properly anyway because of the PEP 263 issues). I have until early June to get this all done. Here is to hoping I can pull this off and properly delegate the stdlib reorg so that it all doesn't impact my personal life (which now includes looking for a new apartment for myself).&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/i-hate-pep-263.html' title='I hate PEP 263'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=350392501015971511' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/350392501015971511/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/350392501015971511'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/350392501015971511'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-1422033034067456884</id><published>2008-04-12T16:59:00.002-07:00</published><updated>2008-04-12T17:05:00.874-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Python 2.6'/><title type='text'>C implementation of 'warnings' now in the trunk</title><content type='html'>I finally finished the re-implementation of the 'warnings' module in C. This allows for a couple of things. One is that now warnings can be emitted by the parser since the module is built-in. Two, hopefully this can speed some things up like interpreter start-up if the C version of the module is used over the pure Python implementation. And third, this was needed by me for importlib to deal with bootstrapping.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/04/c-implementation-of-warnings-now-in.html' title='C implementation of &apos;warnings&apos; now in the trunk'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=1422033034067456884' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/1422033034067456884/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/1422033034067456884'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/1422033034067456884'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-2424038757931992820</id><published>2008-03-24T16:18:00.002-07:00</published><updated>2008-03-24T16:56:11.473-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='import'/><title type='text'>How I want to change how import works</title><content type='html'>For those of you who attended PyCon 2008, you may have heard my lightning talk where I ranted about how I don't like various approaches to import. I have now had time to think things through and I have a more solid plan on how I want to change things in a (mostly) backwards-compatible fashion.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First off, I want to provide a cleaner API for people to use directly. __import__() has it's call signature as it is for simplicity of bytecode. But what is good for bytecode is not necessarily good for a human being. So I want to introduce ``import_module(name:str, level:int, caller_name:str, caller_is_pkg:bool, top:bool)``. The arguments represent:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;name: Same as for __import__().&lt;/li&gt;&lt;li&gt;level: Same as for __import__().&lt;/li&gt;&lt;li&gt;caller_name: the __name__ value of the module performing the import.&lt;/li&gt;&lt;li&gt;caller_is_pkg: true if the caller is a package (i.e., defines __path__).&lt;/li&gt;&lt;li&gt;top: true if the top-level module is desired instead of the tail module.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Thus __import__() can call import_module( ) as ``import_module(name, level, globals['__name__'], '__path__' in globals, bool(fromlist)``. This will allow __import__() to do what it needs to do to handle the fromlist for the bytecode but still have a nicer call signature for those of you who want to dynamically import modules.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next, and the most backwards-incompatible change I want, is to use sys.meta_path exclusively for holding importers (which incidentally probably should have been named "finders" since importers don't import anything).  No more implicit built-in/frozen/extension/source importer, just was is on sys.meta_path. The problem with that is people may have been clearing sys.meta_path for some reason in the past or blindly resetting it. With this change that would cause problems since it would wipe out all the default importers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This would also do away with the need for sys.path_importer_cache and sys.path_hooks. Both attributes are more implementation details and thus should be pushed on to importers and not imprt. By considering sys.meta_path the only place to look for importers you can then just treat sys.path as a fallback list of locations to look on when find_modules() is called with 'path' set to None. This would break backwards-compatibility unless an importer on sys.meta_path is added that uses sys.path_hooks and friends as needed (which shouldn't be hard and would make having the proper DeprecationWarning easy).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lastly, in terms of sys.meta_path, I would want separate importers for extension modules and source code. This makes it much more explicit which is considered more important as well as simplifying implementations and allowing for more control over imports. The problem is that this is backwards-incompatible. Currently the search for a module on sys.path places its location on sys.path as the highest priority, followed by whether it is an extension module or source code; this change would flip those priorities. In practice this shouldn't be an issue since having two modules on sys.path with the same is just plain bad to begin with and thus makes a module's location on sys.path not critical in terms of this.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With import itself now simplified, I want to also make it easier to customize the loading of source code and bytecode. To do that I want to add two more importer protocols. The first is to introduce`` source_mtime(module:str) -&gt; int`` and ``read_bytecode(module:str) -&gt; bytes``. These two methods along with get_source() covers all the details needed to figure out whether bytecode or source code should be used for a specific module and to get at what is needed to create the proper code object. This allows for a generic function to handle all of the critical steps for creating a code object from source, letting loaders only have to worry about deciding how to get the source, bytecode and last modification of source. It also allows for easier swapping out of the default handler of source and bytecode when someone wants to run a transformation of the source or bytecode.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The other protocol I want is ``write_bytecode(module:str, bytecode:bytes) -&gt; bool``. This allows for a loader to store back any newly generated bytecode. This is perfect for people who want to suppress bytecode generation or have them written to a specific location. It also makes it easier for loaders to just have the support to store bytecode if they only start off with source. The zipfile importer, for instance, could use source but then write back bytecode when possible to make things simpler.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After that the stuff I want is all implementation specific (e.g., a decorator for load_module() that handle getting the proper module to use since that is just boilerplate that every loader has to implement). I don't think there is much here that is hugely controversial. And I think it is all for the better as it makes the import algorithm simpler along with making it all more explicit and easier to customize.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But I wouldn't expect any of this to get into 3.0. This will very likely be a 3.1 thing. But for any of you reading this that currently play with sys.meta_path and always assume it is empty by default; I would stop doing that if I were you. =)&lt;/div&gt;&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/how-i-want-to-change-how-import-works.html' title='How I want to change how import works'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=2424038757931992820' title='8 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/2424038757931992820/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/2424038757931992820'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/2424038757931992820'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-7032161135177771286</id><published>2008-03-23T17:23:00.003-07:00</published><updated>2008-03-23T18:27:24.705-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PyCon'/><title type='text'>PyCon 2008: the sprints</title><content type='html'>The sprint attendance this year was amazing! We had around the same number of people sprinting as we did at PyCon 2003 (which was the first PyCon); 250 people! The sprinters on the core made up just under 30 people on the first day and tapered off from there as time went on. It was nice to have so many new faces show up and participate.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Playing the role of sprint coach led to me creating an issue for everything that needs to be done for 2.6 in terms of backporting from 3.0. I think I filed over 40 bugs on that topic. But through the sprint and continual work since then that number is down to around 30.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Four people also got commit privileges this year. That was helpful to speed up development as those developers no longer were bottlenecked as much by waiting for core developers to check in their code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A couple of big events happened at the sprints this year. One is that the release schedule for 2.6 and 3.0 was set. As stated by &lt;a href="http://python.org/dev/peps/pep-0361/"&gt;PEP 361&lt;/a&gt;, we should hit beta by early June, release candidate in August, and final release in September. For me personally that means I have until June to get the stdlib SIG to make decisions on stdlib reorganization (set a deadline of April 15th for suggestions of modules to remove). I also have until June to get my import stuff in.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another one is that we now have a &lt;a href="http://python.org/dev/bazaar/"&gt;Bazaar mirror up&lt;/a&gt; of the trunk, 2.5, and 3.0. Currently, though, you can't build from the checkout since Python/sysmodule.c expects to be run from a svn checkout. Also, please realize this is just a test to see if various core developers like the idea of a distributed VCS. Please do not start pushing for some other VCS! If the idea of a distributed VCS becomes popular enough then we can start considering Mercurial, etc. But until then we are just going with what people were willing to set up at PyCon, and that was Bazaar.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Those two things are the big announcements. Everything else is various work on 2.6 and 3.0. As always the sprints were fun but exhausting.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/pycon-2008-sprints.html' title='PyCon 2008: the sprints'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=7032161135177771286' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/7032161135177771286/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/7032161135177771286'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/7032161135177771286'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-5713007231577013915</id><published>2008-03-22T13:01:00.002-07:00</published><updated>2008-03-22T13:53:49.181-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PyCon'/><title type='text'>PyCon 2008: the conference</title><content type='html'>A word of advice when attending PyCon: try not to show up ill.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I arrived on the conference Wednesday afternoon since my roommate had the room booked starting then and to get over the jet lag since my talk was Friday morning. But I came to PyCon with a cold and it drained me. Nothing much happened Wednesday except dinner with some people.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Thursday was the tutorials. I was not giving nor attending any, so I spent the day saying hi to people I know as they showed up at the hotel along with trying to get work on for my &lt;a href="http://aosd.net/2008/index.php"&gt;AOSD&lt;/a&gt;&lt;a href="http://www.aosd.net/2008/program/demos.php"&gt; demo&lt;/a&gt; (I will give a complete blog post on my work once AOSD is over). It felt rather odd to be doing Java work at PyCon. =)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Friday was when the conference really started. The diamond keynote by White Oak Technologies was entertaining (i.g., I disagree with some people who have blogged that the diamond keynotes by sponsors was a bad idea). Guido's talk was not overly informative for me, but it is still interesting to see how the audience responds to what is going on in Py3kLand. It was also interesting to hear Guido say that I am probably regretting signing to be the lead on the stdlib reorg. Guido rarely mentions people by name when giving a talk, instead treating python-dev as a large group and all things coming out of it a group effort (or at least that is what it seems like; maybe he just doesn't remember who did what). When he bothers to mention someone by name I tend to take notice.  So having him publicly point out the pain I am dealing with was nice. =)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I gave my talk later that day. Having my earlier version of my talk flop at VanPyZ, I restructured it to be much more visual, using flowcharts to get key points across. I didn't practice this new version, and manager to finish in 17 minutes. That left me roughly 12 minutes to be peppered with questions. A few were clarification questions, but most were very specific problems people had encountered with import. I tried my best to answer them on my feet. I also got tracked down multiple times throughout the conference with more questions. Various people told me the talk went well, but I always worry I went too fast, didn't state things simply enough, etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The rest of Friday, for me, was PSF-related (my cold did not make it easy to stay focused for very long). The general members meeting happened and I got re-elected to the board. The board also had a meeting where I suggested that we try to pay to have more sprints occur for the core team so we can be productive more than just once a year at PyCon, which was well received. We also had an amazing dinner later where I had this huge hunk of prime rib which was amazing. After shocking people I finished my dinner I ordered dessert which turned out to be massive as well (there will be, I'm sure, photos of my and that dessert floating around on the Net once some board members upload their photos). Luckily almost everyone at the table helped me eat it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In terms of talks on Friday I remember attending Adrian's "The State of Django" talk. It was fun to sit next to Jacob while Adrian was presenting to get insider info on various things that were going on. And congrats to the Django guys for announcing there movement forward on starting a foundation!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also attended Friday's sprints. Yes, the sponsor sprints were a bad idea, but they had worked out in 2007. Anyway, they won't happen again. I remember Jerry Seutter's lightning talk the most from that day since it was extremely entertaining and admittedly written thanks to sleep deprivation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Saturday, thanks to my cold, was a day to sleep in, so I missed Van's keynote (which I wanted to attend, darn it). I made Richard's talk on Pyglet, Maciej's talk on PyPy, and Michael's talk on Python and Silverlight. All three were interesting.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Also hit up the lightning talks. I decided to start a PyCon tradition for myself where every year I will give a lightning talk bitching about some facet of Python I don't like. Last year it was on tuple parameters and led to &lt;a href="http://python.org/dev/peps/pep-3113/"&gt;PEP 3113&lt;/a&gt;. This year I complained about various stuff related to import. I am hopeful that in Py3K I can get rid of implicit importers (e.g., built-in imports, etc.) and put them directly on sys.meta_path. This would allow for having an importer that deals with sys.path be put on sys.meta_path that treated sys.path as a fallback mechanism, removing sys.path_hooks and friends and subsume them into the individual importers. This would tweak import semantics by having how a module is written (extension module vs. bytecode) take precedence over location on sys.path, but if you have multiple modules with the same name on sys.path you are already asking for trouble. Lastly, a new function that makes it easier to directly import a module will most likely come into existence.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;On Sunday I attended Mark Hammond's keynote on Python and Mozilla. It was interesting to hear him discuss the community problems that PyXPCOM has since the Python community thinks it is a Mozilla project and Mozilla thinks it's a Python project, and so no one claims it. I know I always thought of it as a PyXPCOM project.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I also attended Jim Hugunin's talk on IronPython. As always things are moving forward. They showed Django up and running using MS SQLServer running as the backend. I also hit up the lightning talks which were as good as Friday's.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Then my block of content came up. I gave my intro to sprinting while only lasted like 10 minutes. There was one silly picture early on in the talk that got a bunch of good laughs and I kept getting comments on throughout the sprints. I then led the sprint panel afterwards. I honestly think the panel was unneeded; there was only like three or four questions from the audience. I believe most people who showed up knew what sprints were and so they didn't really have any questions.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After that I gave my tutorial on core development. Actually met some people who had already contributed to Python while I was presenting (which I did from a chair sitting in front of everyone). People seemed to get something out of it which was good.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And that was the conference! I will do a separate post on the sprints. Overall I was pleased once again with PyCon. I was constantly blown away when I realized that there were over 1040 people at the conference. I remember PyCon 2003 when it was only about 250 people. The conference has finally reached a size where I actually went a full day without seeing some friends. It's definitely great to see Python grow so much and yet still have a community of very friendly people exist around it.&lt;/div&gt;</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/pycon-2008-conference.html' title='PyCon 2008: the conference'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=5713007231577013915' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/5713007231577013915/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/5713007231577013915'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/5713007231577013915'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-3936616420453501583</id><published>2008-03-08T12:18:00.003-08:00</published><updated>2008-03-08T13:54:33.958-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PyCon'/><category scheme='http://www.blogger.com/atom/ns#' term='importlib'/><title type='text'>import, illustrated, and PyCon registration stats</title><content type='html'>This past Tuesday I gave my &lt;a href="http://us.pycon.org/2008/conference/talks/"&gt;import talk&lt;/a&gt; to &lt;a href="http://vanpyz.org"&gt;VanPyZ&lt;/a&gt;, my local Python user's group. Turns out it was not only long, I had details in there that were not what people cared about (specifically covering the details of choosing what module to have __import__ return). I also realized that explaining import in text was not as clear as I thought it was (problem of having been neck deep in this stuff for so long).&lt;br /&gt;&lt;br /&gt;And so, thanks to my supervisor paying for a copy of &lt;a href="http://www.omnigroup.com/applications/omnigraffle/"&gt;OmniGraffle Pro&lt;/a&gt;, I have been reworked my presentation using flowcharts. I think the charts make the presentation much easier to follow as now you can visually follow the various cases that must be dealt with instead of reading some pseudocode or me trying to explain things through bullet points.&lt;br /&gt;&lt;br /&gt;A side-effect of doing multiple flowcharts on import for my presentation is that I wanted to make a single, comprehensive flowchart of what import does. &lt;a href="http://svn.python.org/view/sandbox/trunk/import_in_py/docs/"&gt;That flowchart&lt;/a&gt;, along with the master graffle file, is in svn. As &lt;a href="http://brettsky.jaiku.com/presence/28299739"&gt;I said on Jaiku&lt;/a&gt;, the algorithm doesn't look complicated when drawn as a flowchart, but boy is it long!&lt;br /&gt;&lt;br /&gt;I will probably eventually finish the flowchart to be comprehensive. As of right now it lacks the details of deciding what module to return. I also left out any details on how the source/bytecode importer/loader works and I would like to get that drawn as well.&lt;br /&gt;&lt;br /&gt;And in PyCon news, it looks like there will be 1029 attendees at PyCon if everyone who still needs to pay does. Possibly over a thousand attendees! We had over 600 last year. The growth is just phenomenal. I still remember the first PyCon when it was about 200 attendees and we had A/C issues with all the rooms. Now we have sponsored sprints, a keynote each day, and paid lunches. The conference has come a long way.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/import-illustrated-and-pycon.html' title='import, illustrated, and PyCon registration stats'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=3936616420453501583' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/3936616420453501583/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/3936616420453501583'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/3936616420453501583'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-2597653273328055805</id><published>2008-03-02T20:27:00.002-08:00</published><updated>2008-03-02T20:33:29.546-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PyCon'/><category scheme='http://www.blogger.com/atom/ns#' term='lazyweb'/><title type='text'>What would you ask a panel of sprint coaches?</title><content type='html'>Dear Lazyweb:&lt;br /&gt;&lt;br /&gt;As part of my PyCon duties I am giving a sprint intro talk and acting as MC for a panel of sprint coaches. The intro talk will probably be pretty short as sprints are not a complicated thing.&lt;br /&gt;&lt;br /&gt;The thing that I am currently trying to do is pull together seed questions for the panel in case the audience takes a little while to come up with some questions. So far I have:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;How have sprints helped your project?&lt;/li&gt;&lt;li&gt;What do you get out of sprinting, both as a coach and a participant?&lt;/li&gt;&lt;li&gt;Has anyone used sprinting in a corporate environment?&lt;/li&gt;&lt;/ul&gt;If anyone has suggestions of questions, please leave a comment with the question. If you plan to attend the sprint intro session and have a question, please ask it. =)</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/what-would-you-ask-panel-of-sprint.html' title='What would you ask a panel of sprint coaches?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=2597653273328055805' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/2597653273328055805/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/2597653273328055805'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/2597653273328055805'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-6983808460324650077</id><published>2008-03-01T20:06:00.002-08:00</published><updated>2008-03-01T21:07:55.571-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='stdlib'/><category scheme='http://www.blogger.com/atom/ns#' term='python 3.0'/><category scheme='http://www.blogger.com/atom/ns#' term='Python 2.6'/><title type='text'>Python 2.6a1 and 3.0a3 are out (and stdlib stuff)</title><content type='html'>The big news is that Python &lt;a href="http://www.python.org/download/releases/2.6/"&gt;2.6a1&lt;/a&gt; and Python &lt;a href="http://www.python.org/download/releases/3.0/"&gt;3.0a3&lt;/a&gt; have been released. I had not realized how many entries there now were in 2.6's NEWS file! And 3.0 in a way subsumes 2.6's entries and then tacks on its own. Anyway, have a look. Obviously realize that neither are near their final versions. 3.0 still has stuff going on and 2.6 still has a bunch of stuff from 3.0 that needs backporting.&lt;br /&gt;&lt;br /&gt;On the stdlib reorganization front I announced that March 15th is the deadline to propose new packages. As of right now it looks like there will be six new packages (only five are listed in &lt;a href="http://python.org/dev/peps/pep-3108/"&gt;PEP 3108&lt;/a&gt; as the details of a proposed url package is still being worked out). Probably once this is settled I will move on to module deletions. That will be interesting. =)</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/03/python-26a1-and-30a3-are-out-and-stdlib.html' title='Python 2.6a1 and 3.0a3 are out (and stdlib stuff)'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=6983808460324650077' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/6983808460324650077/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/6983808460324650077'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/6983808460324650077'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-3417945579891667383</id><published>2008-02-27T14:24:00.003-08:00</published><updated>2008-02-27T14:39:11.638-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='lazyweb'/><title type='text'>What should a tourist do in and around Brussels?</title><content type='html'>To steal a line from &lt;a href="http://ivory.idyll.org/blog"&gt;Titus&lt;/a&gt;, Dear Lazyweb:&lt;br /&gt;&lt;br /&gt;I am going to &lt;a href="http://en.wikipedia.org/wiki/Brussels"&gt;Brussels, Belgium&lt;/a&gt; for &lt;a href="http://aosd.net/2008/index.php"&gt;AOSD&lt;/a&gt;. Because of flight costs I will be arriving the Friday before the conference. But since I have never been to Brussels, I booked my flight home the Monday following, giving me an extra weekend after the conference to do more tourist stuff since I know the jet lag is going to kill a day or so.&lt;br /&gt;&lt;br /&gt;But I don't know what to do while I am there. =) I am assuming I can do some stuff at night during the conference, but obviously there is more to do during the day. If anyone has specific pointers as to interesting things within Brussels that would be great to know. Or if there is some place nearby where a weekend visit is worth it that would be great to know as well (since I am flying out of Brussels I don't want to get too far away and burn a lot of time on travel).&lt;br /&gt;&lt;br /&gt;And one more thing: if anyone knows a good book on Belgian history I would love to know that as well. I read Winston Churchill's '&lt;a href="http://en.wikipedia.org/wiki/A_History_of_the_English-Speaking_Peoples"&gt;A History of the English-Speaking Peoples&lt;/a&gt;' when I traveled to England and Scotland and found I loved knowing the history of a place while I was there.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/what-should-tourist-do-in-and-around.html' title='What should a tourist do in and around Brussels?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=3417945579891667383' title='6 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/3417945579891667383/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/3417945579891667383'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/3417945579891667383'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-6639119130622784238</id><published>2008-02-24T01:10:00.002-08:00</published><updated>2008-02-24T01:31:31.912-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='oplop'/><title type='text'>Oplop 0.2 released</title><content type='html'>I just released &lt;a href="http://code.google.com/p/oplop/downloads/detail?name=Oplop-0.2.zip"&gt;Oplop 0.2&lt;/a&gt;, my initial attempt at an application for using account labels and a master password to generate unique passwords for all of my various accounts. The source distribution that I put up includes both a terminal and wxPython interface. You can use the Oplop.py script to launch the application, first trying wxPython and falling back on the terminal version. If you get the svn checkout there is a py2app version if you would like to try to generate an OS X application (creating a standalone version failed for me, but an aliased application works no problem). There is also a &lt;a href="http://code.google.com/p/oplop/wiki/OplopForJ2ME"&gt;J2ME version&lt;/a&gt; written by a friend of mine.&lt;br /&gt;&lt;br /&gt;Do note the release number if you do give it a whirl. I have been using the application for all of my password need for months without any issue, but I make no guarantees. Version 1.0 will most likely come out once I feel comfortable thinking that others have used it without issue as well.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/oplop-02-released.html' title='Oplop 0.2 released'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=6639119130622784238' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/6639119130622784238/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/6639119130622784238'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/6639119130622784238'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-4352103373910137967</id><published>2008-02-22T18:34:00.004-08:00</published><updated>2008-02-22T18:36:00.797-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='PyCon'/><title type='text'>Flight now booked for PyCon</title><content type='html'>I am going to be coming in on Wednesday so I can have a day to deal with jet lag and help set up Wednesday and Thursday. I will be flying out midday on Thursday, so probably going to leave the sprints a little early on that day.&lt;br /&gt;&lt;br /&gt;I just can't believe how expensive the bloody ticket cost! Flying out of YVR tends to be a good experience flight-wise, but boy can the tickets cost a lot.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/flight-now-booked-for-pycon.html' title='Flight now booked for PyCon'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=4352103373910137967' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/4352103373910137967/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/4352103373910137967'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/4352103373910137967'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-3669560462673393459</id><published>2008-02-22T14:02:00.000-08:00</published><updated>2008-02-22T14:03:04.097-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python 2.5'/><title type='text'>Python 2.5.2 out the door</title><content type='html'>&lt;a href="http://www.python.org/2.5.2/"&gt;Python 2.5.2&lt;/a&gt; final has now been released!</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/python-252-out-door.html' title='Python 2.5.2 out the door'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=3669560462673393459' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/3669560462673393459/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/3669560462673393459'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/3669560462673393459'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-4505920986025495203</id><published>2008-02-21T13:35:00.002-08:00</published><updated>2008-02-22T01:10:05.546-08:00</updated><title type='text'>ChiPy meeting being held at PyCon</title><content type='html'>[&lt;span style="font-style: italic;"&gt;edit: I just found out that this will most likely happen, but is not guaranteed yet&lt;/span&gt;]&lt;br /&gt;&lt;br /&gt;The local Chicago Python users group, &lt;a href="http://www.chipy.org/"&gt;ChiPy&lt;/a&gt;, will be holding their monthly meeting at PyCon Thursday evening. So if you happen to be at PyCon that evening they have an open invitation to anyone to attend.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/chipy-meeting-being-held-at-pycon.html' title='ChiPy meeting being held at PyCon'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=4505920986025495203' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/4505920986025495203/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/4505920986025495203'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/4505920986025495203'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-9048444613762611510</id><published>2008-02-19T17:25:00.003-08:00</published><updated>2008-02-19T17:52:38.233-08:00</updated><title type='text'>There is a lot more to hash functions than what they teach you in school</title><content type='html'>As explained in my &lt;a href="http://sayspy.blogspot.com/2007/06/initial-impressions-of-ocaml.html"&gt;blog post on OCaml&lt;/a&gt;, I have toy examples that I write for every language I attempt to learn. I realized the other day that I don't have a good data structures example. My spellcheck example was meant to do that, but I realized I kept cheating using a language's hash table if it was available; the delegate pattern is not a data structure.&lt;br /&gt;&lt;br /&gt;So last night I decided I would take out the heapsort and spellcheck examples I do and replace them with a hash set. I would read in a file with newline-delimited words to be put into a hash set to make sure that file I/O was not lost. The arguments on the command-line would be checked against the hash set and any that were in the set would be printed to stdout. That way I get to combine both a data structures and file I/O example into one so that it is easy to verify the hash set works properly.&lt;br /&gt;&lt;br /&gt;Designing a hash set means choosing both a collision strategy and a hash function. I already knew I wanted to use chaining for the collision strategy since that forces the creation of a linked list instead of using just an array for open addressing and thus just creating another delegate situation. But choosing a hash function was another matter.&lt;br /&gt;&lt;br /&gt;I looked up stuff on hash functions today and discovered a lot of info that was never taught to me. It seems the three popular hash functions these days is the &lt;a href="http://burtleburtle.net/bob/hash/doobs.html"&gt;Jenkins&lt;/a&gt;, &lt;a href="http://www.isthe.com/chongo/tech/comp/fnv/"&gt;FNV&lt;/a&gt;, and &lt;a href="http://www.azillionmonkeys.com/qed/hash.html"&gt;Hsieh&lt;/a&gt; hash functions. They all have very nice randomization values thanks to a focus on "avalanching", which says that most of the time you want a single bit change in the intput to change about half of the bits in the output. All three have varying pros and cons, but in general all seem very strong when you need a general hash function.&lt;br /&gt;&lt;br /&gt;Being me, I also checked out Python's implementation. Tim Peters pointed out that Python's hash function for strings was much &lt;a href="http://mail.python.org/pipermail/python-3000/2007-September/010327.html"&gt;like the FNV hash function by accident&lt;/a&gt;. But it has different characteristics for strings that are similar by not spacing them out but putting them near each other. This has the perk of lowering collision possibilities which is good when your namespaces are hash tables and people tend to use very similar variable names (e.g., var_a, var_b, etc.).&lt;br /&gt;&lt;br /&gt;I have pretty much decided that in my example I am going to use Python's implementation. As Time has said, "&lt;a href="http://www.amk.ca/quotations/python-quotes/page-10"&gt;we read Knuth so you don't have to&lt;/a&gt;" (or at least Tim has). And if I need an explanation about some magic number in the algorithm I can go straight to the source. Plus it has the perk of being a very simple algorithm that is easy to implement.&lt;br /&gt;&lt;br /&gt;Resizing will double the number of buckets.As for the rest of the hash set, I am going to resize when the usage hits or surpasses 2/3. I am going to start off with a bucket count of 8 since my planned inputs are 13 and 50 (Canadian provinces/territories and US states, respectively) and that will guarantee a couple resizings. Should be a fun challenge to get this all implemented in various languages.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/there-is-lot-more-to-hash-functions.html' title='There is a lot more to hash functions than what they teach you in school'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=9048444613762611510' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/9048444613762611510/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/9048444613762611510'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/9048444613762611510'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-8182460606222255442</id><published>2008-02-14T14:56:00.000-08:00</published><updated>2008-02-14T14:58:50.894-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python-dev'/><category scheme='http://www.blogger.com/atom/ns#' term='python 2.5'/><title type='text'>Python 2.5.2rc1 is out</title><content type='html'>You can find it &lt;a href="http://www.python.org/2.5.2/"&gt;here&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/python-252rc1-is-out.html' title='Python 2.5.2rc1 is out'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=8182460606222255442' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/8182460606222255442/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/8182460606222255442'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/8182460606222255442'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-20144447.post-6260183573759662012</id><published>2008-02-13T00:15:00.004-08:00</published><updated>2008-02-13T00:32:46.404-08:00</updated><title type='text'>Ideas on how to write a Boggle solver</title><content type='html'>This past weekend I visited with some friends and we played &lt;a href="http://en.wikipedia.org/wiki/Boggle"&gt;Boggle&lt;/a&gt;. One of my friends who played is really good a word-based games. She trounced all of us horribly, to the point that we only played the game once because it just wasn't fun for the rest of us.&lt;br /&gt;&lt;br /&gt;But it did get me thinking about how I would go about writing the most efficient Boggle solver I could in Python. as a mental exercise. I know that Boggle solvers exist out there, but I wanted to try to think the program out for fun.&lt;br /&gt;&lt;br /&gt;First thing to do is to store a list of words efficiently. I think a &lt;a href="http://en.wikipedia.org/wiki/Trie"&gt;trie&lt;/a&gt; would work really well here. Not only does it minimize memory usage, but I think with the approach I have in mind for finding words it will also be fast once the trie is built.&lt;br /&gt;&lt;br /&gt;With the list of possible words in an easy-to-search form, the board now needs to be traversed. With the rules as they are, the letters can be viewed as a graph. Starting at any letter, you keep a list of letters seen that match potential words according to the trie. As the graph is traversed, you color each visited node so that you don't reuse the letter. Each completed word you find you record and then continue the traversal, following each node.&lt;br /&gt;&lt;br /&gt;When a dead-end is reached you just back up, uncoloring the nodes you just tried. Since a list is being kept of visited (and thus colored) nodes, backing up a node is a constant operation by just uncoloring the last visited node and then looking at the end of the list. And since we are dealing with letters that means you can keep the edges in a sorted list, making it easy to keep track of what the next edge to traverse is. That saves on bookkeeping by keeping track of what edges have already been looked at (although generators could easily get around this by having a parallel list that holds on to generators that generates neighbors for each node, thus getting around any sort cost or having to worry about searching a list for the next item or making a linked list that knows something about what the next node to look at would be).&lt;br /&gt;&lt;br /&gt;Probably someday I will get around to actually implementing these ideas for fun.</content><link rel='alternate' type='text/html' href='http://sayspy.blogspot.com/2008/02/ideas-on-how-to-write-boggle-solver.html' title='Ideas on how to write a Boggle solver'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=20144447&amp;postID=6260183573759662012' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/6260183573759662012/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://sayspy.blogspot.com/feeds/posts/default/6260183573759662012'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/20144447/posts/default/6260183573759662012'/><author><name>Brett</name><uri>http://www.blogger.com/profile/15754007124078149155</uri><email>noreply@blogger.com</email></author></entry></feed>