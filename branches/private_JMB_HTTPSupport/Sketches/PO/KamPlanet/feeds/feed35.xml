<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Glenn Fanxman's python feed</title><link>http://hackermojo.com</link><description>Entries tagged as python</description><language>en-us</language><lastBuildDate>Tue, 08 Apr 2008 17:25:12 -0000</lastBuildDate><item><title>Google App Engine</title><link>http://hackermojo.com/mt-static/archives/2008/04/google-and-django-for-newspapers.html</link><description>Wow!    Google just announced &lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; which will allow users to host their python applications on their server infrastructure similar to Amazon's EC2 services, but in a more straight-forward manner.   The timing is perfect, as I am in the middle of evaluating virtualized hosting for our newspaper websites.   The fact that they've started with python and &lt;a href="http://code.google.com/appengine/articles/django.html"&gt;django&lt;/a&gt; as the core runtime is huge.

That said, all is not perfect.   As Eric and I read more into this, there appear to be some serious limitations.  The google model library seems simplistic, even by django standards ( don't ask the sqlalchemy folk to weigh in on this one ).  Eric has a &lt;a href="http://eric.themoritzfamily.com/2008/04/08/google-apps-engine-wait-what/"&gt;more complete write-up&lt;/a&gt; on this.

Pricing is yet to be set.  I hope it is reasonable.   For my own personal uses, EC2 turned out to be quite expensive compared to the great service I get from &lt;a href="http://slicehost.com"&gt;SliceHost&lt;/a&gt;.  
I wonder how this will effect all of the smaller hosting companies out there.  Free accounts were given to the first 10k users to sign up, and I was pitifully slow in doing so, so I am on the waiting list.   Does anyone know if the next wave of accounts will be doled out in order or via a lottery process? ( or maybe invites like gmail did? )


&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2008/04/google-and-django-for-newspapers.html&amp;title=Google%20App%20Engine"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Tue, 08 Apr 2008 17:25:12 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2008/04/google-and-django-for-newspapers.html</guid></item><item><title>MetroPulse launched</title><link>http://hackermojo.com/mt-static/archives/2008/04/metropulse-launched.html</link><description>We just launched the new &lt;a href="http://metropulse.com"&gt;MetroPulse&lt;/a&gt; and I'm still in the 'keep an eye on it' mode.  The site looks great and will only improve as we round out the features and their staff get more content plugged in.

One of my favorite things about the MetroPulse is &lt;a href="http://www.metropulse.com/photos/2008/apr/3/" title="MetroPulse photos on launch day"&gt;their photography&lt;/a&gt;.   And one of my favorite things about my desktop computer is that it's a &lt;a href="http://apple.com"&gt;mac&lt;/a&gt;.  And one of my favorite things about macs is the &lt;a href="http://www.apple.com/macosx/technology/unix.html"&gt;unix underpinnings of OS X&lt;/a&gt;.   And one of my favorite things about OS X is that it ships with &lt;a href="http://python.org"&gt;python&lt;/a&gt;.

I had to do something about that.

First, I created a folder under my Pictures folder called ScreenSaver.

In there I created ss.py which contained this wonderfully simple python script:
&lt;pre class="python"&gt;
#! /usr/bin/python
import os
from urllib import URLopener
from urllib2 import urlopen
from xml.dom.minidom import parseString

rss_url = 'http://www.metropulse.com/feeds/photos/'
dst_dir = os.path.expanduser('~/Pictures/ScreenSaver/' )

fd = urlopen( rss_url )
src = fd.read()
fd.close()

dom = parseString( src )

for i,e in enumerate( dom.getElementsByTagName( 'item' ) ): 
    enclosure =  e.getElementsByTagName( 'enclosure' )[0]
    link = enclosure.getAttribute( 'url' )
    mime = enclosure.getAttribute( 'type' )
    ext = mime[ mime.index('/')+1:]
    URLopener().retrieve( link, filename="%s%s.%s" % (dst_dir,i,ext) )
&lt;/pre&gt;

Next I created a new file called sscron to run hold a schedule for running that python script:
&lt;pre class="text"&gt;
1      1       *       *       *       /Users/gfranxman/Pictures/ScreenSaver/ss.py
&lt;/pre&gt;

( If you are playing along at home, you'll need to change the 'gfranxman' to your own user name. )

And then I marked the script executable, gave a whirl, and installed the schedule by opening the terminal executing:
&lt;pre class="bash"&gt;
$ chmod u+x ~/Pictures/ScreenSaver/ss.py
$ ~/Pictures/ScreenSaver/ss.py
$ crontab ~/Pictures/ScreenSaver/sscron
&lt;/pre&gt;

Finally, I opened the system prefereces, went to the ScreenSaver preferences and clicked 'Choose Folder'.   After selecting my Pictures/ScreenSaver folder, I now a screen saver of the latest 20 photos posted to the MetroPulse website, refreshed daily and displayed with that gratuitous Ken Burns effect.



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2008/04/metropulse-launched.html&amp;title=MetroPulse%20launched"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Sat, 05 Apr 2008 06:35:56 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2008/04/metropulse-launched.html</guid></item><item><title>Django Envy</title><link>http://hackermojo.com/mt-static/archives/2008/03/django-rails-templates.html</link><description>Seriously, can the django and rails camps quit looking over each others' shoulders?

The &lt;a href="http://code.google.com/p/liquid-markup/wiki/UsingLiquidTemplates"&gt;Liquid Templates&lt;/a&gt; project brings django's template language to rails.   At least it will make transistioning from rails to django easier once that inevitably becomes fashionable.


&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2008/03/django-rails-templates.html&amp;title=Django%20Envy"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Thu, 06 Mar 2008 08:28:03 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2008/03/django-rails-templates.html</guid></item><item><title>Special Ops for Django</title><link>http://hackermojo.com/mt-static/archives/2008/02/django-special-ops.html</link><description>I do a lot of hacking on django both at work and in my spare time.  One of the things I like most about django is the built in admin.    It's cheap, fast and reliable.   But it doesn't always have the functionality you might want to add, and extending it isn't always the easiest thing to do.

So much of what I do ends up being done in an ad hoc mode.  It's only after performing a task a few times that you can really begin to get to the bottom of what is common and belongs in a framework, and what isn't.  So when it came time to add some features to handle blog spam last week, I guess I finally had enough context to extend django's admin in a hopefully intelligent manner.

What I've done is add what I'm calling admin actions to the standard admin mechanisms as defined in the models.  The gist of it is that I've added a few new views and a single function decorator that you can use to unleash the additional functionality within the admin.

( BTW: you can get the diff to patch your instance from &lt;a href="http://franxman.com/browsable/django-special-ops/specialops.diff"&gt;here&lt;/a&gt;.  Just apply it to your django/contrib/admin folder.   I'm using an older version from the .96 days. )

So once you've applied that patch, you'll have the new  @admin_action decorator. It's time to play!
 I've already started adding all sorts of functionality to my models.  Here's an example of its use:

Suppose you've got a lot of blog spam that you want to delete.   Choosing the comments individually and deleting them would be pretty tedious.  We can solve this by creating a bulk deleter function in the manager class for the comments.  Here's how we add multiple delete using the admin_action decorator.

In django.contrib.comments.models I add the following to the CommentManager

&lt;pre class="python"&gt;

from django.contrib.admin.decorators import admin_action

@admin_action( name='Delete selected posts' )
def slaughter( self, id_list ):
    res = ""
    for id in id_list:
        obj = self.get( pk=id )
        res += repr( obj ) + "&lt;" + "b" + "r" + "/&gt;\n"
        obj.delete()
    return "Deleted %s" % res

&lt;/pre&gt;

When you use the admin_action decorator on a manager function it gets turned into an available action on the object listing page.   You'll get check boxes next to all of the items and a dropdown control at the bottom of the list detailing the available actions.  The function signature is important here.  It should expect a list of integers that represent primary keys.   At this point true composite keys are not supported.

Here's what you'll see:
&lt;img src="http://franxman.com/browsable/django-special-ops/bulk_actions.png" /&gt;

After selecting the offending comments and choosing 'Delete selected posts' from the drop down, a quick smack on the submit button takes us to the results page where the slaughter method has been called and the results are presented.
&lt;img src="http://franxman.com/browsable/django-special-ops/bulk_action_results.png" /&gt;


These bulk operations are pretty useful.   Especially on comments.  I've added actions to ban ip addresses, re-check them against akismet, bulk approve/disapprove and send warning notices.

This type of extension is so useful, I immediately extended it to work for model methods too.  When you decorate a method on model, the method shows up in a new section called 'Special Ops' just above the save/delete bar.   

The method should only take 'self' as an argument in this case.     Here's a lazy example for the comment model:

&lt;pre class="python"&gt;

from django.contrib.admin.decorators import admin_action

    @admin_action( name='Send a warning message to this user' )
    def harass( self ):
        """ Send a note to comment.email telling them to chill out. """
        return "warning sent to  %s" % ( self.person_name, )

&lt;/pre&gt;

You'll note it didn't actually do anything.  It doesn't have to.  It's just an example.  One additional thing to note is that the 'name' parameter being passed in to the decorator is optional.  Without it, the method name will be used. 

Here's some screenshot love showing the appearance of the 'harass' action:
&lt;img src="http://franxman.com/browsable/django-special-ops/models_actions.png" /&gt;

and the page resulting from clicking on the action:
&lt;img src="http://franxman.com/browsable/django-special-ops/models_action_results.png" /&gt;

Your actions don't have to do anything directly either.   They can return instructions that link to a full external view if you'd like, or even just redirect out to an external app.  For example:

&lt;pre class="python"&gt;

from django.contrib.admin.decorators import admin_action

    @admin_action( name= 'Destroy for all time after formatting the system drive' )
    def burninate( self ):
        return """   ********** Are you sure?   Are you absolutely certain? Really?   ***************
                        &lt;strong&gt;&lt;a href="/some/dangerous/view/%s/"&gt;YES, I hate persistent storage&lt;/a&gt;&lt;/strong&gt;
                        &lt;b """ + """r/&gt;
                        &lt;a href="../../"&gt;No, I'm good. l8r...&lt;/a&gt;
        """ % self.id

    @admin_action( name="Vendor tasklet" )
    def outsourced( self ):
        return """&amp;lt;scrip""" + """t&gt;document.location = "http://example.com/task?ctnt=%s";&amp;lt;/sc""" + """ript&gt;""" % urlencode( self.content )

&lt;/pre&gt;


Now you can easily hook in views for spell checking, signaling your edge-caching service, advanced lookups, entity extraction, sending to a mailing list, etc.

( BTW: I know the results pages are ugly.   Suggest a fix.  If there's interest, I'll submit this to django proper, but I know they're working on a newforms admin anyway.  If you find this useful or have questions just drop me note here. )

UPDATE: I've pulled down the latest 0.96.1 stable release, applied the patches to that and replaced the pathfile linked to above with something more people can use.  To apply it to your own django, try:

&lt;pre class="bash"&gt;

$ cd django/contrib/admin
$ wget http://franxman.com/browsable/django-special-ops/specialops.diff
$ patch  --strip 0 &lt; specialops.diff 

&lt;/pre&gt;

And you're off to the races, ready to add multiple delete, etc to your models.
If you'd like to receive or contrib improvements, I'm using bzr, so you can stay in sync with the whole thing by :
&lt;pre class="bash"&gt;

$ bzr branch http://bzr.franxman.com/Django-0.96.1-SpecialOps/

&lt;/pre&gt; 



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2008/02/django-special-ops.html&amp;title=Special%20Ops%20for%20Django"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Fri, 29 Feb 2008 05:47:20 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2008/02/django-special-ops.html</guid></item><item><title>OpenCalais beats me to the punch</title><link>http://hackermojo.com/mt-static/archives/2008/02/opencalais.html</link><description>&lt;a href="http://clearforest.com" alt="logo looks like crap anywhere but on a white background"&gt;&lt;img class="left" src="http://www.clearforest.com/mashery/img/logo.gif" /&gt;&lt;/a&gt;I've been playing with various entity and information extraction frameworks for the past couple weeks with the goal of creating an web service for extracting the major topics from news articles.  SP far, my work, such that it is, has shown promise, but is not as robust or reliable as I would have hoped.

I just noticed that Reuters has apparantly been working along the same lines and have &lt;a href="http://www.opencalais.com/"&gt;opened their work to the public&lt;/a&gt;.  On the one hand, I feel beaten.   On the other, their service does not appear to be much better than my own - although they'll have a larger set of people re-training their decision trees than I'll ever have.

I've been using posts from my own blog as my testing ground, so I thought I'd throw my &lt;a href="http://hackermojo.com/mt-static/archives/2008/01/opa-summit.html"&gt;last post&lt;/a&gt; through and see what it churns out:


Relations: PersonProfessional
Organization: Entrepreneur Fund
IndustryTerm: rubber
Person: Len Gilbert, Tom Berreca, Darline Jean, Glenn Franxman, Matthew de Gannon, Sam Parker, Clark, Beth Higbee, Eleanor Cippel, Martha Stewart
City: Naples


Well, I don't even try to extract relations, so that's pretty cool.  

IndustryTerm is pretty puzzling, although I understand why they were fooled by it.

My organization extraction appears to handle this better, inso far as I am extracting things like The Weather Channel, etc from that post.

My City extraction is better in so far as it fetches the state along with the city name.

Person extraction is interesting.   They got Martha Stewart, where as I keep tripping over it, and call her Martha Stewart Living, and I pull out Omnimedia as an Orgnaization.    

For comparisons sake, here's the result of my own project:
13LOCATION:Summit
23LOCATION:Naples,Fl
40ORGANIZATION:Ritz-CarltonGolfResort
101PERSON:Matthew
103PERSON:Gannon
105ORGANIZATION:SVP
107ORGANIZATION:TheWeatherChannelInteractive
112PERSON:LenGilbert
117PERSON:Hill
119PERSON:DarlineJean
131ORGANIZATION:Products
133ORGANIZATION:TheWeatherChannelInteractive
153ORGANIZATION:Weather
171ORGANIZATION:TomBerreca
175ORGANIZATION:SVPDigital&amp;Emerging
179PERSON:Media
181PERSON:MarthaStewartLiving
184ORGANIZATION:Omnimedia
186PERSON:SamParker
189ORGANIZATION:CNET
194PERSON:Tom
201ORGANIZATION:Scripps
204PERSON:Martha
257PERSON:EleanorCippel
260ORGANIZATION:Scripps
268PERSON:BethHigbee
271ORGANIZATION:ScrippsNetworksInteractive
367PERSON:Eleanor

Fugly formatting aside, I'm being way more aggressive in  my extraction.  I think I'm going to need better confidence heuristics.  Also, I'm a lot slower than OpenCalais.

There's all sorts of interesting differences, many probably come from the body of text they've got to train against.  I'm still fooled by names like Matt de Ganon.   The most interesting bit, though, is how the two systems treated the phrase "Martha Stewart Living Omnimedia".

Oh well.  They have a bounty for anyone who can create a wordpress plugin for this.   I don't use wordpress, or I would have done tonight.  As it stands, I might plug it into this site or create a javascript badge to make it usable anywhere.


&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2008/02/opencalais.html&amp;title=OpenCalais%20beats%20me%20to%20the%20punch"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Mon, 11 Feb 2008 09:57:23 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2008/02/opencalais.html</guid></item><item><title>Python and Java</title><link>http://hackermojo.com/mt-static/archives/2007/09/pyjdbc.html</link><description>I wondering if http://sourceforge.net/projects/pyjdbc/
can be used to let django
use http://sequoia.continuent.org/HomePage
as a way to scale up postgres



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2007/09/pyjdbc.html&amp;title=Python%20and%20Java"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Fri, 14 Sep 2007 01:44:40 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2007/09/pyjdbc.html</guid></item><item><title>More on the two column layout</title><link>http://hackermojo.com/mt-static/archives/2007/09/more-two-column-layout.html</link><description>More tweaks on the &lt;a href="http://hackermojo.com/mt-static/archives/2007/08/two-column-layout.html"&gt;two column layout&lt;/a&gt;.   In addition to using multiple columns to pull the comments up alongside the original posting, I can use the second column for a single prominent ad and a few navigational tools.

This gives the ad a persistent spot on the page in a location that doesn't compete with the content, but maintains a certain amount of weight and commands some attention in so far as there is a little animation involved without it actually competing with the content.
 
Part of me wants to put the comment form over there as well.

You might also notice that the system is now making recommendations for additional articles based on a combination of the current article and past articles you've read.  Ultimately, I'm going to have a mix of strategies that build a single list.  

Right now, there are content targeted entries and behaviorally targeted ones.  I want to add featured articles that I select, articles deemed most popular by page viewing, and articles that match whatever search term last brought you to the site.  I'll be presenting them separately until I understand a little better how each performs, but I hope to ultimately have a formula for combining the sets and ranking each against the other.

I'm still experimenting with linear versus logarithmic decay for the behavioral recommendation engine which I've based on radio active exposure to variously tagged content.   You can see your scores  in the footer if you are interested in that sort of thing.
  

&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2007/09/more-two-column-layout.html&amp;title=More%20on%20the%20two%20column%20layout"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Sat, 08 Sep 2007 21:19:19 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2007/09/more-two-column-layout.html</guid></item><item><title>The power of Zero</title><link>http://hackermojo.com/mt-static/archives/2007/02/the-power-of-ze.html</link><description>So I've been on this minimalism kick for a couple weeks.  Basically applying a "less is more" philospophy to software.    This time I'm building a site that has no content of its own, no network configuration of its own, no database, etc.  I'm trying to build it completely out of reusable components that themselves use sensible defaults allowing for &lt;a href="http://en.wikipedia.org/wiki/Zeroconf"&gt;zero-configuration&lt;/a&gt; deployments with the flexibility to allow them to be controlled in cases requiring advanced control.  

You can see it at &lt;a href="http://homes.knoxzilla.com"&gt;homes.knoxzilla.com&lt;/a&gt;.  In fact you can see it at anything.knoxzilla.com,too.   You can use any word you like and add .knoxzilla.com to the end and get the site.   Behind the scenes it will use your word to fetch headlines from &lt;a href="knoxnews.com"&gt;knoxnews.com&lt;/a&gt;.  Business listings and photos come from within a 15 mile radius of the 37922 zipcode.  I built it all using &lt;a href="http://djangoproject.com/"&gt;django&lt;/a&gt; and &lt;a href="http://developer.yahoo.com/"&gt;yahoo APIs&lt;/a&gt;.  The latin text is random and supplied via a nice library I'm building called mockup and loremipsum.

The components I'm building allow me do things as simple as {% loremipsum %} and poof -- you get one to six random passages from &lt;a href="http://www.thelatinlibrary.com/cicero/fin1.shtml"&gt;Cicero's De finibus bonorum et malorum&lt;/a&gt;, "On the ends of the good and the evil."   There's a lot of history tied to that text and the world of print that has made its way into online culture 2052 years later.   

Images are now as simple as {% yahoo_images query="knoxville",hostname %} and headlines come via {% yahoo_local query=hostname site="knoxnews.com" %}.  Business listings come compliments of {% yahoo_local query=hostname radius="15" zip="37922" %}.  Add in some clever templating and css to handle their default output and viola!

After I clean up some of the some of the code to where I like it, I plan on making the layout more theme-able to work like the &lt;a href="http://www.csszengarden.com/"&gt;css zen garden&lt;/a&gt; on steriods.   I'm not much of a graphic designer, so I'm lifting the look and feel from other sources like &lt;a href="http://www.oswd.org/"&gt;oswd.org&lt;/a&gt;.

After that, perhaps I'll look at &lt;a href="http://www.mochikit.com/"&gt;mochikit&lt;/a&gt; or &lt;a href="http://jquery.com/"&gt;jquery&lt;/a&gt; as ways to add prev/next/more functionality to the widgets so all of this information can be browsed from the context of that page without require complete refreshes.

As it stands, that was one night's work and it is running on a &lt;a href="http://www.slicehost.com/"&gt;machine with only 256 MB of ram&lt;/a&gt;.  How's that for minimalist?  

Given that I find writing code easier than writing english, by the time I publish this entry, I will likely have spent more time describing the site than it took to build it.

UPDATE:
 Where this seems to be working really well is host names like:
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://bearden.knoxzilla.com"&gt;Bearden&lt;/a&gt;
 &lt;li&gt;&lt;a href="http://northshore.knoxzilla.com"&gt;Northshore&lt;/a&gt;
 &lt;li&gt;&lt;a href="http://karns.knoxzilla.com"&gt;Karns&lt;/a&gt;
 &lt;li&gt;&lt;a href="http://oak.ridge.knoxzilla.com"&gt;Oak Ridge&lt;/a&gt;
 &lt;li&gt;...
&lt;/ul&gt;


&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2007/02/the-power-of-ze.html&amp;title=The%20power%20of%20Zero"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Thu, 15 Feb 2007 03:43:24 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2007/02/the-power-of-ze.html</guid></item><item><title>Long time, no post</title><link>http://hackermojo.com/mt-static/archives/2006/12/long-time-no-po.html</link><description>Wow, it has been half a year since this site was up.

It used to be that I hosted this site ( and all of the other crazy sites I have ) out of a spare bedroom.   That server room was host to anywhere between 4 and 12 computers at any given time.   I generated a lot of noise, and a lot of heat.

When we decided to move, I shut everything down and put the servers in storage so that the room could be made more presentable.   Wow, our energy bills dropped by more than $80 per month at that point.  And the room became much more inhabitable.


Now that we've moved into our new home, I'm reticent to put it all back in place, so instead of that, I'm experimenting with Xen.   Xen is an open source virtualization project similar to vmware of parallels, but only for linux.  At this point I've got a virtual machine, which you are using right now that is running in boulder.   



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2006/12/long-time-no-po.html&amp;title=Long%20time%2C%20no%20post"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Sat, 09 Dec 2006 05:43:39 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2006/12/long-time-no-po.html</guid></item><item><title>Love/Hate</title><link>http://hackermojo.com/mt-static/archives/2006/03/lovehate.html</link><description>Every day that I spend messing with python and django, I learn something new or find simpler ways of doing things than I've done them in the past.

Tonight I've been experimenting with Django's templating language.   I've been building my tag libraries to augment the django's general purpose templating language and data filters for a while now, but today I started really poking around its eqivalent of ObjectGraphNotationLanguage.  The stuff I'm doing is really going to change the way we build stuff at work.

At the same time, there are a lot of nasty annoyances/bugs/oversights that are hard to believe.  Still, for development it kicks Java J2EE ass any day.

I joke at work that django either rocks or sucks depending on whether it is an odd or even hour.   It's almost 4 am now, so I guess I should turn in while it still rocks.



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2006/03/lovehate.html&amp;title=Love/Hate"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Sat, 18 Mar 2006 08:49:54 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2006/03/lovehate.html</guid></item><item><title>Leaving MT</title><link>http://hackermojo.com/mt-static/archives/2006/02/leaving-mt.html</link><description>After all this time with MT, I've decided to go my own way.   If you've ever come to the same decision, then you know that MT's export is a pretty lame format that doesn't include all of the information you might need if you migrating to another system.

The solution I've come to is to create a MT template that exposes everything as a single xml document.   Here's what I'm using so far:
&lt;pre class="xml"&gt;
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;movabletype xmlns="http://movabletype.org/mtexport/1.0"&gt;
  &lt;blogs&gt;
    &lt;MTBlogs&gt;
      &lt;blog&gt;
    &lt;id&gt;&lt;$MTBlogID$&gt;&lt;/id&gt;
    &lt;name&gt;&lt;$MTBlogName$&gt;&lt;/name&gt;
    &lt;description&gt;&lt;![CDATA[&lt;$MTBlogDescription$&gt;]]&gt;&lt;/description&gt;
    &lt;url&gt;&lt;$MTBlogURL$&gt;&lt;/url&gt;
    &lt;archiveurl&gt;&lt;$MTBlogArchiveURL$&gt;&lt;/archiveurl&gt;
    &lt;relativeurl&gt;&lt;$MTBlogRelativeURL$&gt;&lt;/relativeurl&gt;
    &lt;sitepath&gt;&lt;$MTBlogSitePath$&gt;&lt;/sitepath&gt;
    &lt;host&gt;&lt;$MTBlogHost$&gt;&lt;/host&gt;
    &lt;timezone&gt;&lt;$MTBlogTimezone$&gt;&lt;/timezone&gt;
    &lt;entrycount&gt;&lt;$MTBlogEntryCount$&gt;&lt;/entrycount&gt;
    &lt;commentcount&gt;&lt;$MTBlogCommentCount$&gt;&lt;/commentcount&gt;
    &lt;cclicenseurl&gt;&lt;$MTBlogCCLicenseURL$&gt;&lt;/cclicenseurl&gt;
      &lt;/blog&gt;
    &lt;/MTBlogs&gt;
  &lt;/blogs&gt;
  &lt;entries&gt;
    &lt;MTEntries lastn="1000"&gt;
      &lt;entry&gt;
    &lt;id&gt;&lt;$MTEntryID$&gt;&lt;/id&gt;
    &lt;blogid&gt;&lt;$MTBlogID$&gt;&lt;/blogid&gt;
    &lt;title&gt;&lt;$MTEntryTitle$&gt;&lt;/title&gt;
    &lt;status&gt;&lt;$MTEntryStatus$&gt;&lt;/status&gt;
    &lt;excerpt&gt;&lt;![CDATA[&lt;$MTEntryExcerpt$&gt;]]&gt;&lt;/excerpt&gt;
    &lt;body&gt;&lt;![CDATA[&lt;$MTEntryBody$&gt;]]&gt;&lt;/body&gt;
    &lt;more&gt;&lt;![CDATA[&lt;$MTEntryMore$&gt;]]&gt;&lt;/more&gt;
    &lt;link&gt;&lt;$MTEntryLink$&gt;&lt;/link&gt;
    &lt;permalink&gt;&lt;$MTEntryPermaLink$&gt;&lt;/permalink&gt;
    &lt;keywords&gt;&lt;$MTEntryKeywords$&gt;&lt;/keywords&gt;
    &lt;author&gt;&lt;$MTEntryAuthor$&gt;&lt;/author&gt;
    &lt;authornickname&gt;&lt;$MTEntryAutherNickname$&gt;&lt;/authornickname&gt;
    &lt;authoremail&gt;&lt;$MTEntryAutherEmail$&gt;&lt;/authoremail&gt;
    &lt;authorurl&gt;&lt;$MTEntryAuthorURL$&gt;&lt;/authorurl&gt;
    &lt;authorlink&gt;&lt;$MTEntryAuthorLink$&gt;&lt;/authorlink&gt;
    &lt;date&gt;&lt;$MTEntryDate$&gt;&lt;/date&gt;
    &lt;modifieddate&gt;&lt;$MTEntryModifiedDate$&gt;&lt;/modifieddate&gt;
    &lt;commentcount&gt;&lt;$MTEntryCommentCount$&gt;&lt;/commentcount&gt;
    &lt;trackbackcount&gt;&lt;$MTEntryTrackbackCount$&gt;&lt;/trackbackcount&gt;
    &lt;trackbackdata&gt;&lt;$MTEntryTrackbackData$&gt;&lt;/trackbackdata&gt;
    &lt;trackbacklink&gt;&lt;$MTEntryTrackbackLink$&gt;&lt;/trackbacklink&gt;
    &lt;trackbackid&gt;&lt;$MTEntryTrackbackID$&gt;&lt;/trackbackid&gt;
    &lt;category&gt;&lt;![CDATA[&lt;$MTEntryCategory$&gt;]]&gt;&lt;/category&gt;
    &lt;categories&gt;
      &lt;MTEntryCategories&gt;
        &lt;category&gt;
          &lt;id&gt;&lt;$MTCategoryID$&gt;&lt;/id&gt;
        &lt;/category&gt;
      &lt;/MTEntryCategories&gt;
    &lt;/categories&gt;
      &lt;/entry&gt;
    &lt;/MTEntries&gt;
  &lt;/entries&gt;
  &lt;comments&gt;
    &lt;MTComments lastn="1000"&gt;
      &lt;comment&gt;
    &lt;id&gt;&lt;$MTCommentID$&gt;&lt;/id&gt;
    &lt;entryid&gt;&lt;$MTCommentEntryID$&gt;&lt;/entryid&gt;
    &lt;ip&gt;&lt;$MTCommentIP$&gt;&lt;/ip&gt;
    &lt;author&gt;&lt;![CDATA[&lt;$MTCommentAuthor$&gt;]]&gt;&lt;/author&gt;
    &lt;authorlink&gt;&lt;![CDATA[&lt;$MTCommentAuthorLink$&gt;]]&gt;&lt;/authorlink&gt;
    &lt;email&gt;&lt;$MTCommentEmail$&gt;&lt;/email&gt;
    &lt;url&gt;&lt;$MTCommentURL$&gt;&lt;/url&gt;
    &lt;body&gt;&lt;![CDATA[&lt;$MTCommentBody$&gt;]]&gt;&lt;/body&gt;
    &lt;date&gt;&lt;$MTCommentDate$&gt;&lt;/date&gt;
    &lt;ordernumber&gt;&lt;$MTCommentOrderNumber$&gt;&lt;/ordernumber&gt;
      &lt;/comment&gt;
    &lt;/MTComments&gt;
  &lt;/comments&gt;
  &lt;categories&gt;
    &lt;MTCategories&gt;
      &lt;category&gt;
    &lt;id&gt;&lt;$MTCategoryID$&gt;&lt;/id&gt;
    &lt;label&gt;&lt;![CDATA[&lt;$MTCategoryLabel$&gt;]]&gt;&lt;/label&gt;
    &lt;archivelink&gt;&lt;$MTCategoryArchiveLink$&gt;&lt;/archivelink&gt;
    &lt;description&gt;&lt;![CDATA[&lt;$MTCategoryDescription$&gt;]]&gt;&lt;/description&gt;
    &lt;count&gt;&lt;$MTCategoryCount$&gt;&lt;/count&gt;
    &lt;trackbacklink&gt;&lt;$MTCategoryTrackbackLink$&gt;&lt;/trackbacklink&gt;
      &lt;/category&gt;
    &lt;/MTCategories&gt;
  &lt;/categories&gt;
&lt;/movabletype&gt;
&lt;/pre&gt;



&lt;br /&gt;
Post to &lt;a href="http://del.icio.us/post?url=http://hackermojo.com/mt-static/archives/2006/02/leaving-mt.html&amp;title=Leaving%20MT"&gt;Del.icio.us&lt;/a&gt;
</description><pubDate>Mon, 27 Feb 2006 00:19:58 -0000</pubDate><guid>http://hackermojo.com/mt-static/archives/2006/02/leaving-mt.html</guid></item></channel></rss>