<?xml version="1.0" encoding="UTF-8"?>
<!-- generator="wordpress/2.1" -->
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	>

<channel>
	<title>(a Weblog by Jason Diamond)</title>
	<link>http://jason.diamond.name/weblog</link>
	<description></description>
	<pubDate>Thu, 24 Apr 2008 17:40:38 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.1</generator>
	<language>en</language>
			<item>
		<title>pypwsafe 0.0.2 (with setup.py)</title>
		<link>http://jason.diamond.name/weblog/2005/10/05/pypwsafe-0-0-2-with-setup-dot-py</link>
		<comments>http://jason.diamond.name/weblog/2005/10/05/pypwsafe-0-0-2-with-setup-dot-py#comments</comments>
		<pubDate>Wed, 05 Oct 2005 20:28:35 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/?p=42</guid>
		<description><![CDATA[Due to overwhelming (two people) demand, I&#8217;ve made another release of pypwsafe. This version includes a Distutils-powered setup.py script.
I also registered the release with PyPI (the Python Cheese Shop):
pypwsafe 0.0.2
This was my first setup.py script so please let me know if I screwed anything up.
]]></description>
			<content:encoded><![CDATA[<p>Due to overwhelming (two people) demand, I&#8217;ve made another release of pypwsafe. This version includes a <a href="http://www.python.org/sigs/distutils-sig/">Distutils</a>-powered setup.py script.</p>
<p>I also registered the release with <a href="http://www.python.org/pypi">PyPI</a> (the Python Cheese Shop):</p>
<p><a href="http://www.python.org/pypi/pypwsafe/0.0.2">pypwsafe 0.0.2</a></p>
<p>This was my first setup.py script so please let me know if I screwed anything up.</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/10/05/pypwsafe-0-0-2-with-setup-dot-py/feed/</wfw:commentRss>
		</item>
		<item>
		<title>pypwsafe, Release 1</title>
		<link>http://jason.diamond.name/weblog/2005/10/04/pypwsafe-release-1</link>
		<comments>http://jason.diamond.name/weblog/2005/10/04/pypwsafe-release-1#comments</comments>
		<pubDate>Tue, 04 Oct 2005 17:50:57 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/?p=41</guid>
		<description><![CDATA[I just realized (thanks to a ping from Scott) that I never released the Python code I wrote a while back that can read Password Safe files. I use this code practically every day but there&#8217;s no reason why I can&#8217;t let others join in on the fun.
This first release contains a library, the pure [...]]]></description>
			<content:encoded><![CDATA[<p>I just realized (thanks to a ping from <a href="http://scottkirkwood.blogspot.com/">Scott</a>) that I never released <a href="http://jason.diamond.name/weblog/2005/04/07/cracking-my-password-safe">the Python code I wrote a while back</a> that can read <a href="http://passwordsafe.sourceforge.net/">Password Safe</a> files. I use this code practically every day but there&#8217;s no reason why I can&#8217;t let others join in on the fun.</p>
<p>This <a href="http://jason.diamond.name/downloads/pypwsafe-1.zip">first release</a> contains a library, the pure Python implementations of Blowfish and SHA-1 which my library uses, and a console script that lets you interactively search through you Password Safe files. That&#8217;s everything you need to read your files on Linux, Macintosh, and even Windows machines (as long as you have Python installed, of course).</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/10/04/pypwsafe-release-1/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Lexical Analysis, Python-style</title>
		<link>http://jason.diamond.name/weblog/2005/04/26/lexical-analysis-python-style</link>
		<comments>http://jason.diamond.name/weblog/2005/04/26/lexical-analysis-python-style#comments</comments>
		<pubDate>Wed, 27 Apr 2005 03:37:04 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/26/lexical-analysis-python-style</guid>
		<description><![CDATA[Like all good hackers, I own a copy of the Dragon Book. While I often find myself wishing I was able to understand the latter half, I&#8217;ve gotten some pretty good mileage out of what I&#8217;ve been able to extract from its earlier chapters. Maybe too much.
When I need to do any sort of lexical [...]]]></description>
			<content:encoded><![CDATA[<p>Like all good hackers, I own a copy of the <a href="http://www.catb.org/~esr/jargon/html/D/Dragon-Book.html">Dragon Book</a>. While I often find myself wishing I was able to understand the latter half, I&#8217;ve gotten some pretty good mileage out of what I&#8217;ve been able to extract from its earlier chapters. Maybe too much.</p>
<p>When I need to do any sort of lexical analyisis (the process by which a stream of characters is scanned and converted into &#8220;tokens&#8221;), I do it the way Aho, Sethi, and Ullman taught me: one character at a time. This is usually the only way to do it in low-level languages like C but I started doing this again yesterday in Python and decided I had to figure out a better way.</p>
<p>Since tokens are usually specified using regular expressions, I thought I could somehow use Python&#8217;s <code>re</code> module to do most of the heavy lifting for me. The solution I came up with involves creating one regular expression that can match all of my tokens. I can then use that expression to match my way through the text I&#8217;m parsing one token at a time.</p>
<p>Consider implementing a scanner for a language that evaluates simple mathematical expressions. It&#8217;ll define tokens for numbers, operators, variables (prefixed with dollar signs), and the left and right parenthesis characters (for grouping). In order to help the scanner skip over whitespace, it&#8217;ll need a pattern for that as well:</p>
<pre><code>import re

class Scanner:

    scannerRE = re.compile(r'''
       (?P&lt;SPACE>    s+            ) |
       (?P&lt;LEFT>     (             ) |
       (?P&lt;RIGHT>    )             ) |
       (?P&lt;NUMBER>   d+            ) |
       (?P&lt;VAR>      $[_a-zA-Z]w* ) |
       (?P&lt;OPERATOR> [-+*/]         )
    ''', re.VERBOSE)

    def __init__(self, source):
        self.source = source
        self.pos = 0
        self.len = len(source)

    def scan(self):
        while True:
            if self.pos >= self.len:
                return None
            m = self.scannerRE.match(self.source, self.pos)
            if m is None:
                raise Exception, 'invalid token'
            self.pos = m.end()
            token_type = m.lastgroup
            if token_type != 'SPACE':
                token = m.group(token_type)
                if token_type == 'NUMBER':
                    token = int(token)
                elif token_type == 'VAR':
                    token = token[1:]
                return token_type, token</code></pre>
<p>This <code>scan</code> method will return a tuple containing the next token type and value each time it&#8217;s called (or <code>None</code> if it&#8217;s reached the end of the source string). The token type is represented with strings like <code>'NUMBER'</code> and <code>'OPERATOR'</code>. The value can be the actual token as found in the source or something more specific like an <code>int</code> (when the token type is <code>'NUMBER'</code>). Tokens that consist of nothing but whitespace are &#8220;skipped&#8221; by the method so a parser using this scanner will never have to check for those.</p>
<p>It looks like this class would be a perfect candidate for a generator function. (Note to self: start using those.)</p>
<p>The trick here is to pass the current position into the <code>match</code> method. After each successful match, the <code>scan</code> method updates the current position by asking the match object for the position containing the character which terminated the match. This is how it advances through the source string one token at a time.</p>
<p>Since I gave names to the groups in my regular expression that correspond to the types of tokens I&#8217;m trying to match, I can ask the match object for the current token type by checking the <code>lastgroup</code> attribute. This works because only one group from the expression can match at a time. Not matching any of the groups would indicate an error condition.</p>
<p>As I was working on my scanner, I noticed that I could add new tokens by simply adding a new group to the regular expression. The only reason I&#8217;d need to add new code to the class would be if I needed to do some extra processing on the token before returning it (such as converting it into an <code>int</code> or stripping off the dollar sign prefix for variable names). Nice.</p>
<p>After figuring out how to do this, I Googled around for a bit to see if I could find anybody else that had done something similar to see how I could improve my scanner even more. I found an <a href="http://effbot.org/zone/xml-scanner.htm">article</a> by <a href="http://effbot.org/">Fredrik Lundh</a> documenting exactly this technique. The only difference between his approach and mine is that he&#8217;s using <code>lastindex</code> instead of <code>lastgroup</code> which means his code is probably slightly faster. He also used the (still) undocumented <code>scanner</code> method all regular expression objects apparently have. This method returns an object that will track your position as you scan through the source string so that you don&#8217;t have to track it yourself (like I did above). I wonder why it&#8217;s not documented and whether we can expect it to stick around or not.</p>
<p>I also came across a list of <a href="http://www.nedbatchelder.com/text/python-parsers.html">Python Parsing Tools</a> compiled by <a href="http://www.nedbatchelder.com/">Ned Batchelder</a>. I knew about some of these tools but I keep hoping that I&#8217;ll finally be able to get through to the end of the Dragon Book if I keep practicing what they&#8217;re teaching by writing the code myself instead of relying on a tool to hide all the magic from me. I&#8217;ve still got a long way to go but at least I&#8217;m having fun while trying to get there.</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/26/lexical-analysis-python-style/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Base 100</title>
		<link>http://jason.diamond.name/weblog/2005/04/21/base-100</link>
		<comments>http://jason.diamond.name/weblog/2005/04/21/base-100#comments</comments>
		<pubDate>Fri, 22 Apr 2005 05:04:17 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category><![CDATA[Math]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/21/base-100</guid>
		<description><![CDATA[This Python Cookbook recipe, Generate a human readable &#8216;random&#8217; password (nicepass.py) , got me thinking.
I don&#8217;t intend on using it&#8211;I generate my passwords/passphrases by following the instructions given on The Diceware Passphrase Home Page using real dice. Still, I was intrigued by the idea. The implementation was simple but it worked.
Later, I stumbled across a [...]]]></description>
			<content:encoded><![CDATA[<p>This <a href="http://aspn.activestate.com/ASPN/Cookbook/Python">Python Cookbook</a> recipe, <a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/410076">Generate a human readable &#8216;random&#8217; password (nicepass.py) </a>, got me thinking.</p>
<p>I don&#8217;t intend on using it&#8211;I generate my passwords/passphrases by following the instructions given on <a href="http://www.diceware.com/">The Diceware Passphrase Home Page</a> using <em>real</em> dice. Still, I was intrigued by the idea. The implementation was simple but it worked.</p>
<p>Later, I stumbled across a reference to the <a href="http://www.ludism.org/mentat/MajorSystem">Major System</a> on the <a href="http://www.ludism.org/mentat/">Mentat Wiki</a>. The Major System encodes numbers as pronounceable sounds. A clever human could then turn those sounds into a word or phrase in the hopes that said word or phrase would be easier to remember than the number. I didn&#8217;t think this could be something that could be easily automated due to its fuzzy nature but it reminded me of the algorithm that generates pronounceable passwords.</p>
<p>After playing around in the Python interpreter for a bit, I came up with what I&#8217;m half-jokingly calling the base 100 numeral system. This is a numeral system like <a href="http://en.wikipedia.org/wiki/Binary_numeral_system">binary</a>, <a href="http://en.wikipedia.org/wiki/Octal">octal</a>, <a href="http://en.wikipedia.org/wiki/Decimal">decimal</a>, and <a href="http://en.wikipedia.org/wiki/Hexadecimal">hexadecimal</a> numeral systems and not an encoding like the <a href="http://en.wikipedia.org/wiki/Base64">base64</a> encoding we use to email attachements to each other.</p>
<p>I&#8217;m calling it base 100 since there are 100 &#8220;digits&#8221; in this numeral system. To be really cool, I should probably come up with a another name. The base 8 numeral system is also known as &#8220;octal&#8221;. Base 10 is widely known as &#8220;decimal&#8221;. How about &#8220;centimal&#8221; for base 100?</p>
<p>It would have probably been impossible to come up with 100 unique characters and still be pronounceable so I cheated. The so-called digits in base 100 aren&#8217;t always single characters like they are in most other numeral systems. In fact, 90% of the digits are made up of consonant/vowel pairs much like the pairs the nicepass.py script generates.</p>
<p>Here&#8217;s the Python code I use to generate the list of base 100 digits:</p>
<pre><code>digits = []

for d in '0123456789':
    digits.append(d)

for c in 'bdfghjklmnprstvwyz':
    for v in 'aeiou':
        digits.append(c + v)</code></pre>
<p>The consonants missing from the list I use above are &#8220;c&#8221;, &#8220;q&#8221;, and &#8220;x&#8221;. I figured that &#8220;c&#8221; would probably be pronounced like &#8220;k&#8221; or &#8220;s&#8221; and &#8220;x&#8221; like &#8220;z&#8221; so I removed them to avoid aural ambiguities. I had no idea what a &#8220;q&#8221; would sound like if it was followed by a single vowel so it was stripped, too. This is how I ended up with exactly 100 digits.</p>
<p>The code to convert numbers into strings of these digits looks like this:</p>
<pre><code>def encode(n):
    s = ''
    while n &gt;= 100:
        n, r = divmod(n, 100)
        s = digits[r] + s
    return digits[n] + s</code></pre>
<p>Here&#8217;s some random numbers in decimal, hexadecimal, and base 100:</p>
<table>
<tr>
<th>base 10</th>
<th>base 16</th>
<th>base 100</th>
</tr>
<tr>
<td>2177096001</td>
<td>0&#215;81C3D941</td>
<td>feti9pa1</td>
</tr>
<tr>
<td>2506322448</td>
<td>0&#215;95637210</td>
<td>ga6hifulo</td>
</tr>
<tr>
<td>650674670</td>
<td>0&#215;26C881EE</td>
<td>6marilesa</td>
</tr>
<tr>
<td>181448842</td>
<td>0&#215;0AD0B08A</td>
<td>1vekuwoki</td>
</tr>
</table>
<p>Wow, those numbers actually are &#8220;pronounceable&#8221;. In a weird, techno-Japanese-ish sort of way. But since the standard decimal digits are included in base 100, it&#8217;s still possible to get strings that contain nothing but numbers which would <em>not</em> be so easily pronounceable.</p>
<p>One thing that really fascinated me was this sequence of numbers:</p>
<table>
<tr>
<th>base 10</th>
<th>base 100</th>
</tr>
<tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td>be</td>
</tr>
<tr>
<td>111</td>
<td>1be</td>
</tr>
<tr>
<td>1111</td>
<td>bebe</td>
</tr>
<tr>
<td>11111</td>
<td>1bebe</td>
</tr>
<tr>
<td>111111</td>
<td>bebebe</td>
</tr>
<tr>
<td>1111111</td>
<td>1bebebe</td>
</tr>
<tr>
<td>11111111</td>
<td>bebebebe</td>
</tr>
</table>
<p>See how the most signifigant digit in the base 100 numbers are alternating between &#8220;1&#8243; and &#8220;be&#8221;? It took me a while to figure out why that was happening.</p>
<p>These conversions are also pretty interesting:</p>
<table>
<tr>
<th>base 10</th>
<th>base 100</th>
</tr>
<tr>
<td>101</td>
<td>11</td>
</tr>
<tr>
<td>202</td>
<td>22</td>
</tr>
<tr>
<td>303</td>
<td>33</td>
</tr>
<tr>
<td>1020304</td>
<td>1234</td>
</tr>
<tr>
<td>5060708</td>
<td>5678</td>
</tr>
</table>
<p>The zeroes just magically disappear!</p>
<p>I was trying out all sorts of conversions and looking for more patterns for almost an hour before I realized I was being the world&#8217;s biggest nerd.</p>
<p>Here&#8217;s a function to convert a base 100 back into a Python integer:</p>
<pre><code>def decode(s):
    n = 0
    i = 0
    l = len(s)
    while i &lt; l:
        d = s[i]
        if d.isdigit():
            n = n * 100 + int(d)
        else:
            i += 1
            d += s[i]
            n = n * 100 + digits.index(d)
        i += 1
    return n</code></pre>
<p>That function&#8217;s not as pretty but that&#8217;s what I get for using digits of varying lengths.</p>
<p>So what good are these things? I hope somebody can tell me because I&#8217;m dying to put them to use!</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/21/base-100/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Unit Testing</title>
		<link>http://jason.diamond.name/weblog/2005/04/17/unit-testing</link>
		<comments>http://jason.diamond.name/weblog/2005/04/17/unit-testing#comments</comments>
		<pubDate>Sun, 17 Apr 2005 22:31:15 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category><![CDATA[Programming]]></category>

		<category><![CDATA[TDD]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/17/unit-testing-speeds-you-up</guid>
		<description><![CDATA[Kent S Johnson recently asked his co-workers, &#8220;Will unit testing slow you down?&#8221; Reading his post, it&#8217;s obvious that he doesn&#8217;t think so and I couldn&#8217;t agree more.
The problem with unit tests is usually perceptual. Kent&#8217;s co-workers don&#8217;t write them because they think that the benefits they&#8217;d get from writing unit tests aren&#8217;t worth the [...]]]></description>
			<content:encoded><![CDATA[<p><a href="http://www.kentsjohnson.com/">Kent S Johnson</a> recently asked his co-workers, &#8220;<a href="http://www.pycs.net/users/0000323/weblog/2005/04/17.html#P71">Will unit testing slow you down?</a>&#8221; Reading his post, it&#8217;s obvious that he doesn&#8217;t think so and I couldn&#8217;t agree more.</p>
<p>The problem with unit tests is usually perceptual. Kent&#8217;s co-workers don&#8217;t write them because they think that the benefits they&#8217;d get from writing unit tests aren&#8217;t worth the time it would take to write them. If you think unit tests are only about testing (and it&#8217;s hard not to think this based on the name) then this is an understandable assumption.</p>
<p>Writing unit tests or, more specifically, practicing test-driven development is <em>not</em> about testing, however. We need to focus on the other noun in that phrase in order to realize what the real benefit is: development. This is, in fact, the opening premise to my ONLamp.com article, <a href="http://www.onlamp.com/pub/a/python/2004/12/02/tdd_pyunit.html">Test-Driven Development in Python</a>.</p>
<p>The short-term benefits to unit tests, as Kent describes them, are great. The more important benefits, the effect writing your unit tests <em>before</em> writing your code has on the quality of your code, are much harder to quantify. But these are the benefits that make practicing test-driven development <em>essential</em>.</p>
<p>It&#8217;s hard to convince others of this&#8211;they usually have to experience it for themselves in order to truly understand it. I realize how touchy-feely that sounds but I really believe it to be true. All I can say is: try it. Please.</p>
<p>Don&#8217;t get me wrong, practicing test-driven development is <em>hard</em>&#8211;it takes an incredible amount of discipline. I&#8217;m a true believer and yet even I continue to succumb to temptation and write code without failing tests. That&#8217;s one of the many reasons I love the <a href="http://www.extremeprogramming.org/">eXtreme Programming</a> practice of <a href="http://www.extremeprogramming.org/rules/pair.html">paired programming</a>. Without a partner chastising me for breaking the rules, I will, without fail, revert to my bad habits, churning out poorly designed and defect-ridden code.</p>
<p>I think that being able to admit this, in public no less, is part of what makes me a good developer. Yes, I take pride in my humility. <img src='http://jason.diamond.name/weblog/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /> </p>
<p>As good as I&#8217;d like to think I am, I just can&#8217;t delude myself into thinking I&#8217;m God&#8217;s gift to programming and can whip out the solution to any problem in a single hackfest. I need my unit tests. I need to talk the designs through with my fellow developers. I need them to point out my mistakes! No, I&#8217;m not a super programmer. But compare the code I wrote the &#8220;slow&#8221; way to the code the office cowboy spat out last night. See the difference?</p>
<p>Which kind of code do you want to write?</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/17/unit-testing/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Indenting Python</title>
		<link>http://jason.diamond.name/weblog/2005/04/17/indenting-python</link>
		<comments>http://jason.diamond.name/weblog/2005/04/17/indenting-python#comments</comments>
		<pubDate>Sun, 17 Apr 2005 07:40:34 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/16/wxpython-code-layout</guid>
		<description><![CDATA[I usually love how Python uses whitespace to indicate program structure but there are times when its strictness prevents me from being able to represent other kinds of structure in code.
When using a sequential list of statements to build a hierarchical data structure, I tend to indent my code in order to make that structure [...]]]></description>
			<content:encoded><![CDATA[<p>I usually love how Python uses whitespace to indicate program structure but there are times when its strictness prevents me from being able to represent other kinds of structure in code.</p>
<p>When using a sequential list of statements to build a hierarchical data structure, I tend to indent my code in order to make that structure self-evident. For example, let&#8217;s say I&#8217;m using an API that emits XML. Using that API might look like this (in pseudocode):</p>
<pre><code>write start tag for document element
write start tag for first child element
write text content for first child element
write end tag for first child element
write start tag for second child element
write text content for second child element
write end tag for second child element
write end tag for document element</code></pre>
<p>It&#8217;s hard to see the structure there. In languages like C++ or C#, the compiler doesn&#8217;t care how much I indent each statement so I can do stuff like this:</p>
<pre><code>write start tag for document element
    write start tag for first child element
        write text content for first child element
    write end tag for first child element
    write start tag for second child element
        write text content for second child element
    write end tag for second child element
write end tag for document element</code></pre>
<p>Ah, much nicer. The compiler&#8217;s happy and so am I since I can actually make sense of what the code is doing without having to read every line.</p>
<p>Python won&#8217;t let you do this. Fortunately, I don&#8217;t often find myself emitting XML documents like this in code. There is one well-known API, however, that forces everyone who uses it to construct hierchical data structures using a linear sequence of statements. That API is <a href="http://www.wxpython.org/">wxPython</a>.</p>
<p>Think about what happens when you &#8220;define&#8221; a form. You usually end up writing code that adds widgets as children to widgets which are children of widgets ad nauseum. This kind of code just screams hierarchy but the Python parser won&#8217;t let me change the indentation level of my code to represent that!</p>
<p>Take, for example, a simple login form:</p>
<pre>+------------------------------+
|            ________________  |
| Username: |________________| |
|            ________________  |
| Password: |________________| |
|                              |
|         ________   ________  |
|        |___OK___| |_Cancel_| |
+------------------------------+</pre>
<p>(Wow. Check out the cool ASCII art!)</p>
<p>In wxPython, that&#8217;d be a frame or dialog containing two <code>wx.Panel</code> widgets laid out with a vertical <code>wx.BoxSizer</code>. The top panel would have two <code>wx.StaticText</code> widgets and two <code>wx.TextCtrl</code> widgets as children. I&#8217;d use a <code>wx.FlexGridSizer</code> in the top panel to get everything to line up nicely. The bottom panel would contain a spacer, followed by two <code>wx.Button</code> widgets using a horizontal <code>wx.BoxSizer</code> to lay them out.</p>
<p>The code to display that type of form might look something like this:</p>
<p><code>
<pre>import wx

class MyFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, title='Example')

        frameSizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(frameSizer)

        topPanel = wx.Panel(self)
        frameSizer.Add(topPanel, 1, wx.EXPAND)
        topSizer = wx.FlexGridSizer(2)
        topSizer.AddGrowableCol(1)
        topPanel.SetSizer(topSizer)

        usernameStaticText = wx.StaticText(topPanel, label='Username: ')
        topSizer.Add(usernameStaticText)

        usernameTextCtrl = wx.TextCtrl(topPanel)
        topSizer.Add(usernameTextCtrl, 1, wx.EXPAND)

        passwordStaticText = wx.StaticText(topPanel, label='Password: ')
        topSizer.Add(passwordStaticText)

        passwordTextCtrl = wx.TextCtrl(topPanel)
        topSizer.Add(passwordTextCtrl, 1, wx.EXPAND)

        bottomPanel = wx.Panel(self)
        frameSizer.Add(bottomPanel, 1, wx.EXPAND)
        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        bottomPanel.SetSizer(bottomSizer)

        bottomSizer.Add((0, 0), 1)

        okButton = wx.Button(bottomPanel, label='OK')
        bottomSizer.Add(okButton, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT)

        cancelButton = wx.Button(bottomPanel, label='Cancel')
        bottomSizer.Add(cancelButton, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT)

app = wx.PySimpleApp()
frame = MyFrame()
frame.Show()
frame.CenterOnScreen()
app.MainLoop()</pre>
<p></code></p>
<p>By glancing at the code, can you &#8220;see&#8221; the structure we&#8217;re trying to define here? I can&#8217;t. And I wrote it!</p>
<p>This kind of code only gets worse as the complexity of the form increases making it necessary to litter the source with comments and require the poor guy working on the code to read it from top to bottom in order to figure out what&#8217;s going on.</p>
<p>So I came up with a what I can only describe as an incredibly ugly but potentially useful hack.</p>
<p>Compare the above to this:</p>
<pre><code>import wx

class MyFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, title='Example')

        frameSizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(frameSizer)

        topPanel = wx.Panel(self)
        frameSizer.Add(topPanel, 1, wx.EXPAND)
        topSizer = wx.FlexGridSizer(2)
        topSizer.AddGrowableCol(1)
        topPanel.SetSizer(topSizer)

        if 1:
            usernameStaticText = wx.StaticText(topPanel, label='Username: ')
            topSizer.Add(usernameStaticText)

            usernameTextCtrl = wx.TextCtrl(topPanel)
            topSizer.Add(usernameTextCtrl, 1, wx.EXPAND)

            passwordStaticText = wx.StaticText(topPanel, label='Password: ')
            topSizer.Add(passwordStaticText)

            passwordTextCtrl = wx.TextCtrl(topPanel)
            topSizer.Add(passwordTextCtrl, 1, wx.EXPAND)

        bottomPanel = wx.Panel(self)
        frameSizer.Add(bottomPanel, 1, wx.EXPAND)
        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        bottomPanel.SetSizer(bottomSizer)

        if 1:
            bottomSizer.Add((0, 0), 1)

            okButton = wx.Button(bottomPanel, label='OK')
            bottomSizer.Add(okButton, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT)

            cancelButton = wx.Button(bottomPanel, label='Cancel')
            bottomSizer.Add(cancelButton, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT)

app = wx.PySimpleApp()
frame = MyFrame()
frame.Show()
frame.CenterOnScreen()
app.MainLoop()</code></pre>
<p>Can you see the structure now? The chunks of code that define each panel and sets up their sizers is followed by an indented block of code defining all of their children. If those children contained grandchildren, we&#8217;d indent the grandchildren even further.</p>
<p>In order to alternate between chunks of code with different indentation levels, I had to use the <code>if 1:</code> hack. This will always evaluate to true so the body of the <code>if</code> statement will always be executed. It&#8217;s totally not necessary and is probably even slowing down execution of the program by some number of nanoseconds but it makes the structure of the form much more self-evident (to me). Imagine how much being able to &#8220;see&#8221; the structure would help with more complex (and more realistic) forms.</p>
<p>Has anybody else out there tried a similar technique? I&#8217;ve only just dreamt this up and have yet to see how well it scales on an actual project but I&#8217;m about to find out.</p>
<p>(I know, I know. I really should be using a tool like <a href="http://www.roebling.de/">wxDesigner</a> but I&#8217;d rather do something the hard way first so I can <em>really</em> learn it before relying on a tool to do it for me.)</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/17/indenting-python/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Mobile Python</title>
		<link>http://jason.diamond.name/weblog/2005/04/15/mobile-python</link>
		<comments>http://jason.diamond.name/weblog/2005/04/15/mobile-python#comments</comments>
		<pubDate>Fri, 15 Apr 2005 08:11:10 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/15/mobile-python</guid>
		<description><![CDATA[ONLamp.com just published an article about how to get Python on Your (S60) Phone. This is something I&#8217;ve been dying to get into.
A friend of mine works at Cingular. He&#8217;s going to see if he can get me one of these for a decent price. Interestingly, I spent most of last year working on a [...]]]></description>
			<content:encoded><![CDATA[<p>ONLamp.com just published an article about how to get <a href="http://www.onlamp.com/pub/a/python/2005/04/14/s60.html">Python on Your (S60) Phone</a>. This is something I&#8217;ve been dying to get into.</p>
<p>A friend of mine works at Cingular. He&#8217;s going to see if he can get me one of <a href="http://www.nokiausa.com/phones/7610">these</a> for a decent price. Interestingly, I spent most of last year working on a contract at Nokia here in San Diego but they&#8217;re all about CDMA at that site and my carrier (Cingular) is all about GSM.</p>
<p><a href="http://www.postneo.com/">Matt Croydon</a> has been working on some cool S60 applications. He&#8217;s also got a bunch of Python for S60-related links on his <a href="http://www.postneo.com/postwiki/moin.cgi/PythonForSeries60">wiki</a>.</p>
<p>The cool part about all of this is that you don&#8217;t have to own an S60 phone in order to get started writing applications for them. The Helsinki Institute for Information Technology (HIIT) has a <a href="http://pdis.hiit.fi/pdis/download/">Series 60 Compatibility Library</a> which emulates some of the S60 APIs on top of <a href="http://www.wxpython.org/">wxPython</a> making it possible to test and debug your applications on your desktop. Sweet.</p>
<p>So what will my first S60 application be? How about an S60 version of my <a href="http://jason.diamond.name/weblog/2005/04/08/24-the-math-game">24 solver</a>? On our recent trip to Yosemite, Jill and I were challenging each by playing 24 and <a href="http://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon">Six Degrees of Kevin Bacon</a>. Being able to confirm that a given set of four numbers are solvable for 24 with my phone would be awesome. Oh, yes. I&#8217;m a huge nerd.</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/15/mobile-python/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Don&#8217;t Quote Me On This</title>
		<link>http://jason.diamond.name/weblog/2005/04/14/dont-quote-me-on-this</link>
		<comments>http://jason.diamond.name/weblog/2005/04/14/dont-quote-me-on-this#comments</comments>
		<pubDate>Thu, 14 Apr 2005 17:36:40 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/14/dont-quote-me-on-this</guid>
		<description><![CDATA[Trying to use os.system in a Python script that I want to run on both Linux and Windows is driving me crazy.
I&#8217;m working on a script which needs to generate a text file, open up the file in a text editor, wait for the user to edit and save the file and then exit the [...]]]></description>
			<content:encoded><![CDATA[<p>Trying to use <code>os.system</code> in a Python script that I want to run on both Linux and Windows is driving me crazy.</p>
<p>I&#8217;m working on a script which needs to generate a text file, open up the file in a text editor, wait for the user to edit and save the file and then exit the editor, and then process the modified file. This is very much like what CVS and SVN do when you try to commit some changes without specifying a message on the command line. This shouldn&#8217;t be hard, should it?</p>
<p>The problem is, of course, Windows.</p>
<pre><code>>>> file('foo bar', 'wt').write('baz')
>>> import os
>>> os.system('notepad &quot;foo bar&quot;')
0</code></pre>
<p>The return value there is indicating that the command was executed successfully. I can attest to this because I saw Notepad open up on my machine.</p>
<p>My preferred text editor, however, is <a href="http://www.vim.org/">Vim</a> which I have installed in its default location.</p>
<pre><code>>>> os.system(r'&quot;C:Program FilesVimvim63gvim.exe&quot; &quot;foo bar&quot;')
'C:Program' is not recognized as an internal or external command,
operable program or batch file.
1</code></pre>
<p>Uh, did I not just quote the path to gvim.exe? Let&#8217;s try something simpler:</p>
<pre><code>>>> os.system('&quot;notepad&quot; &quot;foo bar&quot;')
'notepad&quot; &quot;foo' is not recognized as an internal or external command,
operable program or batch file.
1</code></pre>
<p>What gives?</p>
<p>After some Googling and digging through the C code that implements <code>system</code>, I discovered that Python is actually taking the argument to <code>system</code> and prefixing it with &#8220;cmd /c &#8220;. This means that it&#8217;s executing the command indirectly by spawning another shell. This is probably done to make commands like &#8220;copy&#8221; and &#8220;del&#8221; work. Unlike on Unix, these commands are not executable programs but can only be executed by the shell as special commands.</p>
<p>Knowing that, I did some more experimenting:</p>
<pre><code>C:Temp>cmd /c notepad &quot;foo bar&quot;

C:Temp>cmd /c &quot;C:Program FilesVimvim63gvim.exe&quot; &quot;foo bar&quot;
'C:Program' is not recognized as an internal or external command,
operable program or batch file.

C:Temp>cmd /c &quot;notepad&quot; &quot;foo bar&quot;
'notepad&quot; &quot;foo' is not recognized as an internal or external command,
operable program or batch file.</code></pre>
<p>Ah, ha. Same behavior as in Python.</p>
<p>Some more Googling and I find <a href="http://www.ss64.com/nt/cmd.html">this</a> where it says:</p>
<blockquote>
<p>If /C or /K is specified, then the remainder of the command line is  processed as an immediate command in the new shell. Multiple commands separated by the command separator &#8216;&#038;&#038;&#8217; are accepted if surrounded by quotes.</p>
<p>The following logic is used to process quote (&#8221;) characters:</p>
<ol>
<li>
<p>If all of the following conditions are met, then quote characters on the command line are preserved:</p>
<ul>
<li>no /S switch</li>
<li>exactly two quote characters</li>
<li>no special characters between the two quote characters, where special is one of: &#038;<>()@^|</li>
<li>there are one or more whitespace characters between the the two quote characters</li>
<li>the string between the two quote characters is the name of an executable file.</li>
</ul>
</li>
<li>
<p>Otherwise, old behavior is to see if the first character is a quote character and if so, strip the leading character and remove the last quote character on the command line, preserving any text after the last quote character.</p>
</li>
</ol>
</blockquote>
<p>My problem seems to be this &#8220;old behavior&#8221;. What if I just wrap the whole damn thing in another pair of quotes?</p>
<pre><code>C:Temp>cmd /c &quot;&quot;C:Program FilesVimvim63gvim.exe&quot; &quot;foo bar&quot;&quot;</code></pre>
<p>OK, it works here but does it work like this in Python?</p>
<pre><code>>>> os.system(r'&quot;&quot;C:Program FilesVimvim63gvim.exe&quot; &quot;foo bar&quot;&quot;')
0</code></pre>
<p>Yes!</p>
<p>So now I have to introduce a Windows-specific hack into my code in order to get it to work reliably there:</p>
<pre><code>command = '&quot;%s&quot; &quot;%s&quot;' % (getEditor(), tempPath)
if sys.platform[:3] == 'win':
    command = '&quot;%s&quot;' % command
os.system(command)</code></pre>
<p>So why didn&#8217;t I just use <code>os.spawnlp</code>? Because it&#8217;s not available on Windows&#8211;none of the versions of those functions that search the path are available there.</p>
<p>Ugh.</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/14/dont-quote-me-on-this/feed/</wfw:commentRss>
		</item>
		<item>
		<title>24, the Math Game</title>
		<link>http://jason.diamond.name/weblog/2005/04/08/24-the-math-game</link>
		<comments>http://jason.diamond.name/weblog/2005/04/08/24-the-math-game#comments</comments>
		<pubDate>Fri, 08 Apr 2005 16:27:12 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category><![CDATA[Math]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/07/24-the-math-game</guid>
		<description><![CDATA[My wife&#8217;s a huge math nerd so when I read about 24, the arithmetic game, I knew she&#8217;d get a kick out of it.
Basically, you pick four numbers and try to come up with an expression using those numbers and the four basic arithmetic operators (addition, subtraction, multiplication, and division) with a result of 24. [...]]]></description>
			<content:encoded><![CDATA[<p>My wife&#8217;s a huge math nerd so when I read about <a href="http://server.boardgamestuff.com:8000/gray/blog/2005/04/05#Twenty-Four">24, the arithmetic game</a>, I knew she&#8217;d get a kick out of it.</p>
<p>Basically, you pick four numbers and try to come up with an expression using those numbers and the four basic arithmetic operators (addition, subtraction, multiplication, and division) with a result of 24. Most of the time, you&#8217;ll be able to do it but for some small percentage of the time, you won&#8217;t ever get them to give you 24 no matter how hard you try.</p>
<p>For example, the numbers 1, 2, 3, and 4 can get you to 24 in a couple of different ways. <code>(1 + 2 + 3) * 4</code>. Or <code>1 * 2 * 3 * 4</code>. There might even be more solutions. The numbers 1, 1, 2, and 3, however, will never work.</p>
<p>I assume the <a href="http://www.24game.com/">dead-tree version of the game</a> doesn&#8217;t include any unsolvables on its cards. I can imagine really turning a kid <em>off</em> of math by making them rack their poor, little brains out when a solution doesn&#8217;t even exist.</p>
<p>So Matthew Gray says he wrote a program to tell him if a set of numbers is solvable or not. I&#8217;m not a huge math nerd but I can&#8217;t resist a challenge.</p>
<p>Here&#8217;s my solution:</p>
<pre><code>import sys

# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/190465
from xpermutations import *

if len(sys.argv) &lt; 5:
    print 'Usage: %s a b c d [result]' % sys.argv[0]

result = 24

if len(sys.argv) >= 6:
    result = int(sys.argv[5])

numbers = map(float, sys.argv[1:5])
number_permutations = list(xpermutations(numbers))

operations = ['+', '-', '*', '/']
operation_selections = list(xselections(operations, 3))

groupings = [
    '((%f %s %f) %s %f) %s %f',
    '(%f %s (%f %s %f)) %s %f',
    '(%f %s %f) %s (%f %s %f)',
    '%f %s ((%f %s %f) %s %f)',
    '%f %s (%f %s (%f %s %f))',
]

for nums in number_permutations:
    for ops in operation_selections:
        for grouping in groupings:
            expression = grouping % (
                    nums[0],
                    ops[0],
                    nums[1],
                    ops[1],
                    nums[2],
                    ops[2],
                    nums[3])
            try:
                 if eval(expression) == result:
                    print '%s == %d' % (
                            expression.replace('.000000', ''),
                            result)
                    sys.exit(1)
            except ZeroDivisionError:
                pass

print 'not solvable'</code></pre>
<p>Should I be embarrassed admitting that it took me over an hour to figure this out?</p>
<p>The hardest part (after finding the <a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/190465">code to do permutations and selections</a>) was figuring out all of the different possible groupings. I could only come up with five:</p>
<ul>
<li>((num op num) op num) op num</li>
<li>(num op (num op num)) op num</li>
<li>(num op num) op (num op num)</li>
<li>num op ((num op num) op num)</li>
<li>num op (num op (num op num))</li>
</ul>
<p>Did I miss any?</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/08/24-the-math-game/feed/</wfw:commentRss>
		</item>
		<item>
		<title>Twiddling Bits</title>
		<link>http://jason.diamond.name/weblog/2005/04/07/7</link>
		<comments>http://jason.diamond.name/weblog/2005/04/07/7#comments</comments>
		<pubDate>Thu, 07 Apr 2005 22:58:18 +0000</pubDate>
		<dc:creator>Jason Diamond</dc:creator>
		
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://jason.diamond.name/weblog/2005/04/07/7</guid>
		<description><![CDATA[Hanging out in #python is always enlightening.
I don&#8217;t normally twiddle bits from Python which is probably why I didn&#8217;t know about Python&#8217;s struct module until today.
Assume s contains 8 bytes representing two unsigned long integers in little-endian order. With the struct module, I can replace this code:
a = array.array('L', s)
a.byteswap()
b = socket.ntohl(a[0])
c = socket.ntohl(a[1])
with this:
b, [...]]]></description>
			<content:encoded><![CDATA[<p>Hanging out in <a href="http://www.python.org/community/irc.html">#python</a> is always enlightening.</p>
<p>I don&#8217;t normally twiddle bits from Python which is probably why I didn&#8217;t know about Python&#8217;s <a href="http://docs.python.org/lib/module-struct.html">struct module</a> until today.</p>
<p>Assume <code>s</code> contains 8 bytes representing two unsigned long integers in little-endian order. With the <code>struct</code> module, I can replace this code:</p>
<pre><code>a = array.array('L', s)
a.byteswap()
b = socket.ntohl(a[0])
c = socket.ntohl(a[1])</code></pre>
<p>with this:</p>
<pre><code>b, c = struct.unpack('&lt;LL', s)</code></pre>
<p>I thought it was weird having to <code>import socket in order to use </code><code>ntohl</code> (which was the only function I was aware of that knew how to convert from a standard representation to whatever&#8217;s appropriate for the host machine).</p>
<p>Why am I doing this? Because my PowerBook is a big-endian machine and all of the values in the <a href="http://jason.diamond.name/weblog/2005/04/07/cracking-my-password-safe">Password Safe</a> files are stored in little-endian order. And I can&#8217;t just blindly call <code>byteswap</code> and use the values as is because that wouldn&#8217;t work on my Linux and Windows machines which are little-endian.</p>
<p>That makes two new modules for me today. I&#8217;ve written a lot of Python code and yet I&#8217;m still finding new stuff in the standard library to play with.</p>
]]></content:encoded>
			<wfw:commentRss>http://jason.diamond.name/weblog/2005/04/07/7/feed/</wfw:commentRss>
		</item>
	</channel>
</rss>
