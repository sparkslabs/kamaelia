<?xml version="1.0" encoding="UTF-8"?>
<!-- generator="wordpress/2.0.2" -->
<rss version="2.0" 
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	>

<channel>
	<title>Mathieu Fenniak's Weblog</title>
	<link>http://mathieu.fenniak.net</link>
	<description>The Ordinary Life of Some Guy</description>
	<pubDate>Thu, 06 Sep 2007 04:28:39 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.0.2</generator>
	<language>en</language>
			<item>
		<title>Python 3.0a1 support in pyPdf and pg8000</title>
		<link>http://mathieu.fenniak.net/python-30a1-support-in-pypdf-and-pg8000/</link>
		<comments>http://mathieu.fenniak.net/python-30a1-support-in-pypdf-and-pg8000/#comments</comments>
		<pubDate>Thu, 06 Sep 2007 04:28:39 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
	<category>pdf</category>
	<category>postgresql</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/python-30a1-support-in-pypdf-and-pg8000/</guid>
		<description><![CDATA[pyPdf and pg8000 have been ported to run under Python 3.0a1, in new Mercurial repository branches.
pg8000 is a Pure-Python database driver for PostgreSQL, compatible with the standard DB API (although under Python 3.0, the Binary object expects a bytes argument).  pg8000 does not yet support every standard PostgreSQL data type, but it supports some [...]]]></description>
			<content:encoded><![CDATA[<p>pyPdf and pg8000 have been ported to run under Python 3.0a1, in new Mercurial repository branches.</p>
<p>pg8000 is a Pure-Python database driver for PostgreSQL, compatible with the standard DB API (although under Python 3.0, the Binary object expects a bytes argument).  pg8000 does not yet support every standard PostgreSQL data type, but it supports some of the most common data types.</p>
<ul>
<li>Website: <a href="http://pybrary.net/pg8000/">http://pybrary.net/pg8000/</a></li>
<li>Mercurial repository (Python 2.x): <a href="http://hg.pybrary.net/pg8000/">http://hg.pybrary.net/pg8000/</a></li>
<li>Mercurial repository (Python 3.0a1): <a href="http://hg.pybrary.net/pg8000-py3/">http://hg.pybrary.net/pg8000-py3/</a></li>
</ul>
<p>pyPdf is a Pure-Python PDF toolkit.  It is capable of reading and writing PDF files, and can be easily used for operations like splitting and merging PDF files.</p>
<ul>
<li>Website: <a href="http://pybrary.net/pyPdf/">http://pybrary.net/pyPdf/</a></li>
<li>Mercurial repository (Python 2.x): <a href="http://hg.pybrary.net/pyPdf/">http://hg.pybrary.net/pyPdf/</a></li>
<li>Mercurial repository (Python 3.0a1): <a href="http://hg.pybrary.net/pyPdf-py3/">http://hg.pybrary.net/pyPdf-py3/</a></li>
</ul>
<p>I am pretty happy with the upgrade to Python 3.0a1.  The 2to3 conversion utility provides a good start for some of the most mechanical of changes.  pyPdf and pg8000 used strings as byte buffers pretty extensively, especially pyPdf, and so the changes were pretty extensive.</p>
<p>Having a good test suite is essential to the upgrade process.  That was why I chose these two projects to start with, as I have a pretty good pg8000 test suite, and a very comprehensive pyPdf suite.  After running 2to3 on the source code, it was just a matter of beating the code into order until all the tests run.  It took about 4 hours per project, but many projects wouldn&#8217;t have as many changes as these projects have.</p>
<p>There are a couple of unexpected behaviours (in my opinion) regarding the new <tt>bytes</tt> type:</p>
<ul>
<li><tt>b&#8221;xref&#8221;[0] != b&#8221;x&#8221;</tt>.  Getting a single item out of a <tt>bytes</tt> type returns an integer, which fails to compare with a <tt>bytes</tt> instance of a length 1.</li>
<li><tt>b&#8221;x&#8221; == &#8220;x&#8221;</tt> throws an exception, rather than returning False.  This exception is useful for finding places where byte/string comparisons are being done by mistake, but I ran into one instance where I wanted to compare these objects and have it be false.  It was easy to code around.</li>
<li>You can&#8217;t derive a class from <tt>bytes</tt>.  I hope that this will be fixed in future releases, since pyPdf&#8217;s StringObject class derived from <tt>str</tt> previously.  (It can&#8217;t derive from <tt>str</tt> now, since the PDF files have no encoding information for strings [that I know of&#8230;])</li>
</ul>
<p>Good work on Python 3.0a1, developers!  I love the separation of strings and byte arrays, even though it took me a lot of work to fix up these couple of projects.  It&#8217;s the right way to do things.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/python-30a1-support-in-pypdf-and-pg8000/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>pg8000 v1.02</title>
		<link>http://mathieu.fenniak.net/pg8000_v102/</link>
		<comments>http://mathieu.fenniak.net/pg8000_v102/#comments</comments>
		<pubDate>Tue, 13 Mar 2007 20:34:46 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
	<category>postgresql</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/pg8000_v102/</guid>
		<description><![CDATA[A new version of pg8000, a Pure-Python interface for the PostgreSQL database, has been released today.  This version supports DB-API 2.0 as documented in PEP-249.  The request to add DB-API support to pg8000 was the biggest thing I heard about over the last pg8000 release.
Also new in version 1.02 is SSL support, datetime [...]]]></description>
			<content:encoded><![CDATA[<p>A new version of pg8000, a Pure-Python interface for the PostgreSQL database, has been released today.  This version supports DB-API 2.0 as documented in PEP-249.  The request to add DB-API support to pg8000 was the biggest thing I heard about over the last pg8000 release.</p>
<p>Also new in version 1.02 is SSL support, datetime parameter input, comprehensive unit tests, and bytea object support.</p>
<ul>
<li><a href="http://pybrary.net/pg8000/">pg8000 homepage</a></li>
<li><a href="http://pybrary.net/pg8000/pythondoc-pg8000.html">API documentation</a></li>
<li><a href="http://pybrary.net/trac/wiki/pg8000/DBAPI">Notes on DB-API support</a></li>
<li><a href="http://pybrary.net/trac/wiki/pg8000/AdvantagesDisadvantages">Advantages and Disadvantages of pg8000</a></li>
</ul>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/pg8000_v102/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>pg8000 v1.00 &#8212; a new PostgreSQL/Python interface</title>
		<link>http://mathieu.fenniak.net/pg8000_v100/</link>
		<comments>http://mathieu.fenniak.net/pg8000_v100/#comments</comments>
		<pubDate>Fri, 09 Mar 2007 16:24:03 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
	<category>postgresql</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/pg8000_v100/</guid>
		<description><![CDATA[pg8000 is a Pure-Python interface to the PostgreSQL database engine.  Yesterday, it was released to the public for the first time.
pg8000&#8217;s name comes from the belief that it is probably about the 8000th PostgreSQL interface for Python.  However, pg8000 is somewhat distinctive in that it is written entirely in Python and does not [...]]]></description>
			<content:encoded><![CDATA[<p><a href="http://pybrary.net/pg8000/">pg8000</a> is a Pure-Python interface to the PostgreSQL database engine.  Yesterday, it was released to the public for the first time.</p>
<p>pg8000&#8217;s name comes from the belief that it is probably about the 8000th PostgreSQL interface for Python.  However, pg8000 is somewhat distinctive in that it is written entirely in Python and does not rely on any external libraries (such as a compiled python module, or PostgreSQL&#8217;s libpq library).  As such, it is quite small and easy to deploy.  It is suitable for distribution where one might not have a compiled libpq available, and it is a great alternative to supplying one with your package.</p>
<p>Why use pg8000?</p>
<ul>
<li>No external dependencies other than Python&#8217;s standard library.</li>
<p></p>
<li>Pretty cool to hack on, since it is 100% Python with no C involved.</li>
<p></p>
<li>Being entirely written in Python means it should work with Jython, PyPy, or IronPython without too much difficulty.</li>
<p></p>
<li>libpq reads the entire result set into memory immediately following a query.  pg8000 uses cursors to read chunks of rows into memory, attempting to find a balance between speed and memory usage for large datasets.  You could accomplish this yourself using libpq by declaring cursors and then executing them to read rows, but this has two disadvantages:
<ul>
<li>You have to do it yourself.</li>
<li>You have to know when your query returns rows, because you can&#8217;t DECLARE CURSOR on an INSERT, UPDATE, DELETE, CREATE, ALTER, ect.</li>
</ul>
</li>
<p></p>
<li>pg8000 offers objects to represent prepared statements.  This makes them easy to use, which should increase their usage and improve your application&#8217;s performance.</li>
<p></p>
<li>It has some pretty nice <a href="http://pybrary.net/pg8000/pythondoc-pg8000.html">documentation</a>, I think.</li>
</ul>
<p>Now, that being said, reality kicks in.  Here&#8217;s why not to use pg8000:</p>
<ul>
<li>It&#8217;s pretty new.  This means there are likely bugs that haven&#8217;t been found yet.  It will mature over the next couple weeks with some community feedback and some internal testing.</li>
<p></p>
<li>It doesn&#8217;t support the DB-API interface.  I didn&#8217;t want to limit myself to DB-API, so I created just a slightly different interface that made more sense to me.  I intend to include a DB-API wrapper in the next release, v1.01.</li>
<p></p>
<li>It isn&#8217;t thread-safe.  When a sequence of messages needs to be sent to the PG backend, it often needs to occur in a given order.  The next release, v1.01, will address this by protecting critical areas of the code.</li>
<p></p>
<li>It doesn&#8217;t support every PostgreSQL type, or even the majority of them.  Notably lacking are: parameter send for float, datetime, decimal, interval; data receive for interval.  This will just be a matter of time as well, and hopefully some user patches to add more functions.  For the case of interval, I expect to optionally link in mxDateTime, but have a reasonable fallback if it is not available.</li>
<p></p>
<li>It doesn&#8217;t support UNIX sockets for connection to the PostgreSQL backend.  I just don&#8217;t quite know how to reliably find the socket location.  It seems that information is compiled into libpq.  Support could be added very easily if it was just assumed that the socket location was provided by the user.</li>
<p></p>
<li>It only supports authentication to the PG backend via trust, ident, or md5 hashed password.</li>
</ul>
<p>pg8000&#8217;s website is <a href="http://pybrary.net/pg8000/">http://pybrary.net/pg8000/</a>.  The source code is directly accessible through SVN at <a href="http://svn.pybrary.net/pg8000/">http://svn.pybrary.net/pg8000/</a>.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/pg8000_v100/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>pyPdf 1.8 - with PDF encryption!</title>
		<link>http://mathieu.fenniak.net/pypdf-18-with-pdf-encryption/</link>
		<comments>http://mathieu.fenniak.net/pypdf-18-with-pdf-encryption/#comments</comments>
		<pubDate>Fri, 15 Dec 2006 03:47:52 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
	<category>pdf</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/pypdf-18-with-pdf-encryption/</guid>
		<description><![CDATA[PyPdf version 1.8 has been released.  This new version features two major improvements over the last release.  The first is support for the PDF standard security handler, allowing the encryption and decryption of average PDF files.  The second major feature is documentation.
The security handler was a fun project to implement.  Sometimes, [...]]]></description>
			<content:encoded><![CDATA[<p><a href="http://pybrary.net/pyPdf/">PyPdf version 1.8</a> has been released.  This new version features two major improvements over the last release.  The first is support for the PDF standard security handler, allowing the encryption and decryption of average PDF files.  The second major feature is documentation.</p>
<p>The security handler was a fun project to implement.  Sometimes, reading encryption algorithms in a document can be a fairly mind-warping experience.  It&#8217;s not until you start to code the algorithm that you begin to understand the purpose, and how it all fits together.  To be honest, sometimes even after you code it, it doesn&#8217;t make much sense.</p>
<p>I&#8217;m no cryptography expert, but I do feel I have a pretty good basic grasp of the technology and concepts.  The PDF reference manual, section 3.5.2, contains a small number of algorithms that include processes like this:</p>
<blockquote><p>Do the following 50 times: Take the output from the previous MD5 hash and pass the first <i>n</i> bytes of the output as input into a new MD5 hash&#8230;</p></blockquote>
<p>Frankly, it doesn&#8217;t make much sense to me.  It seems like busy-work.  If the chosen hash function is believed to be secure, then rehashing the output 50 times is unnecessary.  If the hash function turns out to be insecure, you should replace it, rather than running it 50 times.  But I suppose it doesn&#8217;t matter much &#8212; pyPdf supports it now, whether it makes sense or not.</p>
<p>Documentation was another fun matter.  It took a surprising amount of searching to find <a href="http://effbot.org/zone/pythondoc.htm">pythondoc</a>, a documentation system.  All I wanted was something that allowed the documentation to be integrated with the code, and allow hyperlinks between documentation bits.  I recommend pythondoc if anyone has similar needs &#8212; it worked great to generate <a href="http://pybrary.net/pyPdf/pythondoc-pyPdf.pdf.html">pyPdf&#8217;s documentation</a>.</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/pypdf-18-with-pdf-encryption/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>Pybrary.Plot</title>
		<link>http://mathieu.fenniak.net/pybraryplot/</link>
		<comments>http://mathieu.fenniak.net/pybraryplot/#comments</comments>
		<pubDate>Mon, 27 Nov 2006 17:09:48 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/pybraryplot/</guid>
		<description><![CDATA[I just finished building a webpage for this software release, so I thought I&#8217;d mention it here.
Pybrary.Plot is a C# / .NET library designed for simple X/Y graphs and plots. It has the following capabilities:

multiple datasets with independent line and symbol styling,
numeric, date based, and time span based X axis options,
unlimited number of numeric Y [...]]]></description>
			<content:encoded><![CDATA[<p>I just finished building a webpage for this software release, so I thought I&#8217;d mention it here.</p>
<p><a href="http://pybrary.net/plot/">Pybrary.Plot</a> is a C# / .NET library designed for simple X/Y graphs and plots. It has the following capabilities:</p>
<ul>
<li>multiple datasets with independent line and symbol styling,
<li>numeric, date based, and time span based X axis options,
<li>unlimited number of numeric Y axes,
<li>scatter series type (arbitrary x/y values),
<li>stacked plot series type,
<li>basic menu driven user-interface (zooming, saving plot),
<li>ability to save plot to clipboard as data and image,
<li>capable of drawing on any graphics implementation - i.e. printers, screens,
<li>Open Source, available under the modified BSD license.
</ul>
<p>Check out the website for more information, including screenshots and an online demo.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/pybraryplot/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>Beyond SELECT &#8212; Part 1: Constraints</title>
		<link>http://mathieu.fenniak.net/beyond_select_part1/</link>
		<comments>http://mathieu.fenniak.net/beyond_select_part1/#comments</comments>
		<pubDate>Fri, 11 Aug 2006 18:28:20 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/beyond_select_part1/</guid>
		<description><![CDATA[You’ve just built your first database application. You’re proud of your accomplishments – and you should be. You mastered the fundamentals of SQL: creating a table, putting data into it, and querying it. You took the basic approach: when it came time to sum a column of numbers, you wrote a FOR loop. Everything works, but shouldn’t your database be doing more for you?]]></description>
			<content:encoded><![CDATA[<p>You’ve just built your first database application. You’re proud of your accomplishments &#8212; and you should be. You mastered the fundamentals of SQL: creating a table, putting data into it, and querying it. You took the basic approach: when it came time to sum a column of numbers, you wrote a FOR loop. Everything works, but shouldn’t your database be doing more for you?</p>
<p>Many people are in the position just described. When time came to use a database, the first web hit for &#8220;SQL Tutorial&#8221; became the bible. SELECT, INSERT, and DELETE &#8212; the bread and butter of data manipulation. The SQL database has satisfied the need for data storage. What else can it do?</p>
<p>It can do a lot more. From aggregate functions to stored procedures, this article will help your database sing and dance. (Note: the author is not responsible for damage, physical, mental or emotional, caused by database servers and software singing and dancing)</p>
<p><em>This article is part 1 of a multi-part article, <a href="http://mathieu.fenniak.net/beyond-select/">Beyond SELECT</a>. This introduction to more than basic SQL is written with multiple databases in mind. Feature availability is documented for PostgreSQL, and MySQL. If you have information on the use of features here with other databases, please leave a comment and I will be glad to update this article.  This is part 1 of a multi-part article.  Links to the next parts will be added at the end as they are published.  I am eager to do similar writing on a freelance basis for any publications.  If you are interested, please leave a comment.</em></p>
<h3>Constraints &#8212; Make a smarter database</h3>
<h4>Keys, and Primary Keys</h4>
<p>A key is a value that uniquely identifies a row in a table.  (<a href="http://www.postgresql.org/docs/8.1/interactive/ddl-constraints.html#AEN2038">PostgreSQL</a>, <a href="http://mysql.com/doc/refman/5.0/en/constraint-primary-key.html">MySQL 5</a>)  A table can have many keys, and most tables have at least one.  One key is called the <em>primary key</em>, and is intended to be the method of identifying a row in a table.</p>
<p>Most new SQL users are familiar with the concept of a primary key in the form of an auto-incrementing integer column.  In MySQL, this type of column is called AUTO_INCREMENT.  In PostgreSQL, the SERIAL identifier is the equivilant.  These data types are easy to use and understand, and make excellent primary keys in many cases.</p>
<p>In cases where integer primary keys are used, undesirable data duplication can be posible.  For example, let&#8217;s create a simple table describing an employee, and recording his name and social security number:</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL,
        name VARCHAR(200),
        ssn VARCHAR(11)
        );</code></pre>
<p>With this data definition, a simple data entry mistake could create two employee rows representing the same employee.  Maybe the HR director has big thick fingers, and he hit the enter button twice when creating a record.  You could put application logic in place to prevent two people with the same social security numbers from being created, but your database can do that for you.  Let&#8217;s drop the <tt>employee_id</tt> row, and use the SSN as the table&#8217;s primary key instead:</p>
<pre><code>CREATE TABLE employee (
        ssn VARCHAR(11)
            PRIMARY KEY,
        name VARCHAR(200),
        );</code></pre>
<p>By taking this simple step, we&#8217;ve reduced the size of our employee table and also made it more &#8220;error-proof&#8221;.  If you attempt to enter two employees with the same SSN, the database will refuse and give you an error.</p>
<p>Not every table will have a single field primary key.  For example, a posting to an online forum can&#8217;t be keyed off the time, since multiple people could post at the same time.  Sometimes it is easier to use an integer primary key, and sometimes it is a good idea to use a composite primary key.  A composite primary key takes two columns, and ensures that no other row in the table exists with those same two columns.  It uniquely identifies a row based upon multiple values.</p>
<p>Our company has just gone multinational.  It seems unlikely, but somehow John Q in Canada has the same social insurance number as Jane B in Tennessee.  Now we need to alter our database to allow both users in, but we still don&#8217;t want to go to an integer primary key.  We can use a composite primary key on the country of employment AND the social (insurance | security) number of the employee:</p>
<pre><code>CREATE TABLE employee (
        ssn VARCHAR(11),
        country VARCHAR(2),
        name VARCHAR(200),
        PRIMARY KEY (country, ssn)
        );</code></pre>
<p>Now (&#8217;US&#8217;, &#8216;223-0423-85&#8242;, &#8216;Jane B&#8217;) is a distinct row from (&#8217;CA&#8217;, &#8216;223-0423-85&#8242;, &#8216;John Q&#8217;), and both can be entered into the database.  Of course, this is a contrived example since Canadian SIN numbers and US SSN numbers have different formats, but that doesn&#8217;t really matter.</p>
<p>What is the difference between a primary key and a key?  Is there such a thing as a secondary key?  A tertiary key?  As it happens, there&#8217;s nothing much &#8220;primary&#8221; about a primary key.  More than anything else, the &#8220;primary&#8221; is documentation, letting people know how this table was intended to be used.  You can create any number of keys on your table by creating unique indicies.</p>
<p>For example, let&#8217;s say that you decided not to use a composite primary key for the employee table.  Many other tables reference <tt>employee</tt>, so it is easiest to just use the original <tt>employee_id</tt> that we started with.  However, we still don&#8217;t want multiple employees to have the same social security number, so we create a unique index on that column:</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        name VARCHAR(200),
        ssn VARCHAR(11)
        );
CREATE UNIQUE INDEX employee_ssn_key ON employee (ssn);</code></pre>
<p>Now only one row can have any given social security number, and only one row can have any given <tt>employee_id</tt>.  This table has two equally valid keys.  Keys should be created on any unique data, and ideally the primary key should not be a manufactured arbitrary number.  However, you will find that integer primary keys can reduce the size and complexity of your database once you start using many foreign keys.</p>
<h4>Foreign Key Constraints</h4>
<p>A foreign key occurs when a row in one table references a row in another table. (<a href="http://www.postgresql.org/docs/8.1/interactive/ddl-constraints.html#DDL-CONSTRAINTS-FK">PostgreSQL</a>, <a href="http://mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html">MySQL 5</a>)  This is the relational part of a relational database system, and it is very common.  Most people learn how to make two tables reference each other, but a surprising number don&#8217;t know that the database itself can help enforce that.  Let&#8217;s create a little example:</p>
<pre><code>CREATE TABLE manager (
        manager_id SERIAL
            PRIMARY KEY,
        name VARCHAR(200),
        evil BOOLEAN
        );
CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        name VARCHAR(200),
        manager_id INTEGER
        );</code></pre>
<p>In this scenario, each employee has a manager, which can be looked up based upon their <tt>manager_id</tt>.  It&#8217;s actually a pretty bad design, for a couple different reasons.  Most importantly, I could enter an employee with a <tt>manager_id</tt> that doesn&#8217;t exist.  That could be intentional, or it could be a giant mistake.  We&#8217;re going to introduce a foreign key constraint that will make sure all employees have a manager that exists:</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        name VARCHAR(200),
        manager_id INTEGER
            REFERENCES manager (manager_id)
        );</code></pre>
<p>Suddenly it is impossible to enter a <tt>manager_id</tt> that does not exist.  The database is doing the hard work of checking every input <tt>manager_id</tt> for us, and all it took was a couple of words!  But we actually didn&#8217;t quite accomplish what we want.  The <tt>manager_id</tt> can still have a <tt>NULL</tt> value entered into it.  Is there some kind of constraint that can fix that?</p>
<h4>NULL / NOT NULL Constraints</h4>
<p>The <tt>NOT NULL</tt> constraint is quite possibly the simplest we&#8217;re going to take a look at.  (<a href="http://www.postgresql.org/docs/8.1/interactive/ddl-constraints.html#AEN1990">PostgreSQL</a>, <a href="http://dev.mysql.com/doc/refman/5.0/en/constraint-invalid-data.html">MySQL 5</a>)  Let&#8217;s throw the words <tt>NOT NULL</tt> into a table, and see what affect that has:</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        name VARCHAR(200)
            NOT NULL,
        manager_id INTEGER
            REFERENCES manager (manager_id)
            NOT NULL
        );</code></pre>
<p>Adding <tt>NOT NULL</tt> has made it so that the <tt>name</tt> and <tt>manager_id</tt> field must be provided.  The <tt>employee_id</tt> field is already <tt>NOT NULL</tt>, because it is a database primary key.  Now we have employees that must have names, and must have managers, and their managers must exist in the <tt>manager</tt> table.</p>
<p>There is a constraint (or, really, a lack of constraint) that is opposite of <tt>NOT NULL</tt>.  Writing <tt>&#8220;NULL&#8221;</tt> in after a field allows a value to be <tt>NULL</tt>.  This is actually the default for all columns, and it does not have to be explicitly stated.  Personally, I like writing <tt>NULL</tt> for every field that can be <tt>NULL</tt> &#8212; it&#8217;s a reminder to myself, when I&#8217;m looking at the schema in the future.</p>
<p>Don&#8217;t you think it&#8217;s about time our employees got paid?</p>
<h4>CHECK Constraints</h4>
<p>A check constraint enforces a defined rule on a table or column.  (<a href="http://www.postgresql.org/docs/8.1/interactive/ddl-constraints.html#AEN1954">PostgreSQL</a>, unsupported in MySQL 5?)  It is another tool that helps you design databases that only take logical and sensical data.  Let&#8217;s create a table of employees and how much they get paid:</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        monthly_salary NUMERIC
            NOT NULL
        );</code></pre>
<p>This table works great, until an employee complains about the payroll system deducting money from his bank account.  A quick look shows that the HR director and his fat fingers are the cause once again &#8212; he entered $-640 into the payroll application!  He must have been aiming for the 9 key, you figure.  Let&#8217;s put a check constraint onto that column to prevent this from ever happening again.  While we&#8217;re at it, let&#8217;s limit the monthly salary to values under $15,000.  You can always come back and change it later if necessary, but for now it will prevent another data entry typo.</p>
<pre><code>CREATE TABLE employee (
        employee_id SERIAL
            PRIMARY KEY,
        monthly_salary NUMERIC
            NOT NULL
            CHECK (monthly_salary &gt; 0)
            CHECK (monthly_salary &lt; 15000)
        );</code></pre>
<p>Now we cannot enter salary values outside of (0 &#8230; 15000) per month.  You might need to rebuild this table and increase the salary limit, once your boss finds out how you prevented a terrible payroll mistake.  &#8230; ha ha.  ha.</p>
<h3>Part 2</h3>
<p>In the next few days, <a href="http://mathieu.fenniak.net/beyond-select/">additional portions of this article</a> will be published.  The next section will deal with data querying.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/beyond_select_part1/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>Vancouver Python Workshop</title>
		<link>http://mathieu.fenniak.net/vancouver-python-workshop/</link>
		<comments>http://mathieu.fenniak.net/vancouver-python-workshop/#comments</comments>
		<pubDate>Mon, 31 Jul 2006 13:35:27 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/vancouver-python-workshop/</guid>
		<description><![CDATA[My friend Bradley is putting on a talk at &#8220;VanPy&#8221; entitled &#8220;Rapid Development of Enterprise-Level Web Applications&#8221;.  It is going to be an interesting case study of a large web application that was re-developed in Python over a couple of years.  The application went from ASP and Windows based to Python and Linux [...]]]></description>
			<content:encoded><![CDATA[<p>My friend <a href="http://iambitter.org/">Bradley</a> is putting on a talk at <a href="http://www.vanpyz.org/conference/talkschedule.html">&#8220;VanPy&#8221;</a> entitled &#8220;Rapid Development of Enterprise-Level Web Applications&#8221;.  It is going to be an interesting case study of a large web application that was re-developed in Python over a couple of years.  The application went from ASP and Windows based to Python and Linux - yay!  For anyone who has never see a Python talk that has to do with an Oracle database (*gasp - not MySQL? ;-) *), and terabytes of data, this is your chance.</p>
<p>Hopefully Jim Hugunin&#8217;s IronPython talk won&#8217;t steal too much of the potential audience away.</p>
<p>I&#8217;ll be the rude guy in the back of the room making silly faces.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/vancouver-python-workshop/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>Ever want to unwrite something?</title>
		<link>http://mathieu.fenniak.net/ever-want-to-unwrite-something/</link>
		<comments>http://mathieu.fenniak.net/ever-want-to-unwrite-something/#comments</comments>
		<pubDate>Mon, 31 Jul 2006 13:24:12 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/ever-want-to-unwrite-something/</guid>
		<description><![CDATA[In my last post, I kinda ranted about python development.  I thought that I was being constructive and presenting a well thought out point-of-view, but it wasn&#8217;t really.  There were probably some ideas in there somewhere, but I forgot a couple important actions in writing.  I did not research the topic of [...]]]></description>
			<content:encoded><![CDATA[<p>In my <a href="http://mathieu.fenniak.net/my-vision-of-python-3000-back-to-basics/">last post</a>, I kinda ranted about python development.  I thought that I was being constructive and presenting a well thought out point-of-view, but it wasn&#8217;t really.  There were probably some ideas in there somewhere, but I forgot a couple important actions in writing.  I did not research the topic of Python 3000 very well, and I did not think about rational reactions to my &#8220;arguments&#8221;.</p>
<p>I think that I was wrong.</p>
<p>If you didn&#8217;t read it, the just of the post was that development of the Python language should stop.  The real reason I felt this way is because I&#8217;ve been reading about Perl 6 lately.  I love Python, and I was scared to think of it going down the same road.  Since then, I&#8217;ve thought about language development in general, and I&#8217;ve watched a presentation by Guido about Python 3000 (which I will probably see again this weekend at <a href="http://www.vanpyz.org/conference/">&#8220;VanPy&#8221;</a>).</p>
<p>Programming languages do need to develop and evolve.  Mistakes are made, new alternatives are developed, and things need to be fixed.  Python 2.4 is a better environment for developing software than Python 1.5 was, and Python should continue to improve.  There will likely be some growing pains.  Maybe a feature I like will get chopped from the language.  But it&#8217;s not the end of the world.  I look forward to seeing the future of Python - don&#8217;t ever go Perl 6 on me, please.</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/ever-want-to-unwrite-something/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>My Vision of Python 3000 &#8212; Back To Basics</title>
		<link>http://mathieu.fenniak.net/my-vision-of-python-3000-back-to-basics/</link>
		<comments>http://mathieu.fenniak.net/my-vision-of-python-3000-back-to-basics/#comments</comments>
		<pubDate>Mon, 17 Jul 2006 19:05:33 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/my-vision-of-python-3000-back-to-basics/</guid>
		<description><![CDATA[Let&#8217;s just get a little bit of a disclaimer out of the way - I don&#8217;t know everything.  I tell my wife that I do, but I&#8217;m not sure she&#8217;s really pretending her hardest to believe me.  Designing and developing a programming language is a hard job, and I&#8217;m certainly no expert in [...]]]></description>
			<content:encoded><![CDATA[<p>Let&#8217;s just get a little bit of a disclaimer out of the way - I don&#8217;t know everything.  I tell my wife that I do, but I&#8217;m not sure she&#8217;s really pretending her hardest to believe me.  Designing and developing a programming language is a hard job, and I&#8217;m certainly no expert in the field.  I am extremely thankful for the many years of hard work that the Python development team has put into Python.  In my humble opinion, Python is the greatest computer programming language in existence.</p>
<p>Now please, stop developing Python.  Put down your keyboards, and walk away.</p>
<p>Well, I don&#8217;t really mean that.  Not in the literal sense, anyways.  If everyone put down their keyboards and walked away, they might find their way outside where they might get sunburnt.  Then they would try to remember who told them to go outside and get sunburnt, and suddenly I would have a class-action lawsuit to deal with.  I would have to retain a legal team at an extreme expense to defend myself.  I don&#8217;t have a extreme cash to expense, so don&#8217;t put down your keyboards, don&#8217;t walk away, and don&#8217;t sue me.</p>
<p><b>Python the language</b> is complete.  It doesn&#8217;t need any more features.</p>
<p>Let me define &#8220;need&#8221; for you &#8212; that feeling you get when you know something will be missed in the first two minutes of looking at a new programming language.  Alright, I admit it, it&#8217;s a crappy definition of &#8220;need&#8221;.  But it&#8217;ll do.</p>
<p>I did not need the builtin function <tt>reversed()</tt>.  If it had it been included in the standard library, I would have been happy.</p>
<p>I did not need the builtin set types.  They already were included in the standard library.  Adding them to the language as a new type was not necessary.</p>
<p>I did not need generator expressions.  I could have just written a generator function.</p>
<p>I do not need a &#8220;with&#8221; statement.  I can use a short variable name.</p>
<p>The difficulty comes with defining which syntax options are worth including in the language itself.  For example, I can add two numbers with the expression &#8220;x - (-y)&#8221;, but I think most rational people would agree that &#8220;x + y&#8221; is a better choice.  Sometimes adding language syntax could provide a new and powerful expressive tool.  When do you draw the line?  I&#8217;m drawing the line at Python 2.4.  That far, no further.</p>
<p>New builtin functions?  Don&#8217;t bother, please.  Put them into a library.  Adding a new builtin function means that I need an updated vim syntax colouring file.  It means my namespace is just a touch more polluted.  It&#8217;s just not necessary.</p>
<p><b>CPython the Python interpreter</b> probably isn&#8217;t complete.  It keeps getting faster and better the more people work on it.  We all like you CPython!  Chin up!</p>
<p><b>Python&#8217;s documentation</b> is a good effort.  Writing documentation is hard, thankless work.  Python documentation writers deserve a pat on the back.  But it&#8217;s a job that is not &#8220;done&#8221;.</p>
<p>New users have difficulty finding some very specific parts of the documentation.  For example, section 2.3.6.1 of the Python library reference is &#8220;String Methods&#8221;.  This isn&#8217;t even on the library reference&#8217;s table of contents, since it is buried one level too deep, yet it is likely one of the first few pages people need.  The same is true for section 2.3.6.2 (String Formatting Operations) and section 2.3.6.4 (Mutable Sequence Types).  The entire section 2.3, builtin types, is one of the most important references for Python.  It is where many people will start - how do I read a file, how do I manipulate a string or an array?  Yet some Python programmers don&#8217;t even find it.</p>
<p>Want to get a little more complex?  How about creating a class that acts like a dictionary?  You&#8217;ll probably need section 3.3 (Special Methods) of the Python reference manual.  Can someone please take this section, create a list of all the special method names, and hyperlink them to the appropriate description of what they are?</p>
<p>The Python documentation has good content.  I believe that finding what you&#8217;re looking for is the hard part.</p>
<p><b>Python&#8217;s standard library</b> has a fork in the road, ahead.</p>
<p>I want to say that the standard library should include <i>everything</i>.  It would make it easier to work with new python software if it had no dependencies though, right?  If the Python standard library pulled more and more software into it, it would be very easy to build new software.  Need a widgetly?  Use the widgetly module.  Need a foogleblarg?  It&#8217;s in the foogle package.  But this isn&#8217;t practical.  The widgetly people need a different release schedule than the foogle package.  foogle needs to put out an emergency patch to fix a security hole, but there&#8217;s no Python release planned so it doesn&#8217;t get out to people.</p>
<p>So then there&#8217;s the middle road, that the standard library is traveling on now.  Need the &#8217;socket&#8217; module?  It&#8217;s included in Python.  Need some XML parsing?  Got that too.  Need a bit more XML parsing?  You&#8217;ve passed the line, you better download PyXML.  CGI, yes; FastCGI, no; regular expressions, yes; python image library, no.  Everyone has their own vision of what should be included, and what shouldn&#8217;t be.</p>
<p>I think the third road here lies with distutils and the &#8220;.egg&#8221; package format.  If this can make it so that dependant packages of appropriate versions are automatically downloaded, compiled, and installed&#8230; then Python doesn&#8217;t need a standard library.  Every module of importance could be distributed and maintained separately from Python.  Modules can still be maintained and developed by the Python developers, but until a programmer or another piece of software needs the sndhdr module it isn&#8217;t installed.</p>
<p><b>I&#8217;m not being critical</b> that much.  But I don&#8217;t like the way Python 3000 planning seems to be going.  I&#8217;m not into language changes.  Python is pretty darn great the way it is - that&#8217;s why I like it.</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/my-vision-of-python-3000-back-to-basics/feed/</wfw:commentRSS>
		</item>
		<item>
		<title>pyPdf 1.6</title>
		<link>http://mathieu.fenniak.net/pypdf-16/</link>
		<comments>http://mathieu.fenniak.net/pypdf-16/#comments</comments>
		<pubDate>Tue, 06 Jun 2006 15:54:41 +0000</pubDate>
		<dc:creator>Mathieu Fenniak</dc:creator>
		
	<category>programming</category>
	<category>python</category>
	<category>pdf</category>
		<guid isPermaLink="false">http://mathieu.fenniak.net/pypdf-16/</guid>
		<description><![CDATA[Finally!  Apparently I must be unemployed in order to get anything done on pyPdf.  I&#8217;ve finally released version 1.6 today.  Major highlights include:

Reads more PDF files than ever before.
Supports reading and creating compressed content streams.
Allows access to document information, such as the title, author, creator, and so on.

Basically, it&#8217;s just better.  [...]]]></description>
			<content:encoded><![CDATA[<p>Finally!  Apparently I must be <a href="http://mathieu.fenniak.net/looking-for-work/">unemployed </a>in order to get anything done on <a href="http://pybrary.net/pyPdf/">pyPdf</a>.  I&#8217;ve finally released version 1.6 today.  Major highlights include:</p>
<ul>
<li>Reads more PDF files than ever before.</li>
<li>Supports reading and creating compressed content streams.</li>
<li>Allows access to document information, such as the title, author, creator, and so on.</li>
</ul>
<p>Basically, it&#8217;s just better.  <a href="http://iambitter.org/">Mr. I-Am-Bitter</a> has been using it on mountains of PDF files, so I feel confident that it works better than ever.
</p>
]]></content:encoded>
			<wfw:commentRSS>http://mathieu.fenniak.net/pypdf-16/feed/</wfw:commentRSS>
		</item>
	</channel>
</rss>
