<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/'><id>tag:blogger.com,1999:blog-5440028356946346379</id><updated>2008-06-09T14:12:20.899-04:00</updated><title type='text'>Doug Hellmann</title><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/search/label/python'/><link rel='next' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/-/python?start-index=26&amp;max-results=25'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/-/python'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>163</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-987204692334885738</id><published>2008-06-08T08:24:00.001-04:00</published><updated>2008-06-08T08:24:45.637-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: dircache</title><content type='html'>The &lt;code&gt;dircache&lt;/code&gt; module includes a function for caching directory listings.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-dircache.html"&gt;dircache&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Cache directory listings, updating when the modification time of a directory changes.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Listing Directory Contents:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The main function in the &lt;code&gt;dircache&lt;/code&gt; API is &lt;code&gt;listdir()&lt;/code&gt;, a wrapper around &lt;code&gt;os.listdir()&lt;/code&gt; that caches the results and returns the &lt;em&gt;same list&lt;/em&gt; each time it is called with the a path unless the modification date of the named directory changes.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dircache&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Contents :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Identical:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Equal    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;It is important to recognize that the exact same list is returned each time, so it should not be modified in place.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python dircache_listdir.py&lt;br /&gt;Contents : ['.svn', '__init__.py', 'dircache_annotate.py', 'dircache_listdir.py', &lt;br /&gt;'dircache_listdir_file_added.py', 'dircache_reset.py']&lt;br /&gt;Identical: True&lt;br /&gt;Equal    : True&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Of course, if the contents of the directory changes it is rescanned.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dircache&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;file_to_create&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pymotw_tmp.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Look at the directory contents&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Create the new file&lt;/span&gt;&lt;br /&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_to_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Rescan the directory&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Remove the file we created&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_to_create&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Identical :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Equal     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Difference:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this case the new file causes a new list to be constructed.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python dircache_listdir_file_added.py&lt;br /&gt;Identical : False&lt;br /&gt;Equal     : False&lt;br /&gt;Difference: ['pymotw_tmp.txt']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;It is also possible to reset the entire cache, discarding its contents so that each path will be rechecked.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dircache&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/tmp&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Identical :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Equal     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Difference:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python dircache_reset.py&lt;br /&gt;Identical : False&lt;br /&gt;Equal     : True&lt;br /&gt;Difference: []&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Annotated Listings:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The other interesting function provided by the &lt;code&gt;dircache&lt;/code&gt; module is &lt;code&gt;annotate()&lt;/code&gt;.  When called, &lt;code&gt;annotate()&lt;/code&gt; modifies a list such as is returned by &lt;code&gt;listdir()&lt;/code&gt;, adding a &lt;code&gt;'/'&lt;/code&gt; to the end of the names that represent directories.  (Sorry Windows users, although it uses os.path.join() to construct names to test, it always appends a &lt;code&gt;'/'&lt;/code&gt;, not os.sep.)&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dircache&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;../../trunk&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;annotated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;dircache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%20s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;%20s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ORIGINAL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ANNOTATED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotated&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python dircache_annotate.py&lt;br /&gt;            ORIGINAL	           ANNOTATED&lt;br /&gt;--------------------	--------------------&lt;br /&gt;           .DS_Store	           .DS_Store&lt;br /&gt;                .svn	               .svn&lt;b&gt;/&lt;/b&gt;&lt;br /&gt;           ChangeLog	           ChangeLog&lt;br /&gt;         LICENSE.txt	         LICENSE.txt&lt;br /&gt;            MANIFEST	            MANIFEST&lt;br /&gt;         MANIFEST.in	         MANIFEST.in&lt;br /&gt;      MANIFEST.in.in	      MANIFEST.in.in&lt;br /&gt;            Makefile	            Makefile&lt;br /&gt;              PyMOTW	             PyMOTW&lt;b&gt;/&lt;/b&gt;&lt;br /&gt;          README.txt	          README.txt&lt;br /&gt;         setup.py.in	         setup.py.in&lt;br /&gt;      static_content	     static_content&lt;b&gt;/&lt;/b&gt;&lt;br /&gt;       template.html	       template.html&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.57.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/06/pymotw-dircache.html' title='PyMOTW: dircache'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=987204692334885738' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/987204692334885738/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/987204692334885738'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/987204692334885738'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-2273705603071765163</id><published>2008-06-06T09:03:00.001-04:00</published><updated>2008-06-06T09:03:32.878-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='Proctor'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Testing Tools for Python | And Now For Something Completely Different</title><content type='html'>Test Driven Development and Test Automation are all the rage, and Python developers have no shortage of tools for testing their own applications.  This column looks at tools for testing your libraries and applications. It isn't a comprehensive survey, but should give you some idea of the kinds of tools available.&lt;br /&gt;&lt;br /&gt;This column was originally published by &lt;a href="http://www.pythonmagazine.com/"&gt;Python Magazine&lt;/a&gt; in &lt;a href="http://pymag.phparch.com/c/issue/view/66"&gt;January of 2008&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/CompletelyDifferent-2008-01-testing-tools/index.html"&gt;Read More&lt;/a&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/06/testing-tools-for-python-and-now-for.html' title='Testing Tools for Python | And Now For Something Completely Different'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=2273705603071765163' title='1 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/2273705603071765163/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/2273705603071765163'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/2273705603071765163'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-95529415153978741</id><published>2008-06-01T11:16:00.001-04:00</published><updated>2008-06-01T11:16:53.661-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: Cookie</title><content type='html'>The &lt;code&gt;Cookie&lt;/code&gt; module defines classes for parsing and creating HTTP cookie headers.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-Cookie.html"&gt;Cookie&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Working with HTTP cookies from the server side.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 2.1 and later&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Cookies have been a part of the HTTP protocol for a long time.  All of the modern web development frameworks provide easy access to cookies so a programmer almost never has to worry about how to format them or make sure the headers are sent properly.  It can be instructive to understand how cookies work, though, and the options available.&lt;br /&gt;&lt;br /&gt;The Cookie module implements a parser for cookies that is mostly RFC 2109 compliant.  It is a little less strict than the standard because MSIE 3.0x does not support the entire standard.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Creating and Setting a Cookie:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Cookies are used as state management, and as such as usually set by the server to be stored and returned by the client.  The most trivial example of creating a cookie looks something like:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Cookie&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mycookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The output is a valid &lt;code&gt;Set-Cookie&lt;/code&gt; header ready to be passed to the client as part of the HTTP response:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python Cookie_setheaders.py&lt;br /&gt;Set-Cookie: mycookie=cookie_value&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Morsels:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;It is also possible to control the other aspects of a cookie, such as the expiration, path, and domain.  In fact, all of the RFC attributes for cookies can be managed through the &lt;code&gt;Morsel&lt;/code&gt; object representing the cookie value.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Cookie&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;key =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  value =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  coded_value =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coded_value&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;br /&gt;                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morsel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# A cookie with a value that has to be encoded to fit into the header&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;encoded_value_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;quot;cookie_value&amp;quot;&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;encoded_value_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Notice that this cookie value has escaped quotes&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# A cookie that only applies to part of a site&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;restricted_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;restricted_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/sub/path&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;restricted_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PyMOTW&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;restricted_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;secure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# A cookie that expires in 5 minutes&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;with_max_age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;expires in 5 minutes&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;with_max_age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;max-age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="c"&gt;# seconds&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# A cookie that expires at a specific time&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;expires_at_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;expires_at_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;expires&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Wdy, DD-Mon-YY HH:MM:SS GMT&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The above example includes two different methods for setting stored cookies that expire.  You can set &lt;code&gt;max-age&lt;/code&gt; to a number of seconds, or &lt;code&gt;expires&lt;/code&gt; to a date and time when the cookie should be discarded.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python Cookie_Morsel.py&lt;br /&gt;Set-Cookie: encoded_value_cookie="\"cookie_value\""; Comment=Notice that this cookie value has escaped quotes&lt;br /&gt;Set-Cookie: expires_at_time=cookie_value; expires=Sun, 01 Jun 2008 11:37:00&lt;br /&gt;Set-Cookie: restricted_cookie=cookie_value; Domain=PyMOTW; Path=/sub/path; secure&lt;br /&gt;Set-Cookie: with_max_age="expires in 5 minutes"; Max-Age=300&lt;br /&gt;&lt;br /&gt;key = restricted_cookie&lt;br /&gt;  value = cookie_value&lt;br /&gt;  coded_value = cookie_value&lt;br /&gt;  domain = PyMOTW&lt;br /&gt;  secure = True&lt;br /&gt;  path = /sub/path&lt;br /&gt;&lt;br /&gt;key = with_max_age&lt;br /&gt;  value = expires in 5 minutes&lt;br /&gt;  coded_value = "expires in 5 minutes"&lt;br /&gt;  max-age = 300&lt;br /&gt;&lt;br /&gt;key = encoded_value_cookie&lt;br /&gt;  value = "cookie_value"&lt;br /&gt;  coded_value = "\"cookie_value\""&lt;br /&gt;  comment = Notice that this cookie value has escaped quotes&lt;br /&gt;&lt;br /&gt;key = expires_at_time&lt;br /&gt;  value = cookie_value&lt;br /&gt;  coded_value = cookie_value&lt;br /&gt;  expires = Sun, 01 Jun 2008 11:37:00&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Both the Cookie and Morsel objects act like dictionaries.  The Morsel responds to a fixed set of keys:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;expires&lt;/li&gt;&lt;li&gt;path&lt;/li&gt;&lt;li&gt;comment&lt;/li&gt;&lt;li&gt;domain&lt;/li&gt;&lt;li&gt;max-age&lt;/li&gt;&lt;li&gt;secure&lt;/li&gt;&lt;li&gt;version&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;The keys for the Cookie instance are the names of the individual cookies being stored.  That information is also available from the &lt;code&gt;key&lt;/code&gt; attribute of the Morsel.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Encoded Values:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The cookie header may require values to be encoded so they can be parsed properly.  &lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Cookie&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;integer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;string_with_quotes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;He said, &amp;quot;Hello, World!&amp;quot;&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;integer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string_with_quotes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  value=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  coded_value=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coded_value&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The Morsel.value is always the decoded value of the cookie, while Morsel.coded_value is always the representation to be used for transmitting the value to the client.  Both values are always strings.  Values saved to a cookie that are not strings are converted automatically.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python Cookie_coded_value.py&lt;br /&gt;integer&lt;br /&gt;  Set-Cookie: integer=5&lt;br /&gt;  value=5 &amp;lt;type 'str'&amp;gt;&lt;br /&gt;  coded_value=5&lt;br /&gt;&lt;br /&gt;string_with_quotes&lt;br /&gt;  Set-Cookie: string_with_quotes="He said, \"Hello, World!\""&lt;br /&gt;  value=He said, "Hello, World!" &amp;lt;type 'str'&amp;gt;&lt;br /&gt;  coded_value="He said, \"Hello, World!\""&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Receiving and Parsing Cookie Headers:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Once the &lt;code&gt;Set-Cookie&lt;/code&gt; headers are received by the client, it will return those cookies to the server on subsequent requests using the &lt;code&gt;Cookie&lt;/code&gt; header.  The incoming header will look like:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;Cookie: integer=5; string_with_quotes="He said, \"Hello, World!\""&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The cookies are either available directly from the headers or, depending on  your web server/framework, the &lt;code&gt;HTTP_COOKIE&lt;/code&gt; environment variable.  To decode them, pass the string without the header prefix to the SimpleCookie when instantiating it, or use the &lt;code&gt;load()&lt;/code&gt; method.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Cookie&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;HTTP_COOKIE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;integer=5; string_with_quotes=&amp;quot;He said, \&amp;quot;Hello, World!\&amp;quot;&amp;quot;&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;From constructor:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTP_COOKIE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;From load():&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTP_COOKIE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python Cookie_parse.py&lt;br /&gt;From constructor:&lt;br /&gt;Set-Cookie: integer=5&lt;br /&gt;Set-Cookie: string_with_quotes="He said, \"Hello, World!\""&lt;br /&gt;&lt;br /&gt;From load():&lt;br /&gt;Set-Cookie: integer=5&lt;br /&gt;Set-Cookie: string_with_quotes="He said, \"Hello, World!\""&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Alternative Output Formats:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Besides using the &lt;code&gt;Set-Cookie&lt;/code&gt; header, it is possible to use JavaScript to add cookies to a client.  SimpleCookie and Morsel provide JavaScript output via the &lt;code&gt;js_output()&lt;/code&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Cookie&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleCookie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mycookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cookie_value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;another_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;second value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js_output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python Cookie_js_output.py&lt;br /&gt;&lt;br /&gt;        &amp;lt;script type="text/javascript"&amp;gt;&lt;br /&gt;        &amp;lt;!-- begin hiding&lt;br /&gt;        document.cookie = "another_cookie="second value"";&lt;br /&gt;        // end hiding --&amp;gt;&lt;br /&gt;        &amp;lt;/script&amp;gt;&lt;br /&gt;        &lt;br /&gt;        &amp;lt;script type="text/javascript"&amp;gt;&lt;br /&gt;        &amp;lt;!-- begin hiding&lt;br /&gt;        document.cookie = "mycookie=cookie_value";&lt;br /&gt;        // end hiding --&amp;gt;&lt;br /&gt;        &amp;lt;/script&amp;gt;&lt;br /&gt;        &lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Deprecated Classes:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;All of these examples have used SimpleCookie.  The Cookie module also provides 2 other classes, SerialCookie and SmartCookie.  SerialCookie can handle any values that can be pickled.  SmartCookie figures out whether a value needs to be unpickled or if it is a simple value.  Since both of these classes use pickles, they are potential security holes in your application and you should not use them.  It is safer to store state on the server, and give the client a session key instead.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/module-cookielib.html"&gt;cookielib&lt;/a&gt; (for working with cookies in an HTTP client)&lt;br /&gt;&lt;a href="http://www.ietf.org/rfc/rfc2109.txt"&gt;RFC 2109, HTTP State Management Mechanism&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.56.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/06/pymotw-cookie.html' title='PyMOTW: Cookie'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=95529415153978741' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/95529415153978741/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/95529415153978741'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/95529415153978741'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-8915929671614700430</id><published>2008-05-29T08:15:00.001-04:00</published><updated>2008-05-29T08:15:04.355-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='virtualenvwrapper'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Python Magazine for May 2008</title><content type='html'>&lt;a href="http://pymag.phparch.com/c/issue/view/74"&gt;&lt;img src="http://pymag.phparch.com/img/pymag/issues/thumbnails/74.jpg" align="right" style="margin: 1em"&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The &lt;a href="http://pymag.phparch.com/c/issue/view/74"&gt;May issue&lt;/a&gt; is available online now.&lt;br /&gt;&lt;br /&gt;Our cover story this month is the first of a 3 part series from Terry Hancock introducing Python programming with &lt;a href="http://www.pygame.org/"&gt;PyGame&lt;/a&gt;.  Terry does an excellent job of covering the basics, and while the article is targeted at younger readers, it isn't dumbed down at all.  I've read the rest of the series already (perks of being on the staff), and I highly recommend it as a summer project if you have someone interested in learning about programming while having fun with basic animation techniques.&lt;br /&gt;&lt;br /&gt;Also up this month, &lt;a href="http://www.voidspace.org.uk/python/weblog/index.shtml"&gt;Michael Foord&lt;/a&gt; explains how to use &lt;a href="http://www.voidspace.org.uk/python/configobj.html"&gt;ConfigObj&lt;/a&gt; to manage the configuration files for your application.  It has many features that may make it a more attractive option than the core module ConfigParser.&lt;br /&gt;&lt;br /&gt;Jon Miller makes a strong argument for using LDAP to establish consistent system configurations in his piece, titled &lt;em&gt;LDAP backed initScripts in Python&lt;/em&gt;.  LDAP was new territory for me, and I think the idea of using a central server to host all of the configuration for your data center makes a lot of sense.&lt;br /&gt;&lt;br /&gt;Paul McGuire's article, &lt;em&gt;Writing a Simple Interpreter/Compiler with Pyparsing&lt;/em&gt;, brought back a lot of memories from some of my favorite topics in college.  The language he chose to implement as an example is pretty twisted, to say the least.  If you have a parsing task, &lt;a href="http://pyparsing.wikispaces.com/"&gt;Pyparsing&lt;/a&gt; may be the tool for you.&lt;br /&gt;&lt;br /&gt;In his Welcome to Python column this month, Mark Mruss covers descriptors and properties for new-style classes.  No more &lt;code&gt;__getattr__()&lt;/code&gt; methods with case statements in them!&lt;br /&gt;&lt;br /&gt;Steve Holden presents his PyCon report, including his own &lt;em&gt;Teach me Twisted&lt;/em&gt; session.  I had to leave early from that session, so I was glad to hear that it went well.&lt;br /&gt;&lt;br /&gt;Brian Jones wonders about training and certification for Python programmers.  There has been some discussion of certification online recently, too.  I'm not sure where I stand on the idea, yet.  What do you think, do we need a standard certification program?&lt;br /&gt;&lt;br /&gt;And my own column covers &lt;code&gt;virtualenvwrapper&lt;/code&gt;, a couple of bash shell functions to making Ian Bicking's &lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; even more useful.&lt;br /&gt;&lt;br /&gt;Check it out, and as always let us know what you think!&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/python-magazine-for-may-2008.html' title='Python Magazine for May 2008'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=8915929671614700430' title='5 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/8915929671614700430/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/8915929671614700430'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/8915929671614700430'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-5473578826640364379</id><published>2008-05-28T19:38:00.001-04:00</published><updated>2008-05-28T19:38:27.516-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>PEP-0371 - Adding the processing module to the Python standard library</title><content type='html'>Jesse Noller is &lt;a href="http://www.python.org/dev/peps/pep-0371/"&gt;championing the addition of the processing module to the standard library&lt;/a&gt;.  We're making extensive use of processing at work now, so I can say it is an extremely simple API for spawning and managing tasks in the background.  Passing data between processes using the processing library is as easy as with standard threads.  &lt;br /&gt;&lt;br /&gt;As I have &lt;a href="http://www.doughellmann.com/articles/CompletelyDifferent-2007-10-multiprocessing/index.html"&gt;written before&lt;/a&gt;, I'm excited about this library and I'm looking forward to having it available everywhere without any extra effort on our part.</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/pep-0371-adding-processing-module-to.html' title='PEP-0371 - Adding the processing module to the Python standard library'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=5473578826640364379' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/5473578826640364379/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/5473578826640364379'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/5473578826640364379'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-5662990411273589716</id><published>2008-05-25T08:57:00.001-04:00</published><updated>2008-05-25T08:57:31.795-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: contextlib</title><content type='html'>The &lt;code&gt;contextlib&lt;/code&gt; module contains utilities for working with &lt;em&gt;context managers&lt;/em&gt; and the &lt;code&gt;with&lt;/code&gt; statement.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-contextlib.html"&gt;contextlib&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Utilities for creating and working with context managers.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 2.5&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Context managers are tied to the &lt;code&gt;with&lt;/code&gt; statement.  Since &lt;code&gt;with&lt;/code&gt; is officially part of Python 2.6, you have to import it from &lt;code&gt;__future__&lt;/code&gt; before using &lt;code&gt;contextlib&lt;/code&gt; in Python 2.5.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;From Generator to Context Manager:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Creating context managers the traditional way, by writing a class with &lt;code&gt;__enter__()&lt;/code&gt; and &lt;code&gt;__exit__()&lt;/code&gt; methods, is not difficult.  But sometimes it is more overhead than you need just to manage a trivial bit of context.  In those sorts of situations, you can use the &lt;code&gt;contextmanager()&lt;/code&gt; decorator to convert a generator function into a context manager.&lt;br /&gt;&lt;br /&gt;The generator should initialize the context, yield exactly one time, then clean up the context.  The value yielded, if any, is bound to the variable in the &lt;code&gt;as&lt;/code&gt; clause of the &lt;code&gt;with&lt;/code&gt; statement.  Exceptions from within the with block are re-raised inside the generator, so you can handle them there.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_statement&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="nd"&gt;@contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contextmanager&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  entering&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  ERROR:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  exiting&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Normal:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  inside with statement:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Handled error:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;showing example of handling an error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Unhandled error:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;this exception is not handled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python contextlib_contextmanager.py&lt;br /&gt;Normal:&lt;br /&gt;  entering&lt;br /&gt;  inside with statement: {}&lt;br /&gt;  exiting&lt;br /&gt;&lt;br /&gt;Handled error:&lt;br /&gt;  entering&lt;br /&gt;  ERROR: showing example of handling an error&lt;br /&gt;  exiting&lt;br /&gt;&lt;br /&gt;Unhandled error:&lt;br /&gt;  entering&lt;br /&gt;  exiting&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/contextlib/contextlib_contextmanager.py", line 38, in &amp;lt;module&amp;gt;&lt;br /&gt;    raise ValueError('this exception is not handled')&lt;br /&gt;ValueError: this exception is not handled&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Nesting Contexts:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;At times it is necessary to manage multiple contexts simultaneously (such as when copying data between input and output file handles, for example).  It is, of course, possible to nest &lt;code&gt;with&lt;/code&gt; statements one inside another.  If the outer contexts do not need their own separate block, though, this adds to the indention level without giving any real benefit.  By using &lt;code&gt;contextlib.nested()&lt;/code&gt;, you can nest the contexts and use a single &lt;code&gt;with&lt;/code&gt; statement.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_statement&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="nd"&gt;@contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contextmanager&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;entering:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;make_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;inside with statement:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that the contexts are exited in the reverse order in which they are entered.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python contextlib_nested.py&lt;br /&gt;entering: A&lt;br /&gt;entering: B&lt;br /&gt;entering: C&lt;br /&gt;inside with statement: A B C&lt;br /&gt;exiting : C&lt;br /&gt;exiting : B&lt;br /&gt;exiting : A&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Closing Open Handles:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;file()&lt;/code&gt; class supports the context manager API directly, but some other objects that represent open handles do not.  The example given in the standard library documentation for &lt;code&gt;contextlib&lt;/code&gt; is the object returned from &lt;code&gt;urllib.urlopen()&lt;/code&gt;, and you may have legacy classes in your own code as well.  If you want to ensure that a handle is closed, use &lt;code&gt;contextlib.closing()&lt;/code&gt; to create a context manager for it.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_statement&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Door&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  __init__()&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  close()&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Normal Example:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Door&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;door&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  inside with statement&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Error handling example:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;contextlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Door&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;door&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  raising from inside with statement&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;error message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;  Had an error:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The handle is closed whether there is an error in the &lt;code&gt;with&lt;/code&gt; block or not.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python contextlib_closing.py&lt;br /&gt;Normal Example:&lt;br /&gt;  __init__()&lt;br /&gt;  inside with statement&lt;br /&gt;  close()&lt;br /&gt;&lt;br /&gt;Error handling example:&lt;br /&gt;  __init__()&lt;br /&gt;  raising from inside with statement&lt;br /&gt;  close()&lt;br /&gt;  Had an error: error message&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.python.org/peps/pep-0343.html"&gt;PEP 0343 - The "with" statement&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.55.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/pymotw-contextlib.html' title='PyMOTW: contextlib'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=5662990411273589716' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/5662990411273589716/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/5662990411273589716'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/5662990411273589716'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-8253369960812724334</id><published>2008-05-23T08:24:00.001-04:00</published><updated>2008-05-23T08:24:21.667-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='visualization'/><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='astronomy'/><title type='text'>Python in Science: How long until a Nobel Prize?</title><content type='html'>As I write this, the Nobel Prizes for 2007 are being announced. During the week of announcements, each day includes news of another award being bestowed for outstanding contributions in physics, chemistry, physiology or medicine, literature, peace, and economics. As a technophile, the science awards have always been the most interesting to me. This year, prior to the awards, new releases of several scientific packages on PyPI caught my eye and I was struck by the coincidence. I started to wonder: How long before a Nobel Prize is awarded to a scientist who uses Python for their work in some significant way?&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/CompletelyDifferent-2007-11-science/index.html"&gt;Read more&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This column was originally published by &lt;a href="http://www.pythonmagazine.com/"&gt;Python Magazine&lt;/a&gt; in &lt;a href="http://pymag.phparch.com/c/issue/view/61"&gt;November of 2007&lt;/a&gt;.</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/python-in-science-how-long-until-nobel.html' title='Python in Science: How long until a Nobel Prize?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=8253369960812724334' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/8253369960812724334/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/8253369960812724334'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/8253369960812724334'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-1080103387679519424</id><published>2008-05-18T11:15:00.001-04:00</published><updated>2008-05-18T11:15:19.359-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: traceback</title><content type='html'>The &lt;code&gt;traceback&lt;/code&gt; module contains functions for producing error messages with stack traces.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-traceback.html"&gt;traceback&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Extract, format, and print exceptions and stack traces.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later, with modifications over time&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The traceback module works with the call stack to produce error messages.  A traceback is a stack trace from the point of an exception handler &lt;em&gt;down&lt;/em&gt; the call chain to the point where the exception was raised.  You can also work with the current call stack &lt;em&gt;up&lt;/em&gt; from the point of a call (and without the context of an error), which is useful for finding out the paths being followed into a function.&lt;br /&gt;&lt;br /&gt;The functions in the &lt;code&gt;traceback&lt;/code&gt; module fall into several common categories.  There are functions for &lt;em&gt;extracting&lt;/em&gt; raw tracebacks from the current runtime environment (either an exception handler for a traceback, or the regular stack).  The extracted stack trace is a sequence of tuples containing the filename, line number, function name, and text of the source line.&lt;br /&gt;&lt;br /&gt;Once extracted, the stack trace can be &lt;em&gt;formatted&lt;/em&gt; using functions like format_exception, format_stack, etc.  The format functions return a list of strings with messages formatted to be printed.  There are shorthand functions for printing the formatted values, as well.&lt;br /&gt;&lt;br /&gt;Although the functions in &lt;code&gt;traceback&lt;/code&gt; mimic the behavior of the interactive interpreter by default, they also are useful for handling exceptions in situations where dumping the full stack trace to stderr is not desirable.  For example, a web application may need to format the traceback so it looks good in HTML.  An IDE may convert the elements of the stack trace into a clickable list that lets the user browse the source.  &lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Supporting Functions:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The examples below use the module &lt;code&gt;traceback_example.py&lt;/code&gt; (provided in the source package for PyMOTW).  The contents are:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursion_level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Working With Exceptions:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The simplest way to handle exception reporting is with &lt;code&gt;print_exc()&lt;/code&gt;.  It uses &lt;code&gt;sys.exc_info()&lt;/code&gt; to obtain the exception information for the current thread, formats the results, and prints the text to a file handle (sys.stderr, by default).&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print_exc() with no exception:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print_exc():&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print_exc(1):&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this example, the file handle for sys.stdout is substituted so the informational and traceback messages are mingled correctly:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_print_exc.py&lt;br /&gt;print_exc() with no exception:&lt;br /&gt;None&lt;br /&gt;&lt;br /&gt;print_exc():&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_exc.py", line 21, in &amp;lt;module&amp;gt;&lt;br /&gt;    produce_exception()&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception&lt;br /&gt;    produce_exception(recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception&lt;br /&gt;    produce_exception(recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 19, in produce_exception&lt;br /&gt;    raise RuntimeError()&lt;br /&gt;RuntimeError&lt;br /&gt;&lt;br /&gt;print_exc(1):&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_exc.py", line 21, in &amp;lt;module&amp;gt;&lt;br /&gt;    produce_exception()&lt;br /&gt;RuntimeError&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;print_exc()&lt;/code&gt; is just a shortcut for print_exception(), which requires explicit arguments:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print_exception():&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_print_exception.py&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_exception.py", line 17, in &amp;lt;module&amp;gt;&lt;br /&gt;    produce_exception()&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception&lt;br /&gt;    produce_exception(recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception&lt;br /&gt;    produce_exception(recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 19, in produce_exception&lt;br /&gt;    raise RuntimeError()&lt;br /&gt;RuntimeError&lt;br /&gt;print_exception():&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;And &lt;code&gt;print_exception()&lt;/code&gt; uses &lt;code&gt;format_exception()&lt;/code&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;produce_exception&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;format_exception():&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_format_exception.py&lt;br /&gt;format_exception():&lt;br /&gt;['Traceback (most recent call last):\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_format_exception.py", line 18, in &amp;lt;module&amp;gt;\n    produce_exception()\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception\n    produce_exception(recursion_level-1)\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 17, in produce_exception\n    produce_exception(recursion_level-1)\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 19, in produce_exception\n    raise RuntimeError()\n',&lt;br /&gt; 'RuntimeError\n']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Working With the Stack:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;There are a similar set of functions for performing the same operations with the current call stack instead of a traceback.  &lt;code&gt;print_stack()&lt;/code&gt;, &lt;code&gt;format_stack()&lt;/code&gt;, and &lt;code&gt;extract_stack()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Calling f() directly:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Calling f() from 3 levels deep:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_print_stack.py&lt;br /&gt;Calling f() directly:&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_stack.py", line 20, in &amp;lt;module&amp;gt;&lt;br /&gt;    f()&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_stack.py", line 17, in f&lt;br /&gt;    traceback.print_stack(file=sys.stdout)&lt;br /&gt;&lt;br /&gt;Calling f() from 3 levels deep:&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_stack.py", line 24, in &amp;lt;module&amp;gt;&lt;br /&gt;    call_function(f)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 23, in call_function&lt;br /&gt;    return call_function(f, recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 23, in call_function&lt;br /&gt;    return call_function(f, recursion_level-1)&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 25, in call_function&lt;br /&gt;    return f()&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_print_stack.py", line 17, in f&lt;br /&gt;    traceback.print_stack(file=sys.stdout)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_stack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;formatted_stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_format_stack.py&lt;br /&gt;['  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_format_stack.py", line 20, in &amp;lt;module&amp;gt;\n    formatted_stack = call_function(f)\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 23, in call_function\n    return call_function(f, recursion_level-1)\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 23, in call_function\n    return call_function(f, recursion_level-1)\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py", line 25, in call_function\n    return f()\n',&lt;br /&gt; '  File "/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_format_stack.py", line 18, in f\n    return traceback.format_stack()\n']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;traceback_example&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python traceback_extract_stack.py&lt;br /&gt;[('/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_extract_stack.py',&lt;br /&gt;  20,&lt;br /&gt;  '&amp;lt;module&amp;gt;',&lt;br /&gt;  'stack = call_function(f)'),&lt;br /&gt; ('/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py',&lt;br /&gt;  23,&lt;br /&gt;  'call_function',&lt;br /&gt;  'return call_function(f, recursion_level-1)'),&lt;br /&gt; ('/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py',&lt;br /&gt;  23,&lt;br /&gt;  'call_function',&lt;br /&gt;  'return call_function(f, recursion_level-1)'),&lt;br /&gt; ('/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_example.py',&lt;br /&gt;  25,&lt;br /&gt;  'call_function',&lt;br /&gt;  'return f()'),&lt;br /&gt; ('/Users/dhellmann/Documents/PyMOTW/in_progress/traceback/traceback_extract_stack.py',&lt;br /&gt;  18,&lt;br /&gt;  'f',&lt;br /&gt;  'return traceback.extract_stack()')]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.54.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/pymotw-traceback.html' title='PyMOTW: traceback'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=1080103387679519424' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/1080103387679519424/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/1080103387679519424'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/1080103387679519424'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-7496463186864033787</id><published>2008-05-16T17:43:00.001-04:00</published><updated>2008-05-16T17:43:08.787-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>October 2007 column for Python Magazine</title><content type='html'>Has your multi-threaded application grown GILs? Take a look at these packages for easy-to-use process management and interprocess communication tools.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/CompletelyDifferent-2007-10-multiprocessing/index.html"&gt;Read more&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;This article was originally published by &lt;a href="http://www.pythonmagazine.com/"&gt;Python Magazine&lt;/a&gt; in  &lt;a href="http://pymag.phparch.com/c/issue/view/60"&gt;October of 2007&lt;/a&gt;.&lt;/em&gt;&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/october-2007-column-for-python-magazine.html' title='October 2007 column for Python Magazine'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=7496463186864033787' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/7496463186864033787/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/7496463186864033787'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/7496463186864033787'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-7186452976159160099</id><published>2008-05-11T13:10:00.001-04:00</published><updated>2008-05-11T13:10:40.614-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: heapq</title><content type='html'>The &lt;code&gt;heapq&lt;/code&gt; implements a min-heap sort algorithm suitable for use with Python's lists.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-heapq.html"&gt;heapq&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; In-place heap sort algorithm&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; New in 2.3 with additions in 2.5&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;A heap is a tree-like data structure where the child nodes have a sort-order relationship with the parents.    Binary heaps can be represented using a list or array organized so that the children of element N are at positions 2*N+1 and 2*N+2 (for zero-based indexes).  This feature makes it possible to rearrange heaps in place, so it is not necessary to reallocate as much memory when adding or removing items.&lt;br /&gt;&lt;br /&gt;A max-heap ensures that the parent is larger than or equal to both of its children.  A min-heap requires that the parent be less than or equal to its children.  Python's heapq module implements a min-heap.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Creating a Heap:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;There are 2 basic ways to create a heap, &lt;code&gt;heappush()&lt;/code&gt; and &lt;code&gt;heapify()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Using &lt;code&gt;heappush()&lt;/code&gt;, the heap sort order of the elements is maintained as new items are added from a data source.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_showtree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_heapdata&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;random :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;add &lt;/span&gt;&lt;span class="si"&gt;%3d&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python heapq_heappush.py&lt;br /&gt;random : [19, 9, 4, 10, 11, 8, 2]&lt;br /&gt;&lt;br /&gt;add  19:&lt;br /&gt;&lt;br /&gt;                 19                 &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add   9:&lt;br /&gt;&lt;br /&gt;                 9                  &lt;br /&gt;        19        &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add   4:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        19                9         &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add  10:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        10                9         &lt;br /&gt;    19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add  11:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        10                9         &lt;br /&gt;    19       11   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add   8:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        10                8         &lt;br /&gt;    19       11       9    &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;add   2:&lt;br /&gt;&lt;br /&gt;                 2                  &lt;br /&gt;        10                4         &lt;br /&gt;    19       11       9        8    &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;If the data is already in memory, it is more efficient to use &lt;code&gt;heapify()&lt;/code&gt; to rearrange the items of the list in place.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_showtree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_heapdata&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;random    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;heapified :&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python heapq_heapify.py&lt;br /&gt;random    : [19, 9, 4, 10, 11, 8, 2]&lt;br /&gt;heapified :&lt;br /&gt;&lt;br /&gt;                 2                  &lt;br /&gt;        9                 4         &lt;br /&gt;    10       11       8        19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Accessing Contents of a Heap:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Once the heap is organized correctly, use &lt;code&gt;heappop()&lt;/code&gt; to remove the element with the lowest value.  In this example, adapted from the stdlib documentation, &lt;code&gt;heapify()&lt;/code&gt; and &lt;code&gt;heappop()&lt;/code&gt; are used to sort a list of numbers.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_showtree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_heapdata&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;random    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;heapified :&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;inorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pop    &lt;/span&gt;&lt;span class="si"&gt;%3d&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;inorder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;inorder   :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inorder&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python heapq_heappop.py&lt;br /&gt;random    : [19, 9, 4, 10, 11, 8, 2]&lt;br /&gt;heapified :&lt;br /&gt;&lt;br /&gt;                 2                  &lt;br /&gt;        9                 4         &lt;br /&gt;    10       11       8        19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;pop      2:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        9                 8         &lt;br /&gt;    10       11       19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop      4:&lt;br /&gt;&lt;br /&gt;                 8                  &lt;br /&gt;        9                 19        &lt;br /&gt;    10       11   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop      8:&lt;br /&gt;&lt;br /&gt;                 9                  &lt;br /&gt;        10                19        &lt;br /&gt;    11   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop      9:&lt;br /&gt;&lt;br /&gt;                 10                 &lt;br /&gt;        11                19        &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop     10:&lt;br /&gt;&lt;br /&gt;                 11                 &lt;br /&gt;        19        &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop     11:&lt;br /&gt;&lt;br /&gt;                 19                 &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;pop     19:&lt;br /&gt;&lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;inorder   : [2, 4, 8, 9, 10, 11, 19]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To remove existing elements and replace them with new values in a single operation, use &lt;code&gt;heapreplace()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_showtree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_heapdata&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;start:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapreplace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;replace &lt;/span&gt;&lt;span class="si"&gt;%2d&lt;/span&gt;&lt;span class="s"&gt; with &lt;/span&gt;&lt;span class="si"&gt;%2d&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;show_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This technique lets you maintain a fixed size heap, such as a queue of jobs ordered by priority.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python heapq_heapreplace.py&lt;br /&gt;start:&lt;br /&gt;&lt;br /&gt;                 2                  &lt;br /&gt;        9                 4         &lt;br /&gt;    10       11       8        19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;replace  2 with  0:&lt;br /&gt;&lt;br /&gt;                 0                  &lt;br /&gt;        9                 4         &lt;br /&gt;    10       11       8        19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;replace  0 with  7:&lt;br /&gt;&lt;br /&gt;                 4                  &lt;br /&gt;        9                 7         &lt;br /&gt;    10       11       8        19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;replace  4 with 13:&lt;br /&gt;&lt;br /&gt;                 7                  &lt;br /&gt;        9                 8         &lt;br /&gt;    10       11       13       19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;replace  7 with  9:&lt;br /&gt;&lt;br /&gt;                 8                  &lt;br /&gt;        9                 9         &lt;br /&gt;    10       11       13       19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;replace  8 with  5:&lt;br /&gt;&lt;br /&gt;                 5                  &lt;br /&gt;        9                 9         &lt;br /&gt;    10       11       13       19   &lt;br /&gt;------------------------------------&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Data Extremes:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;heapq&lt;/code&gt; also includes 2 functions to examine an iterable to find a range of the largest or smallest values it contains.  Using &lt;code&gt;nlargest()&lt;/code&gt; and &lt;code&gt;nsmallest()&lt;/code&gt; are really only efficient for relatively small values of n &gt; 1, but can still come in handy in a few cases.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;heapq_heapdata&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;all       :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3 largest :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlargest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;from sort :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3 smallest:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsmallest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;from sort :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python heapq_extremes.py&lt;br /&gt;all       : [19, 9, 4, 10, 11, 8, 2]&lt;br /&gt;3 largest : [19, 11, 10]&lt;br /&gt;from sort : [19, 11, 10]&lt;br /&gt;3 smallest: [2, 4, 8]&lt;br /&gt;from sort : [2, 4, 8]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/node92.html"&gt;heapq Theory&lt;/a&gt;&lt;br /&gt;&lt;a href="http://en.wikipedia.org/wiki/Heap_%28data_structure%29"&gt;WikiPedia - Heap Data Structure&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.53.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/pymotw-heapq.html' title='PyMOTW: heapq'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=7186452976159160099' title='7 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/7186452976159160099/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/7186452976159160099'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/7186452976159160099'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-3283345727914598646</id><published>2008-05-11T10:46:00.001-04:00</published><updated>2008-05-12T18:25:39.093-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='csvcat'/><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='CommandLineApp'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Command line programs are classes, too!</title><content type='html'>Most OOP discussions focus on GUI or domain-specific development areas, completely ignoring the workhorse of computing: command line programs. This article examines CommandLineApp, a base class for creating command line programs as objects, with option and argument validation, help text generation, and more.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/CommandLineApp/index.html"&gt;Read more&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This article was originally published by &lt;a href="http://www.pythonmagazine.com/"&gt;Python Magazine&lt;/a&gt; in January of 2008.&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/command-line-programs-are-classes-too.html' title='Command line programs are classes, too!'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=3283345727914598646' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/3283345727914598646/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/3283345727914598646'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/3283345727914598646'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-5547475089259227473</id><published>2008-05-11T10:44:00.001-04:00</published><updated>2008-05-12T18:25:50.786-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='CastSampler'/><category scheme='http://www.blogger.com/atom/ns#' term='django'/><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='feedcache'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Caching RSS Feeds With feedcache</title><content type='html'>The past several years have seen a steady increase in the use of RSS and Atom feeds for data sharing. Blogs, podcasts, social networking sites, search engines, and news services are just a few examples of data sources delivered via such feeds. Working with internet services requires care, because inefficiencies in one client implementation may cause performance problems with the service that can be felt by all of the consumers accessing the same server. In this article, I describe the development of the feedcache package, and give examples of how you can use it to optimize the use of data feeds in your application.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/feedcache/index.html"&gt;Read more&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This article was originally published by &lt;a href="http://www.pythonmagazine.com/"&gt;Python Magazine&lt;/a&gt; in November of 2007.</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/caching-rss-feeds-with-feedcache.html' title='Caching RSS Feeds With feedcache'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=5547475089259227473' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/5547475089259227473/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/5547475089259227473'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/5547475089259227473'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-3017650515993072322</id><published>2008-05-11T10:43:00.001-04:00</published><updated>2008-05-11T11:23:48.025-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='mailbox2ics'/><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='email'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='calendar'/><title type='text'>Working with IMAP and iCalendar</title><content type='html'>How can you access group calendar information if your Exchange-like mail and calendaring server does not provide iCalendar feeds, and you do not, or cannot, use Outlook? Use Python to extract the calendar data and generate your own feed, of course! This article discusses a surprisingly simple program to perform what seems like a complex series of operations: scanning IMAP folders, extracting iCalendar attachments, and merging the contained events together into a single calendar.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/articles/mailbox2ics/index.html"&gt;Read more&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;This article was originally published by &lt;a href="http://www.pythonmagazine.com"&gt;Python Magazine&lt;/a&gt; in October of 2007.&lt;/em&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/working-with-imap-and-icalendar.html' title='Working with IMAP and iCalendar'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=3017650515993072322' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/3017650515993072322/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/3017650515993072322'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/3017650515993072322'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-2701075669879970431</id><published>2008-05-04T14:31:00.001-04:00</published><updated>2008-05-04T14:31:52.042-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: cmd</title><content type='html'>The &lt;code&gt;cmd&lt;/code&gt; module contains a base class for creating command interpreters.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-cmd.html"&gt;cmd&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Create line-oriented command processors.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later, with some additions in 2.3&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;cmd&lt;/code&gt; module contains one public class, &lt;code&gt;Cmd&lt;/code&gt;, designed to be used as a base class for command processors such as interactive shells and other command interpreters.  By default it uses &lt;a href="http://docs.python.org/lib/module-readline.html"&gt;readline&lt;/a&gt; for interactive prompt handling, command line editing, and command completion.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Processing Commands:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The interpreter uses a loop to read all lines from its input, parse them, and then dispatch the command to an appropriate command handler.  Input lines are parsed into two parts.  The &lt;em&gt;command&lt;/em&gt;, and any other text on the line.  If the user enters a command &lt;code&gt;foo bar&lt;/code&gt;, and your class includes a method named &lt;code&gt;do_foo()&lt;/code&gt;, it is called with "bar" as the only argument.  &lt;br /&gt;&lt;br /&gt;The end-of-file marker is dispatched to &lt;code&gt;do_EOF()&lt;/code&gt;.  If a command handler returns a true value, the program will exit cleanly.  So to give a clean way to exit your interpreter, make sure to implement &lt;code&gt;do_EOF()&lt;/code&gt; and have it return &lt;code&gt;True&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;This simple example program supports the "greet" command:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;By running it interactively, we can demonstrate how commands are dispatched as well as show of some of the features included in &lt;code&gt;Cmd&lt;/code&gt; for free.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_simple.py &lt;br /&gt;(Cmd) &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The first thing to notice is the command prompt, "&lt;tt&gt;(Cmd)&lt;/tt&gt;".  The prompt can be configured through the attribute &lt;code&gt;prompt&lt;/code&gt;.  If the prompt changes as the result of a command processor, the new value is used to query for the next command.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) help&lt;br /&gt;&lt;br /&gt;Undocumented commands:&lt;br /&gt;======================&lt;br /&gt;EOF  greet  help&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The &lt;em&gt;help&lt;/em&gt; command is built into &lt;code&gt;Cmd&lt;/code&gt;.  With no arguments, it shows the list of commands available.  If you include a command you want help on, the output is more verbose and restricted to details of that command, when available.&lt;br /&gt;&lt;br /&gt;If we use the &lt;em&gt;greet&lt;/em&gt; command, &lt;code&gt;do_greet()&lt;/code&gt; is invoked to handle it:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) greet&lt;br /&gt;hello&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;If your class does not include a specific command processor for "foo", the method &lt;code&gt;default()&lt;/code&gt; is called with the entire input line as an argument.  The built-in implementation of &lt;code&gt;default()&lt;/code&gt; reports an error.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) foo&lt;br /&gt;*** Unknown syntax: foo&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since &lt;code&gt;do_EOF()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, hitting Ctrl-D will drop us out of the interpreter.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) ^D$ &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that no newline is printed, so the results are a little messy.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Command Arguments:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This version of the example includes a few enhancements to eliminate some of the annoyances and add help for the &lt;em&gt;greet&lt;/em&gt; command.  &lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;greet [person]&lt;/span&gt;&lt;br /&gt;&lt;span class="sd"&gt;        Greet the named person&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hi,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;postloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;First, let's look at the help.  The docstring added to &lt;code&gt;do_greet()&lt;/code&gt; becomes the help text for the command:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_arguments.py &lt;br /&gt;(Cmd) help&lt;br /&gt;&lt;br /&gt;Documented commands (type help &lt;topic&gt;):&lt;br /&gt;========================================&lt;br /&gt;greet&lt;br /&gt;&lt;br /&gt;Undocumented commands:&lt;br /&gt;======================&lt;br /&gt;EOF  help&lt;br /&gt;&lt;br /&gt;(Cmd) help greet&lt;br /&gt;greet [person]&lt;br /&gt;        Greet the named person&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The optional argument to the &lt;em&gt;greet&lt;/em&gt; command, "person".  There is a distinction between the argument to the &lt;strong&gt;command&lt;/strong&gt; and the &lt;strong&gt;method&lt;/strong&gt;.  The method &lt;strong&gt;always&lt;/strong&gt; takes the argument, but sometimes the value is an empty string.  It is left up to the command processor to determine if an empty argument is valid, or do any further parsing and processing of the command.  In this example, if a person's name is provided then the greeting is personalized.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) greet Alice&lt;br /&gt;hi, Alice&lt;br /&gt;(Cmd) greet&lt;br /&gt;hi&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Whether an argument is given by the user or not, the value passed to the command processor does not include the command itself.  That simplifies parsing in the command processor, if multiple arguments are needed.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Live Help:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In the previous example, the formatting of the help text leaves something to be desired.  Since it comes from the docstring, it retains the indentation from our source.  Of course we could edit the source to remove the extra white-space, but that would leave our application looking poorly formatted.  An alternative solution is to implement a help handler for the greet command, named &lt;code&gt;help_greet()&lt;/code&gt;.  When present, it is called on to produce help text for the named command.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hi,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;help_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;greet [person]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;                           &lt;span class="s"&gt;&amp;#39;Greet the named person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;                           &lt;span class="p"&gt;])&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this simple example, the text is static but formatted more nicely.  It would also be possible to use previous command state to tailor the contents of the help text to the current context.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_do_help.py &lt;br /&gt;(Cmd) help greet&lt;br /&gt;greet [person]&lt;br /&gt;Greet the named person&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;It is up to the help handler to actually output the help message, and not simply return the help text for handling elsewhere.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Auto-Completion:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Cmd&lt;/code&gt; includes support for command completion based on the names of the commands with processor methods.  Completion is triggered by hitting the tab key on a line.  When multiple completions are possible, pressing tab twice prints a list of the options.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_do_help.py &lt;br /&gt;(Cmd) &amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;br /&gt;EOF    greet  help   &lt;br /&gt;(Cmd) h&amp;lt;tab&amp;gt;&lt;br /&gt;(Cmd) help&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Once the command is known, argument completion is handled by methods with the prefix &lt;tt&gt;complete_&lt;/tt&gt;.  This allows you to assemble a list of possible completions using your own criteria (query a database, look at at a file or directory on the filesystem, etc.).  In this case, the program has a hard-coded set of "friends" who receive a less formal greeting than named or anonymous strangers.  A real program would probably save the list somewhere, and either read it once and cache the contents to be scanned as needed.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="n"&gt;FRIENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Barbara&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="s"&gt;&amp;quot;Greet the person&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FRIENDS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complete_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;begidx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endidx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;completions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FRIENDS&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;completions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;br /&gt;                            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FRIENDS&lt;/span&gt;&lt;br /&gt;                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;                            &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;completions&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;When there is input text, &lt;code&gt;complete_greet()&lt;/code&gt; returns a list of friends that match.  Otherwise, the full list of friends is returned.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_arg_completion.py &lt;br /&gt;(Cmd) greet &amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;br /&gt;Adam     Alice    Barbara  Bob      &lt;br /&gt;(Cmd) greet A&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;br /&gt;Adam   Alice  &lt;br /&gt;(Cmd) greet Ad&amp;lt;tab&amp;gt;&lt;br /&gt;(Cmd) greet Adam&lt;br /&gt;hi, Adam!&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;If the name given is not in the list of friends, the formal greeting is given.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;(Cmd) greet Joe&lt;br /&gt;hello, Joe&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Overriding Base Class Methods:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;Cmd&lt;/code&gt; includes several methods that can be overridden as hooks for taking actions or altering the base class behavior.  This example is not exhaustive, but contains many of the methods commonly useful.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Illustrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="s"&gt;&amp;quot;Illustrate the base class method use.&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intro&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cmdloop(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;intro&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;preloop()&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;postloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;postloop()&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;parseline(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;) =&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onecmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;onecmd(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onecmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emptyline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;emptyline()&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emptyline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;precmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;precmd(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;precmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;postcmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;postcmd(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postcmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="s"&gt;&amp;quot;Exit&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;Illustrate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Illustrating the methods of cmd.Cmd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;cmdloop()&lt;/code&gt; is the main processing loop of the interpreter.  You can override it, but it is usually not necessary, since the &lt;code&gt;preloop()&lt;/code&gt; and &lt;code&gt;postloop()&lt;/code&gt; hooks are available.&lt;br /&gt;&lt;br /&gt;Each iteration through &lt;code&gt;cmdloop()&lt;/code&gt; calls &lt;code&gt;onecmd()&lt;/code&gt; to dispatch the command to its processor.  The actual input line is parsed with &lt;code&gt;parseline()&lt;/code&gt; to create a tuple containing the command, and the remaining portion of the line.&lt;br /&gt;&lt;br /&gt;If the line is empty, &lt;code&gt;emptyline()&lt;/code&gt; is called.  The default implementation runs the previous command again.  If the line contains a command, first &lt;code&gt;precmd()&lt;/code&gt; is called then the processor is looked up and invoked.  If none is found, &lt;code&gt;default()&lt;/code&gt; is called instead.  Finally &lt;code&gt;postcmd()&lt;/code&gt; is called.&lt;br /&gt;&lt;br /&gt;Here's an example session with print statements added:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_illustrate_methods.py &lt;br /&gt;cmdloop(Illustrating the methods of cmd.Cmd)&lt;br /&gt;preloop()&lt;br /&gt;Illustrating the methods of cmd.Cmd&lt;br /&gt;(Cmd) greet Bob&lt;br /&gt;precmd(greet Bob)&lt;br /&gt;onecmd(greet Bob)&lt;br /&gt;parseline(greet Bob) =&gt; ('greet', 'Bob', 'greet Bob')&lt;br /&gt;hello, Bob&lt;br /&gt;postcmd(None, greet Bob)&lt;br /&gt;(Cmd) ^Dprecmd(EOF)&lt;br /&gt;onecmd(EOF)&lt;br /&gt;parseline(EOF) =&gt; ('EOF', '', 'EOF')&lt;br /&gt;postcmd(True, EOF)&lt;br /&gt;postloop()&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Configuring Cmd Through Attributes:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In addition to the methods described above, there are several attributes for controlling command interpreters.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;prompt&lt;/em&gt; can be set to a string to be printed each time the user is asked for a new command.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;intro&lt;/em&gt; is the "welcome" message printed at the start of the program.  &lt;code&gt;cmdloop()&lt;/code&gt; takes an argument for this value, or you can set it on the class directly.&lt;br /&gt;&lt;br /&gt;When printing help, the &lt;em&gt;doc_header&lt;/em&gt;, &lt;em&gt;misc_header&lt;/em&gt;, &lt;em&gt;undoc_header&lt;/em&gt;, and &lt;em&gt;ruler&lt;/em&gt; attributes are used to format the output.&lt;br /&gt;&lt;br /&gt;This example class shows a command processor to let the user control the prompt for the interactive session.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;prompt: &amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Simple command processor example.&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="n"&gt;doc_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;doc_header&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;misc_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;misc_header&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;undoc_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;undoc_header&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="n"&gt;ruler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_attributes.py &lt;br /&gt;Simple command processor example.&lt;br /&gt;prompt: prompt hello&lt;br /&gt;hello: help&lt;br /&gt;&lt;br /&gt;doc_header&lt;br /&gt;----------&lt;br /&gt;prompt&lt;br /&gt;&lt;br /&gt;undoc_header&lt;br /&gt;------------&lt;br /&gt;EOF  help&lt;br /&gt;&lt;br /&gt;hello: &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Shelling Out:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;To supplement the standard command processing, &lt;code&gt;Cmd&lt;/code&gt; includes 2 special command prefixes.  A question mark (&lt;code&gt;?&lt;/code&gt;) is equivalent to the built-in help command, and can be used in the same way.  An exclamation point (&lt;code&gt;!&lt;/code&gt;) maps to &lt;code&gt;do_shell()&lt;/code&gt;, and is intended for shelling out to run other commands, as in this example.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShellEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="n"&gt;last_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="s"&gt;&amp;quot;Run a shell command&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;running shell command:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;br /&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="s"&gt;&amp;quot;Print the input, replacing &amp;#39;$out&amp;#39; with the output of the last shell command&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="c"&gt;# Obviously not robust&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;$out&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;ShellEnabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_do_shell.py &lt;br /&gt;(Cmd) ?&lt;br /&gt;&lt;br /&gt;Documented commands (type help &lt;topic&gt;):&lt;br /&gt;========================================&lt;br /&gt;echo  shell&lt;br /&gt;&lt;br /&gt;Undocumented commands:&lt;br /&gt;======================&lt;br /&gt;EOF  help&lt;br /&gt;&lt;br /&gt;(Cmd) ? shell&lt;br /&gt;Run a shell command&lt;br /&gt;(Cmd) ? echo&lt;br /&gt;Print the input, replacing '$out' with the output of the last shell command&lt;br /&gt;(Cmd) shell pwd&lt;br /&gt;running shell command: pwd&lt;br /&gt;/Users/dhellmann/Documents/PyMOTW/in_progress/cmd&lt;br /&gt;&lt;br /&gt;(Cmd) ! pwd&lt;br /&gt;running shell command: pwd&lt;br /&gt;/Users/dhellmann/Documents/PyMOTW/in_progress/cmd&lt;br /&gt;&lt;br /&gt;(Cmd) echo $out&lt;br /&gt;/Users/dhellmann/Documents/PyMOTW/in_progress/cmd&lt;br /&gt;&lt;br /&gt;(Cmd) &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Alternative Inputs:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;While the default mode for &lt;code&gt;Cmd&lt;/code&gt; is to interact with the user through the &lt;code&gt;readline&lt;/code&gt; library, it is also possible to pass a series of commands in to standard input using standard Unix shell redirection.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ echo help | python cmd_do_help.py &lt;br /&gt;(Cmd) &lt;br /&gt;Documented commands (type help &lt;topic&gt;):&lt;br /&gt;========================================&lt;br /&gt;greet&lt;br /&gt;&lt;br /&gt;Undocumented commands:&lt;br /&gt;======================&lt;br /&gt;EOF  help&lt;br /&gt;&lt;br /&gt;(Cmd) &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;If you would rather have your program read the script file directly, a few other changes may be needed.  Since &lt;code&gt;readline&lt;/code&gt; interacts with the terminal/tty device, rather than the standard input stream, you should disable it if you know your script is going to be reading from a file.  Also, to avoid printing superfluous prompts, you can set the prompt to an empty string.  This example shows how to open a file and pass it as input to a modified version of the HelloWorld example.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simple command processor example.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="c"&gt;# Disable rawinput module use&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;use_rawinput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="c"&gt;# Do not show a prompt after each command read&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;    &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;With &lt;em&gt;use_rawinput&lt;/em&gt; set to &lt;code&gt;False&lt;/code&gt; and &lt;em&gt;prompt&lt;/em&gt; set to an empty string, we can all the script on this input file:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;greet&lt;br /&gt;greet Alice and Bob&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;to produce output like:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_file.py cmd_file.txt &lt;br /&gt;hello, &lt;br /&gt;hello, Alice and Bob&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Commands from sys.argv:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;If, instead of reading commands from stdin or a file, you want to process command line arguments to the program as a command for your interpreter class, that is also possible.  In that case, you can call &lt;code&gt;onecmd()&lt;/code&gt; directly, as in this example.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmd&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InteractiveOrCommandLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Accepts commands via the normal interactive prompt or on the command line.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_EOF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;InteractiveOrCommandLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onecmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;InteractiveOrCommandLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since &lt;code&gt;onecmd()&lt;/code&gt; takes a single string as input, the arguments to the program need to be joined together before being passed in.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;$ python cmd_argv.py greet Command Line User&lt;br /&gt;hello, Command Line User&lt;br /&gt;$ python cmd_argv.py&lt;br /&gt;(Cmd) greet Interactive User&lt;br /&gt;hello, Interactive User&lt;br /&gt;(Cmd) &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.52.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/05/pymotw-cmd.html' title='PyMOTW: cmd'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=2701075669879970431' title='8 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/2701075669879970431/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/2701075669879970431'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/2701075669879970431'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-8097663336468748476</id><published>2008-04-27T18:00:00.001-04:00</published><updated>2008-04-27T18:00:06.718-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: functools</title><content type='html'>The &lt;code&gt;functools&lt;/code&gt; module includes tools for wrapping functions and other callable objects.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-functools.html"&gt;functools&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Tools for making decorators and other function wrappers.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; new in 2.5&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The primary tool supplied by the &lt;code&gt;functools&lt;/code&gt; module is the class &lt;code&gt;partial&lt;/code&gt;, which can be used to "wrap" a callable with default arguments.  The resulting object is itself callable and can be treated as though it is the original function.  It takes all of the same arguments as the original callable and can be invoked with extra positional or named arguments as well.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;partial:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This example shows two simple partial objects for the function &lt;code&gt;myfunc()&lt;/code&gt;.  Notice that &lt;code&gt;show_details()&lt;/code&gt; prints the &lt;code&gt;func&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, and &lt;code&gt;keywords&lt;/code&gt; attributes of the partial object.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Docstring for myfunc().&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;called myfunc with:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_partial&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Show details of a callable object.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;object:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_partial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__name__:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_partial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;func:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;args:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;keywords:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myfunc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;partial with named default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;override b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;partial with defaults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;override b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Insufficient arguments:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;At the end of the example, the first partial created is invoked without passing a value for &lt;code&gt;a&lt;/code&gt;, causing an exception.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python functools_partial.py&lt;br /&gt;myfunc:&lt;br /&gt;	object: &amp;lt;function myfunc at 0x7cbf0&amp;gt;&lt;br /&gt;	__name__: myfunc&lt;br /&gt;	__doc__ 'Docstring for myfunc().'&lt;br /&gt;	called myfunc with: ('a', 3)&lt;br /&gt;&lt;br /&gt;partial with named default:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x74ea0&amp;gt;&lt;br /&gt;	__doc__ 'partial(func, *args, **keywords) - new function with partial application\n\tof the given arguments and keywords.\n'&lt;br /&gt;	func: &amp;lt;function myfunc at 0x7cbf0&amp;gt;&lt;br /&gt;	args: ()&lt;br /&gt;	keywords: {'b': 4}&lt;br /&gt;	called myfunc with: ('default a', 4)&lt;br /&gt;	called myfunc with: ('override b', 5)&lt;br /&gt;&lt;br /&gt;partial with defaults:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x74ed0&amp;gt;&lt;br /&gt;	__doc__ 'partial(func, *args, **keywords) - new function with partial application\n\tof the given arguments and keywords.\n'&lt;br /&gt;	func: &amp;lt;function myfunc at 0x7cbf0&amp;gt;&lt;br /&gt;	args: ('default a',)&lt;br /&gt;	keywords: {'b': 99}&lt;br /&gt;	called myfunc with: ('default a', 99)&lt;br /&gt;	called myfunc with: ('default a', 'override b')&lt;br /&gt;&lt;br /&gt;Insufficient arguments:&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "/Users/dhellmann/Documents/PyMOTW/in_progress/functools/functools_partial.py", line 48, in &amp;lt;module&amp;gt;&lt;br /&gt;    p1()&lt;br /&gt;TypeError: myfunc() takes at least 1 non-keyword argument (0 given)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;update_wrapper:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;As illustrated in the previous example, the &lt;code&gt;partial&lt;/code&gt; object does not have a &lt;code&gt;__name__&lt;/code&gt; or &lt;code&gt;__doc__&lt;/code&gt; attributes by default.  Losing those attributes for decorated functions makes them more difficult to debug.  By using &lt;code&gt;update_wrapper&lt;/code&gt;, you can copy or add attributes from the original function to the &lt;code&gt;partial&lt;/code&gt; object.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Docstring for myfunc().&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;called myfunc with:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Show details of a callable object.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;object:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__name__:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(no __name__)&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myfunc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;raw wrapper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Updating wrapper:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;assign:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WRAPPER_ASSIGNMENTS&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;update:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WRAPPER_UPDATES&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;updated wrapper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The attributes added to the wrapper are defined in functools.WRAPPER_ASSIGNMENTS, while functools.WRAPPER_UPDATES lists values to be modified.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python functools_update_wrapper.py&lt;br /&gt;myfunc:&lt;br /&gt;	object: &amp;lt;function myfunc at 0x7cb30&amp;gt;&lt;br /&gt;	__name__: myfunc&lt;br /&gt;	__doc__ 'Docstring for myfunc().'&lt;br /&gt;&lt;br /&gt;raw wrapper:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x74f30&amp;gt;&lt;br /&gt;	__name__: (no __name__)&lt;br /&gt;	__doc__ 'partial(func, *args, **keywords) - new function with partial application\n\tof the given arguments and keywords.\n'&lt;br /&gt;&lt;br /&gt;Updating wrapper:&lt;br /&gt;	assign: ('__module__', '__name__', '__doc__')&lt;br /&gt;	update: ('__dict__',)&lt;br /&gt;&lt;br /&gt;updated wrapper:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x74f30&amp;gt;&lt;br /&gt;	__name__: myfunc&lt;br /&gt;	__doc__ 'Docstring for myfunc().'&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Methods and Other Callables:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Partials work with any callable object, including methods and instances.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Demonstration class for functools&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meth1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Docstring for meth1().&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;called meth1 with:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meth2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Docstring for meth2&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;called meth2 with:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;wrapped_meth2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wrapped c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped_meth2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;meth2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Docstring for MyClass.__call__&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;called object with:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Show details of a callable object.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;object:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__name__:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(no __name__)&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meth1 straight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no default for a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meth1 wrapper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a goes here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meth2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meth2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no default for c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wrapped meth2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped_meth2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrapped_meth2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no default for c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;instance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no default for e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;instance wrapper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;e goes here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python functools_method.py&lt;br /&gt;meth1 straight:&lt;br /&gt;	object: &amp;lt;bound method MyClass.meth1 of &amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;&amp;gt;&lt;br /&gt;	__name__: meth1&lt;br /&gt;	__doc__ 'Docstring for meth1().'&lt;br /&gt;	called meth1 with: (&amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;, 'no default for a', 3)&lt;br /&gt;&lt;br /&gt;meth1 wrapper:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x81060&amp;gt;&lt;br /&gt;	__name__: meth1&lt;br /&gt;	__doc__ 'Docstring for meth1().'&lt;br /&gt;	called meth1 with: (&amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;, 'a goes here', 4)&lt;br /&gt;&lt;br /&gt;meth2:&lt;br /&gt;	object: &amp;lt;bound method MyClass.meth2 of &amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;&amp;gt;&lt;br /&gt;	__name__: meth2&lt;br /&gt;	__doc__ 'Docstring for meth2'&lt;br /&gt;	called meth2 with: (&amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;, 'no default for c', 6)&lt;br /&gt;&lt;br /&gt;wrapped meth2:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x74f90&amp;gt;&lt;br /&gt;	__name__: meth2&lt;br /&gt;	__doc__ 'Docstring for meth2'&lt;br /&gt;	called meth2 with: ('wrapped c', 'no default for c', 6)&lt;br /&gt;&lt;br /&gt;instance:&lt;br /&gt;	object: &amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;&lt;br /&gt;	__name__: (no __name__)&lt;br /&gt;	__doc__ 'Demonstration class for functools'&lt;br /&gt;	called object with: (&amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;, 'no default for e', 6)&lt;br /&gt;&lt;br /&gt;instance wrapper:&lt;br /&gt;	object: &amp;lt;functools.partial object at 0x81090&amp;gt;&lt;br /&gt;	__name__: (no __name__)&lt;br /&gt;	__doc__ 'partial(func, *args, **keywords) - new function with partial application\n\tof the given arguments and keywords.\n'&lt;br /&gt;	called object with: (&amp;lt;__main__.MyClass object at 0x7ecd0&amp;gt;, 'e goes here', 7)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;wraps:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;As mentioned earlier, these capabilities are especially useful when used in decorators, since the decorated function ends up with properties of the original, "raw", function.  &lt;code&gt;functools&lt;/code&gt; provides a convenience function, &lt;code&gt;wraps()&lt;/code&gt;, to be used as a decorator itself and to apply &lt;code&gt;update_wrapper()&lt;/code&gt; automatically.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Show details of a callable object.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;object:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__name__:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(no __name__)&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;decorated defaults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;decorated:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorated&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;myfunc:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myfunc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;unwrapped, default b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;unwrapped, passing b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;wrapped_myfunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simple_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;show_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wrapped_myfunc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped_myfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;wrapped_myfunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;wrapped_myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;args to decorated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python functools_wraps.py&lt;br /&gt;myfunc:&lt;br /&gt;	object: &amp;lt;function myfunc at 0x7cc70&amp;gt;&lt;br /&gt;	__name__: myfunc&lt;br /&gt;	__doc__ None&lt;br /&gt;&lt;br /&gt;	myfunc: ('unwrapped, default b', 2)&lt;br /&gt;	myfunc: ('unwrapped, passing b', 3)&lt;br /&gt;&lt;br /&gt;wrapped_myfunc:&lt;br /&gt;	object: &amp;lt;function myfunc at 0x7ccb0&amp;gt;&lt;br /&gt;	__name__: myfunc&lt;br /&gt;	__doc__ None&lt;br /&gt;&lt;br /&gt;	decorated: ('decorated defaults', 1)&lt;br /&gt;		myfunc: ('decorated defaults', 1)&lt;br /&gt;	decorated: ('args to decorated', 4)&lt;br /&gt;		myfunc: ('args to decorated', 4)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.51.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/pymotw-functools.html' title='PyMOTW: functools'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=8097663336468748476' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/8097663336468748476/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/8097663336468748476'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/8097663336468748476'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-63455822556087422</id><published>2008-04-25T08:48:00.001-04:00</published><updated>2008-04-25T08:48:36.832-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Python Magazine'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>Python Magazine for April 2008</title><content type='html'>The &lt;a href="http://pymag.phparch.com/c/issue/view/71"&gt;April issue&lt;/a&gt; of Python Magazine is ready for download now.&lt;br /&gt;&lt;br /&gt;This month's cover story from Zach Voase introduces bioinformatics with Python using &lt;a href="http://biopython.org/wiki/Main_Page"&gt;BioPython&lt;/a&gt;.  It's amazing how easy it is to work with gene sequences in Python.&lt;br /&gt;&lt;br /&gt;Jeff Scudder provides an excellent article about using the Google Spreadsheet API like a database.  We use Google Spreadsheet to manage some parts of the magazine, so I'm definitely looking forward to applying some of these techniques myself.&lt;br /&gt;&lt;br /&gt;You will recognize Eugen Wintersberger from previous issues.  This month he returns to explain how to use PyTables and HDF5 to work with &lt;em&gt;large&lt;/em&gt; datasets.  As compute power and storage capacity have increased over the years, the algorithms and tools for processing those datasets have evolved to take advantage of them.&lt;br /&gt;&lt;br /&gt;Every good editor and IDE includes customization features, and Mac OS X's XCode is no exception.  JC Cruz introduces techniques for customizing XCode through Python scripts.&lt;br /&gt;&lt;br /&gt;Mark Mruss' column this month features the AVC library for GUI programming.  The "Application View Controller" connects the widgets on the screen to variables, automatically syncing between them, saving you a lot of manual work.&lt;br /&gt;&lt;br /&gt;To cap off the issue, we also have plenty of PyCon 2008 coverage from both Steve Holden and me.  I had a lot of fun, and I'm already planning my trip for next year.&lt;br /&gt;&lt;br /&gt;I hope you'll head over to the site and &lt;a href="http://pymag.phparch.com/c/issue/view/71"&gt;download your copy now&lt;/a&gt;!&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/python-magazine-for-april-2008.html' title='Python Magazine for April 2008'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=63455822556087422' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/63455822556087422/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/63455822556087422'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/63455822556087422'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-3912700715364565667</id><published>2008-04-20T19:35:00.001-04:00</published><updated>2008-04-20T19:35:38.113-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: filecmp</title><content type='html'>Compare files and directories easily with the &lt;code&gt;filecmp&lt;/code&gt; module.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-filecmp.html"&gt;filecmp&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Compare files and directories on the filesystem.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 2.1 and later&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Example Data:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The examples in the discussion below use these test files:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ ls -Rlast example/&lt;br /&gt;total 0&lt;br /&gt;0 drwxr-xr-x  4 dhellmann  dhellmann  136 Apr 20 17:04 .&lt;br /&gt;0 drwxr-xr-x  9 dhellmann  dhellmann  306 Apr 20 17:04 ..&lt;br /&gt;0 drwxr-xr-x  8 dhellmann  dhellmann  272 Apr 20 17:04 dir1&lt;br /&gt;0 drwxr-xr-x  8 dhellmann  dhellmann  272 Apr 20 17:04 dir2&lt;br /&gt;&lt;br /&gt;example//dir1:&lt;br /&gt;total 32&lt;br /&gt;0 drwxr-xr-x  8 dhellmann  dhellmann  272 Apr 20 17:04 .&lt;br /&gt;0 drwxr-xr-x  4 dhellmann  dhellmann  136 Apr 20 17:04 ..&lt;br /&gt;0 drwxr-xr-x  2 dhellmann  dhellmann   68 Apr 20 17:04 common_dir&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   21 Apr 20 17:04 common_file&lt;br /&gt;0 drwxr-xr-x  2 dhellmann  dhellmann   68 Apr 20 17:04 dir_only_in_dir1&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   22 Apr 20 17:04 file_in_dir1&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   22 Apr 20 17:04 file_only_in_dir1&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   17 Apr 20 17:04 not_the_same&lt;br /&gt;&lt;br /&gt;example//dir2:&lt;br /&gt;total 24&lt;br /&gt;0 drwxr-xr-x  8 dhellmann  dhellmann  272 Apr 20 17:04 .&lt;br /&gt;0 drwxr-xr-x  4 dhellmann  dhellmann  136 Apr 20 17:04 ..&lt;br /&gt;0 drwxr-xr-x  2 dhellmann  dhellmann   68 Apr 20 17:04 common_dir&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   21 Apr 20 17:04 common_file&lt;br /&gt;0 drwxr-xr-x  2 dhellmann  dhellmann   68 Apr 20 17:04 dir_only_in_dir2&lt;br /&gt;0 drwxr-xr-x  2 dhellmann  dhellmann   68 Apr 20 17:04 file_in_dir1&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   22 Apr 20 17:04 file_only_in_dir2&lt;br /&gt;8 -rw-r--r--  1 dhellmann  dhellmann   17 Apr 20 17:04 not_the_same&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The same directory structure is repeated one time under the "common_dir" directories to give interesting recursive comparison options.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Comparing Files:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;filecmp&lt;/code&gt; module includes functions and a class for comparing files and directories on the filesystem.   If you need to compare two files, use the &lt;code&gt;cmp()&lt;/code&gt; function.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;common_file:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/common_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir2/common_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/common_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir2/common_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;                  &lt;span class="n"&gt;shallow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;not_the_same:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/not_the_same&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir2/not_the_same&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/not_the_same&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir2/not_the_same&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;                  &lt;span class="n"&gt;shallow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;identical:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/file_only_in_dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir1/file_only_in_dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1/file_only_in_dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                  &lt;span class="s"&gt;&amp;#39;example/dir1/file_only_in_dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;br /&gt;                  &lt;span class="n"&gt;shallow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;By default, &lt;code&gt;cmp()&lt;/code&gt; looks only at the information available from &lt;code&gt;os.stat()&lt;/code&gt;.  The &lt;em&gt;shallow&lt;/em&gt; argument tells &lt;code&gt;cmp()&lt;/code&gt; whether to look at the contents of the file, as well.  The default is to perform a shallow comparison, without looking inside the files.  Notice that files of the same size created at the same time seem to be the same if their contents are not compared.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_cmp.py&lt;br /&gt;common_file: True True&lt;br /&gt;not_the_same: True False&lt;br /&gt;identical: True True&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To compare a set of files in two directories without recursing, use &lt;code&gt;filecmp.cmpfiles()&lt;/code&gt;.  The arguments are the names of the directories and a list of files to be checked in the two locations.  The list of common files should contain only filenames (directories always seem to result in a mismatch) and the files must be present in both locations.  The code below shows a simple way to build the common list.  If you have a shorter formula, post it in the comments.  The comparison also takes the &lt;em&gt;shallow&lt;/em&gt; flag, just as with &lt;code&gt;cmp()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Determine the items that exist in both directories&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d1_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d2_contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;common&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1_contents&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d2_contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;common_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;br /&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;common&lt;/span&gt; &lt;br /&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;                &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Common files:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;common_files&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Compare the directories&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mismatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmpfiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                                           &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;br /&gt;                                           &lt;span class="n"&gt;common_files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Match:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Mismatch:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mismatch&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Errors:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;cmpfiles()&lt;/code&gt; returns three lists of filenames for files that match, files that do not match, and files that could not be compared (due to permission problems or for any other reason).&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_cmpfiles.py&lt;br /&gt;Common files: ['not_the_same', 'file_in_dir1', 'common_file']&lt;br /&gt;Match: ['not_the_same', 'common_file']&lt;br /&gt;Mismatch: ['file_in_dir1']&lt;br /&gt;Errors: []&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Using dircmp:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The functions described above are suitable for relatively simple comparisons, but for recursive comparison of large directory trees or for more complete analysis, the &lt;code&gt;dircmp&lt;/code&gt; class is more useful.  In its simplest use case, you can print a report comparing two directories with the &lt;code&gt;report()&lt;/code&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The output is a plain-text report showing the results of just the contents of the directories given, without recursing.  In this case, the file "not_the_same" is thought to be the same because the contents are not being compared.  There doesn't seem to be a way to have &lt;code&gt;dircmp&lt;/code&gt; compare the contents of files like &lt;code&gt;cmp()&lt;/code&gt; can.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_report.py&lt;br /&gt;diff example/dir1 example/dir2&lt;br /&gt;Only in example/dir1 : ['dir_only_in_dir1', 'file_only_in_dir1']&lt;br /&gt;Only in example/dir2 : ['dir_only_in_dir2', 'file_only_in_dir2']&lt;br /&gt;Identical files : ['common_file', 'not_the_same']&lt;br /&gt;Common subdirectories : ['common_dir']&lt;br /&gt;Common funny cases : ['file_in_dir1']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;For more detail, and a recursive comparison, use &lt;code&gt;report_full_closure()&lt;/code&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_full_closure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The output includes comparisons of all parallel subdirectories.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_report_full_closure.py&lt;br /&gt;diff example/dir1 example/dir2&lt;br /&gt;Only in example/dir1 : ['dir_only_in_dir1', 'file_only_in_dir1']&lt;br /&gt;Only in example/dir2 : ['dir_only_in_dir2', 'file_only_in_dir2']&lt;br /&gt;Identical files : ['common_file', 'not_the_same']&lt;br /&gt;Common subdirectories : ['common_dir']&lt;br /&gt;Common funny cases : ['file_in_dir1']&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir example/dir2/common_dir&lt;br /&gt;Common subdirectories : ['dir1', 'dir2']&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir2 example/dir2/common_dir/dir2&lt;br /&gt;Identical files : ['common_file', 'file_only_in_dir2', 'not_the_same']&lt;br /&gt;Common subdirectories : ['common_dir', 'dir_only_in_dir2', 'file_in_dir1']&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir2/common_dir example/dir2/common_dir/dir2/common_dir&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir2/dir_only_in_dir2 example/dir2/common_dir/dir2/dir_only_in_dir2&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir2/file_in_dir1 example/dir2/common_dir/dir2/file_in_dir1&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir1 example/dir2/common_dir/dir1&lt;br /&gt;Identical files : ['common_file', 'file_in_dir1', 'file_only_in_dir1', 'not_the_same']&lt;br /&gt;Common subdirectories : ['common_dir', 'dir_only_in_dir1']&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir1/common_dir example/dir2/common_dir/dir1/common_dir&lt;br /&gt;&lt;br /&gt;diff example/dir1/common_dir/dir1/dir_only_in_dir1 example/dir2/common_dir/dir1/dir_only_in_dir1&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Using differences in your program:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Besides producing printed reports, &lt;code&gt;dircmp&lt;/code&gt; calculates useful lists of files you can use in your programs directly.  Each of the following attributes is calculated only when requested, so instantiating a dircmp does not incur a lot of extra overhead.&lt;br /&gt;&lt;br /&gt;The files and subdirectories contained in the directories being compared are listed in &lt;em&gt;left_list&lt;/em&gt; and &lt;em&gt;right_list&lt;/em&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Left :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left_list&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Right:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right_list&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_list.py&lt;br /&gt;Left : ['common_dir', 'common_file', 'dir_only_in_dir1', 'file_in_dir1', 'file_only_in_dir1', 'not_the_same']&lt;br /&gt;Right: ['common_dir', 'common_file', 'dir_only_in_dir2', 'file_in_dir1', 'file_only_in_dir2', 'not_the_same']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The inputs can be filtered by passing a list of names to ignore to the constructor.  By default the names RCS, CVS, and tags are ignored.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;common_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Left :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left_list&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Right:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right_list&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this case, the "common_file" is left out of the list of files to be compared.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_list_filter.py&lt;br /&gt;Left : ['common_dir', 'dir_only_in_dir1', 'file_in_dir1', 'file_only_in_dir1', 'not_the_same']&lt;br /&gt;Right: ['common_dir', 'dir_only_in_dir2', 'file_in_dir1', 'file_only_in_dir2', 'not_the_same']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The set of files common to both input directories is maintained in &lt;em&gt;common&lt;/em&gt;, and the files unique to each directory are listed in &lt;em&gt;left_only&lt;/em&gt;, and &lt;em&gt;right_only&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Common:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Left  :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left_only&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Right :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right_only&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_membership.py&lt;br /&gt;Common: ['not_the_same', 'common_file', 'file_in_dir1', 'common_dir']&lt;br /&gt;Left  : ['dir_only_in_dir1', 'file_only_in_dir1']&lt;br /&gt;Right : ['dir_only_in_dir2', 'file_only_in_dir2']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The common members can be further broken down into files, directories and "funny" items (anything that has a different type in the two directories or where there is an error from os.stat()).&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Common     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Directories:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_dirs&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Files      :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_files&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Funny      :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_funny&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In the example data, the item named "file_in_dir1" is a file in one directory and a subdirectory in the other, so it shows up in the "funny" list.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_common.py&lt;br /&gt;Common     : ['not_the_same', 'common_file', 'file_in_dir1', 'common_dir']&lt;br /&gt;Directories: ['common_dir']&lt;br /&gt;Files      : ['not_the_same', 'common_file']&lt;br /&gt;Funny      : ['file_in_dir1']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The differences between files are broken down similarly:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Same      :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;same_files&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Different :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diff_files&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Funny     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funny_files&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Remember, the file "not_the_same" is only being compared via os.stat, and the contents are not examined.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_diff.py&lt;br /&gt;Same      : ['not_the_same', 'common_file']&lt;br /&gt;Different : []&lt;br /&gt;Funny     : []&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Finally, the subdirectories are also mapped to new &lt;code&gt;dircmp&lt;/code&gt; objects in the attribute &lt;em&gt;subdirs&lt;/em&gt; to allow easy recursive comparison.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;filecmp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filecmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dircmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;example/dir1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;example/dir2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Subdirectories:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subdirs&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python filecmp_dircmp_subdirs.py&lt;br /&gt;Subdirectories:&lt;br /&gt;{'common_dir': &amp;lt;filecmp.dircmp instance at 0x85da0&amp;gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.50.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/pymotw-filecmp.html' title='PyMOTW: filecmp'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=3912700715364565667' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/3912700715364565667/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/3912700715364565667'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/3912700715364565667'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-1481173773557024751</id><published>2008-04-20T17:40:00.001-04:00</published><updated>2008-04-20T17:40:58.414-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>tools for literate programming with Python?</title><content type='html'>I've had an idea kicking around in my head for a couple of days.  It's one of those things I just can't seem to let go of, but I don't really have time to build it right now.  I'm hoping someone out there had the same idea already and written something that works sort of like what I want.  Failing that, maybe someone looking for a project to start will like this idea.&lt;br /&gt;&lt;br /&gt;I've seen discussions in the past of something called "literate programming".  My understanding of the gist of the idea is that you write prose and code together in a file, then use a set of tools to split them apart as part of a build process.  The benefits are supposed to be exceptionally well documented code, since you're essentially writing the documentation first and code later.  I never really bought into that idea; it seemed like a lot of extra overhead.  Unless you're writing libraries to be shared by other developers there's just not a need for so much documentation.&lt;br /&gt;&lt;br /&gt;On the other hand, if what you're doing is writing &lt;em&gt;about&lt;/em&gt; code, then it seems like a great idea.  I've been doing a lot of writing about code lately, so I want to see if I can improve my tools.  I'm specifically thinking of this for working on my Python Module of the Week series, but it could be useful in other areas as well.  The way I blog now means that I have to make sure I regenerate all examples before posting, in case I've edited any source files along the way.  So my cycle goes: read docs, write code, write description (pasting in code and examples), &lt;em&gt;change code&lt;/em&gt;, fix pasted code and examples, repeat until done.&lt;br /&gt;&lt;br /&gt;A quick &lt;a href="http://www.google.com/search?q=literate+programming+python&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a"&gt;Google search&lt;/a&gt; turned up a few tools I need to look into, but I'm not sure what I envision is literate programming as originally defined.&lt;br /&gt;&lt;br /&gt;I want a tool that lets me write prose and code in the same file, then extract the code for use separately, but also &lt;em&gt;run&lt;/em&gt; the code and re-process the input file.   The idea would be to edit a single file, mark the sections that are code, mark an output area for each code block.  I would then use a tool to extract and run the code with the output inserted &lt;em&gt;back into the original file&lt;/em&gt; (replacing any output from previous runs, of course).  Ideally the source file would be HTML or something close, since I have to convert to that for posting anyway.  I would rather not have to learn some random new markup language that I could only use with this one tool, but something like Markdown or reST would be ok.  &lt;br /&gt;&lt;br /&gt;It doesn't seem like it would be that complicated to write a tool to do what I want using a library like BeautifulSoup to find the source blocks and output destinations.  And I could set up my own trigger in TextMate to run it, so I wouldn't have to change editors.  Before I spend a bunch of time implementing something I could just download, though, I thought it would be prudent to ask a couple of Dear Lazy Web questions:&lt;br /&gt;&lt;br /&gt;1. &lt;strong&gt;Does something like what I describe exist?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;2. &lt;strong&gt;If not, what literate programming tools for Python do you recommend?&lt;/strong&gt;  I may use them as inspiration for a design.&lt;br /&gt;&lt;br /&gt;Thanks in advance for any suggestions.&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/tools-for-literate-programming-with.html' title='tools for literate programming with Python?'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=1481173773557024751' title='12 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/1481173773557024751/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/1481173773557024751'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/1481173773557024751'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-9162515463907765843</id><published>2008-04-13T19:37:00.001-04:00</published><updated>2008-04-13T19:37:49.771-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: fnmatch</title><content type='html'>Handle Unix-style filename comparison with the &lt;code&gt;fnmatch&lt;/code&gt; module.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-fnmatch.html"&gt;fnmatch&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Compare filenames against Unix-style glob patterns.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The &lt;code&gt;fnmatch&lt;/code&gt; module is used to compare filenames against glob-style patterns such as used by Unix shells.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Simple Matching:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;fnmatch()&lt;/code&gt; compares a single filename against a pattern and returns a boolean indicating whether or not they match.  If the operating system uses a case-insensitive filesystem, the comparison is not case sensitive.  Otherwise it is.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fnmatch&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fnmatch_*.py&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Pattern :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Filename: &lt;/span&gt;&lt;span class="si"&gt;%-25s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this example, the pattern matches all files starting with 'fnmatch_' and ending in '.py'.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python fnmatch_fnmatch.py&lt;br /&gt;Pattern : fnmatch_*.py&lt;br /&gt;&lt;br /&gt;Filename: .svn                      False&lt;br /&gt;Filename: __init__.py               False&lt;br /&gt;Filename: fnmatch_filter.py         True&lt;br /&gt;Filename: fnmatch_fnmatch.py        True&lt;br /&gt;Filename: fnmatch_fnmatchcase.py    True&lt;br /&gt;Filename: fnmatch_translate.py      True&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To force a case-sensitive comparison, regardless of the filesystem and operating system settings, use &lt;code&gt;fnmatchcase()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fnmatch&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FNMATCH_*.PY&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Pattern :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Filename: &lt;/span&gt;&lt;span class="si"&gt;%-25s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fnmatchcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since my laptop uses a case-sensitive filesystem, no files match the modified pattern.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python fnmatch_fnmatchcase.py&lt;br /&gt;Pattern : FNMATCH_*.PY&lt;br /&gt;&lt;br /&gt;Filename: .svn                      False&lt;br /&gt;Filename: __init__.py               False&lt;br /&gt;Filename: fnmatch_filter.py         False&lt;br /&gt;Filename: fnmatch_fnmatch.py        False&lt;br /&gt;Filename: fnmatch_fnmatchcase.py    False&lt;br /&gt;Filename: fnmatch_translate.py      False&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Filtering:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;To test a sequence of filenames, you can use &lt;code&gt;filter()&lt;/code&gt;.  It returns a list of the names that match the pattern argument.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fnmatch&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fnmatch_*.py&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Pattern :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Files   :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Matches :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In this example, &lt;code&gt;filter()&lt;/code&gt; returns the list of names of the example source files associated with this post.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python fnmatch_filter.py&lt;br /&gt;Pattern : fnmatch_*.py&lt;br /&gt;Files   : ['.svn', '__init__.py', 'fnmatch_filter.py', 'fnmatch_fnmatch.py', 'fnmatch_fnmatchcase.py', 'fnmatch_translate.py']&lt;br /&gt;Matches : ['fnmatch_filter.py', 'fnmatch_fnmatch.py', 'fnmatch_fnmatchcase.py', 'fnmatch_translate.py']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Translating Patterns:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Internally, &lt;code&gt;fnmatch&lt;/code&gt; converts the glob pattern to a regular expression and uses the &lt;code&gt;re&lt;/code&gt; module to compare the name and pattern.  The &lt;code&gt;translate()&lt;/code&gt; function is the public API for converting glob patterns to regular expressions.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fnmatch&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fnmatch_*.py&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Pattern :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Regex   :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that some of the characters are escaped to make a valid expression.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python fnmatch_translate.py&lt;br /&gt;Pattern : fnmatch_*.py&lt;br /&gt;Regex   : fnmatch\_.*\.py$&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://blog.doughellmann.com/2007/07/pymotw-glob.html"&gt;PyMOTW: glob&lt;/a&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/module-glob.html"&gt;glob module documentation&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.49.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/pymotw-fnmatch.html' title='PyMOTW: fnmatch'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=9162515463907765843' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/9162515463907765843/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/9162515463907765843'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/9162515463907765843'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-6104160320732190397</id><published>2008-04-13T08:34:00.001-04:00</published><updated>2008-04-13T08:34:41.886-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='programming'/><category scheme='http://www.blogger.com/atom/ns#' term='blogging'/><title type='text'>Shell history, jigs, &amp; subversion</title><content type='html'>&lt;a href="http://agiletesting.blogspot.com/2008/04/meme-du-jour-shell-history.html"&gt;Everyone&lt;/a&gt; &lt;a href="http://www.dehora.net/journal/2008/04/10/that-looks-about-right/"&gt;else&lt;/a&gt; &lt;a href="http://lucumr.pocoo.org/cogitations/2008/04/10/shell-history/"&gt;is&lt;/a&gt; &lt;a href="http://holdenweb.blogspot.com/2008/04/meme-du-jour.html"&gt;showing&lt;/a&gt; &lt;a href="http://compoundthinking.com/blog/index.php/2008/04/11/command-line-meme/"&gt;theirs&lt;/a&gt;, so here's mine:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;$ history|awk '{a[$2]++} END{for(i in a){printf "%5d\t%s\n",a[i],i}}'|sort -rn|head&lt;br /&gt;  162   svn&lt;br /&gt;   99   ls&lt;br /&gt;   80   &lt;em&gt;rtop&lt;/em&gt;&lt;br /&gt;   69   sudo&lt;br /&gt;   63   cd&lt;br /&gt;   55   &lt;em&gt;dotest&lt;/em&gt;&lt;br /&gt;   51   &lt;em&gt;workon&lt;/em&gt;&lt;br /&gt;   23   make&lt;br /&gt;   21   &lt;em&gt;close_branch&lt;/em&gt;&lt;br /&gt;   21   &lt;em&gt;cl2svn&lt;/em&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Software Jigs:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Does it say anything in particular about me that half of those commands are aliases or scripts I or my co-workers have created to wrap up other tools?&lt;br /&gt;&lt;br /&gt;&lt;em&gt;rtop&lt;/em&gt; - is a bash alias to change directory to the top of sandbox.  I have an environment variable pointing there, too, but I guess I don't like typing $.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;dotest&lt;/em&gt; - is an alias to run tests with our tracing module turned on, preserving the output in the same log file each time.  We have a very verbose trace module that prints function inputs and outputs as our program executes.  It is superior to logging for low-level debugging, but entirely unsuitable for production use (it's easy to turn on and off).&lt;br /&gt;&lt;br /&gt;&lt;em&gt;workon&lt;/em&gt; - is a shell function that swaps out different sandboxes so I can work on multiple branches on the same system. Our test framework requires an installed version of the whole system, unfortunately, and I don't like to mix patches from multiple branches by copying files into the install tree.  Running workon rearranges symlinks so I can replace the install tree with the build tree from my sandbox of choice.  Shell functions are an under-appreciated implementation technique for something that has to operate on the current environment (workon changes directory to the new sandbox) but is more complicated than what would fit in an alias.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;close_branch&lt;/em&gt; - is a bash script that takes a short branch name and deletes the branch and any "rebase" branches based on it using the long URL.  We have a whole set of little scripts like this that we've written in house.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;cl2svn&lt;/em&gt; - finds changes in ChangeLog files in my svn sandbox, extracts the new messages, and produces a single (sorted) output list formatted nicely to show up in trac.  We use ChangeLog files and trac commit messages as part of the documentation for our code review process, so having everything formatted nicely is important.  I used to do this by hand, but after one particularly large changeset I came up with this Python app to do the work for me.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Wrapping Subversion:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I mentioned close_branch as a subversion wrapper.  There's a make_branch script, too, to save from making typos in long URLs.  &lt;br /&gt;&lt;br /&gt;Another shell function, mksbox, finds a free sandbox in my pool and switches it to use a particular branch.  Our build tree is pretty large, so it is way more efficient to just keep a bunch of sandboxes around and switch them to point to different branches with "svn switch" instead of checking out a full copy every time.&lt;br /&gt;&lt;br /&gt;My favorite, though, is merge_branch, which figures out the start point of a svn branch and merges all of the changes from that branch into   the current sandbox.  I'm a little surprised that make_branch and merge_branch didn't show up higher in the list, but they're in the top 20.&lt;br /&gt;&lt;br /&gt;We wrote these wrapper scripts a couple of years ago, when we switched from CVS to svn.  We had similar tools for CVS, but branching worked differently and we didn't use branches as often then.  Now every ticket gets its own branch, so managing branches is a daily operation.  A typical development cycle for me looks something like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;$ make_branch 6583 # that's a trac ticket number&lt;br /&gt;$ mksbox 6583 # automatically does a workon for that sandbox&lt;br /&gt;$ dcctl restart # restart our daemon services to pick up the sandbox change&lt;br /&gt;# add feature or remove bug&lt;br /&gt;# update ChangeLog files&lt;br /&gt;$ cl2svn | tee changes.txt&lt;br /&gt;$ svn commit -F changes.txt&lt;br /&gt;# request code review for changeset&lt;br /&gt;$ prepare4commit.sh # switch current sandbox to trunk &amp; merge in the branch&lt;br /&gt;$ docommit # commit, using the first line of changes.txt for log message&lt;br /&gt;$ close_branch 6583 # clean up after myself&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;When we switched off of CVS, we had some particular needs that weren't met by svn directly (especially the way we do code reviews).  There are a whole &lt;a href="http://subversion.tigris.org/links.html"&gt;host of tools&lt;/a&gt; for wrapping svn out there now.  &lt;a href="http://code.google.com/p/sv-subversion/"&gt;sv-subversion&lt;/a&gt; looks interesting, but I haven't tried it.  If our code didn't make assumptions about the install path, we could probably just use &lt;code&gt;DivmodCombinator&lt;/code&gt;, which looks like it has a lot of the features we've rolled ourselves, but the inertia for changing now is pretty high, and the benefits aren't great enough.&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/shell-history-jigs-subversion.html' title='Shell history, jigs, &amp;amp; subversion'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=6104160320732190397' title='0 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/6104160320732190397/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/6104160320732190397'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/6104160320732190397'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-3964724940388114661</id><published>2008-04-06T16:14:00.001-04:00</published><updated>2008-04-06T16:14:45.915-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='virtualenvwrapper'/><category scheme='http://www.blogger.com/atom/ns#' term='python'/><title type='text'>New release: virtualenvwrapper</title><content type='html'>Last week I finally cleaned up the wrapper code I've been using with Ian Bicking's &lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;.  The results are a set of bash functions imaginatively dubbed "&lt;a href="http://www.doughellmann.com/projects/virtualenvwrapper/"&gt;virtualenvwrapper&lt;/a&gt;".&lt;br /&gt;&lt;br /&gt;The basic idea is that you source the script in your &lt;code&gt;~/.bashrc&lt;/code&gt;, and then you can use the functions it defines to manage your virtual environments, either from other scripts or from the command line.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;mkvirtualenv&lt;/code&gt; is a thin wrapper around virtualenv itself, and creates environments in a special directory, which you can control through the WORKON_HOME variable.  Now that I think of it, that variable should probably have a different name.  Oh, well.&lt;br /&gt;&lt;br /&gt;Most of the time, you'll use the function &lt;code&gt;workon&lt;/code&gt;.  Without arguments, it will list the environments you have available.  With a single argument, it switches to that environment.&lt;br /&gt;&lt;br /&gt;Once you're done with an environment, use &lt;code&gt;rmvirtualenv&lt;/code&gt; to remove it.&lt;br /&gt;&lt;br /&gt;So it's nothing earth-shattering, but I find it very useful.  I put it together because I create and delete virtual environments so frequently -- one per article and column for the magazine, plus one for each of my own projects -- that I really needed to enforce some sanity around them.&lt;br /&gt;&lt;br /&gt;In addition to the organization, the extra feature &lt;code&gt;workon&lt;/code&gt; adds is &lt;em&gt;activation hooks&lt;/em&gt; for the environment.  Each time you switch environments, &lt;code&gt;workon&lt;/code&gt; looks for (and runs) &lt;code&gt;$VIRTUAL_ENV/bin/predeactivate&lt;/code&gt; in the current environment (before switching) and &lt;code&gt;$VIRTUAL_ENV/bin/postactivate&lt;/code&gt; in the new environment (after switching).  The hooks are intended for saving editor state, loading new project files, etc.&lt;br /&gt;&lt;br /&gt;For now there's just one file, but I'm still distributing it in a versioned tarball because that's just easier with my existing workflow and release tools.  I'm not sure how to use distutils with a bash script, or even if that's a good idea, so it's a manual download, too.&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/new-release-virtualenvwrapper.html' title='New release: virtualenvwrapper'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=3964724940388114661' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/3964724940388114661/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/3964724940388114661'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/3964724940388114661'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-4546041117081683114</id><published>2008-04-06T15:35:00.001-04:00</published><updated>2008-04-06T15:35:27.305-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><category scheme='http://www.blogger.com/atom/ns#' term='blogging'/><title type='text'>One year of "The Python Module of the Week"</title><content type='html'>It's a bit passé to recognize blogging anniversaries, but as it's my first I'm going to do a little &lt;strike&gt;navel gazing&lt;/strike&gt; retrospecting anyway.  :-)&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;I just realized this afternoon that I had missed celebrating the first anniversary of PyMOTW by a few weeks.  I started the series as an excuse to force myself to write &lt;em&gt;something&lt;/em&gt; once a week.  At the time, it seemed like a somewhat lame idea and I wasn't sure I would keep it up.  There are any number of reference guides for the standard library out there.  Sitting down to read through one isn't that exciting, though, so I thought writing example code with all of the modules would be a way to force myself to actually study the modules I didn't use on a regular basis.&lt;br /&gt;&lt;br /&gt;The &lt;a href="http://blog.doughellmann.com/2007/03/pymotw-fileinput.html"&gt;first real post&lt;/a&gt; from 25 March 2007 covered the fileinput module.  It wasn't until several posts into the series that I started collecting and releasing the code through PyPI, so the version number for the source package is only up to 1.48 even though I've done more than 52 weeks worth of modules.  (The &lt;code&gt;os&lt;/code&gt; module took 4 weeks, so I haven't done as many modules as weeks of posts.)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;My Writing Process:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;My process for creating the posts has changed substantially over the last year.  The first few posts were posted through the web form on blogger.com.  They consisted of a lot of hand-edited HTML combined with output from the web version of &lt;a href="http://pygments.org/"&gt;pygments&lt;/a&gt; (used to highlight the syntax in the code examples).  I also  used to write the prosoe for each post first, and the code samples later.&lt;br /&gt;&lt;br /&gt;Now, I have the entire process reversed.  I work through all of the code examples before writing any prose.  The code comes more quickly, and I can revise and refactor it so the examples work together without having to go back and edit the rest of the text. Once I have the code finished, I use a combination of shortcuts I've built for &lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt; and &lt;a href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt; to assemble the post and write the prose portions.  It takes me a &lt;em&gt;lot&lt;/em&gt; less time to create a single post now that I've refined the workflow.  The post on the operator module from today, for example, only took a couple of hours (with interruptions).  It is a little skimpy on prose, though.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Future Plans:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Since the beginning, I've had a fair number of comments (online and off) from people who tell me that the posts have been personally useful to them.  I appreciate that sort of feedback, and it motivates me to keep going.  I'm running out of the "simple" modules, and as I've also started working on Python Magazine over the past year, I don't actually have the same amount of free time any more.  Having a bit of extra motivation will spur me to pick up some of the bigger modules like email and elementtree.&lt;br /&gt;&lt;br /&gt;At the rate I'm going, I'm not going to finish the whole library before &lt;a href="http://www.python.org/dev/peps/pep-0361/"&gt;Python 3.0 comes out&lt;/a&gt;, and the &lt;a href="http://www.python.org/dev/peps/pep-3100/#standard-library"&gt;current plans&lt;/a&gt; call for some modules to be removed, deprecated APIs to be dropped, and other sorts of changes.  &lt;a href="http://www.python.org/dev/peps/pep-3001/"&gt;The rules&lt;/a&gt; say some modules can even be renamed.  When that settles down and there is an actual release, I'll probably stop writing about 2.x and pick up with 3.0.  I haven't decided yet, though.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;&lt;em&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/one-year-of-python-module-of-week.html' title='One year of &amp;quot;The Python Module of the Week&amp;quot;'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=4546041117081683114' title='11 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/4546041117081683114/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/4546041117081683114'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/4546041117081683114'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-4277593018854339371</id><published>2008-04-06T14:43:00.001-04:00</published><updated>2008-04-06T14:43:07.985-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: operator</title><content type='html'>The &lt;code&gt;operator&lt;/code&gt; module contains functions that perform the same operations as man of the built-in operators.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-operator.html"&gt;operator&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Functional interface to built-in operators.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Description:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Functional programming using iterators occasionally requires you to create small functions for simple expressions.  Sometimes these can be expressed as &lt;code&gt;lambda&lt;/code&gt; functions.  But for some operations, you don't need to define your own function at all.  The operator module defines functions that correspond to built-in operations for arithmetic, and comparison as well as sequence and dictionary operations.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Logical Operations:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;There are logical operations for determining the boolean equivalent for a value, negating that to create the opposite boolean value, and comparing objects to see if they are identical.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;not_(a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;not_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;truth(a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;truth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;is_(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;is_not(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_boolean.py&lt;br /&gt;a = -1&lt;br /&gt;b = 5&lt;br /&gt;not_(a): False&lt;br /&gt;truth(a): True&lt;br /&gt;is_(a, b): False&lt;br /&gt;is_not(a, b): True&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Comparison Operators:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;All of the rich comparison operators are supported:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(a, b):&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_comparisons.py&lt;br /&gt;a = 1&lt;br /&gt;b = 5.0&lt;br /&gt;lt(a, b): True&lt;br /&gt;le(a, b): True&lt;br /&gt;eq(a, b): False&lt;br /&gt;ne(a, b): True&lt;br /&gt;ge(a, b): False&lt;br /&gt;gt(a, b): False&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Arithmetic Operators:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The arithmetic operators for manipulating numerical values are also supported.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Positive/Negative:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abs(a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;neg(a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;neg(b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pos(a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pos(b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Arithmetic:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;add(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;div(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;div(d, c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;floordiv(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floordiv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;floordiv(d, c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floordiv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mod(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mul(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pow(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sub(b, a):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;truediv(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;truediv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;truediv(d, c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;truediv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Bitwise:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;and_(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;invert(c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lshift(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;or_(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rshift(d, c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xor(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice the two division operators: &lt;code&gt;floordiv&lt;/code&gt; (pre-3.0 integer division) and &lt;code&gt;truediv&lt;/code&gt; (floating point division).&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_math.py&lt;br /&gt;a = -1&lt;br /&gt;b = 5.0&lt;br /&gt;c = 2&lt;br /&gt;d = 6&lt;br /&gt;&lt;br /&gt;Positive/Negative:&lt;br /&gt;abs(a): 1&lt;br /&gt;neg(a): 1&lt;br /&gt;neg(b): -5.0&lt;br /&gt;pos(a): -1&lt;br /&gt;pos(b): 5.0&lt;br /&gt;&lt;br /&gt;Arithmetic:&lt;br /&gt;add(a, b): 4.0&lt;br /&gt;div(a, b): -0.2&lt;br /&gt;div(d, c): 3&lt;br /&gt;floordiv(a, b): -1.0&lt;br /&gt;floordiv(d, c): 3&lt;br /&gt;mod(a, b): 4.0&lt;br /&gt;mul(a, b): -5.0&lt;br /&gt;pow(c, d): 64&lt;br /&gt;sub(b, a): 6.0&lt;br /&gt;truediv(a, b): -0.2&lt;br /&gt;truediv(d, c): 3.0&lt;br /&gt;&lt;br /&gt;Bitwise:&lt;br /&gt;and_(c, d): 2&lt;br /&gt;invert(c): -3&lt;br /&gt;lshift(c, d): 128&lt;br /&gt;or_(c, d): 6&lt;br /&gt;rshift(d, c): 1&lt;br /&gt;xor(c, d): 4&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Sequence Operators:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The operators for working with sequences can be divided into roughly 4 groups for building up sequences, searching, working with items, and removing items from sequences.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Constructive:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;concat(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;repeat(a, 3):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Searching:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;contains(a, 1):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;contains(b, &amp;quot;d&amp;quot;):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;countOf(a, 1):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;countOf(b, &amp;quot;d&amp;quot;):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;indexOf(a, 5):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Access Items:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getitem(b, 1):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getitem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;getslice(a, 1, 3)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getslice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;setitem(b, 1, &amp;quot;d&amp;quot;):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setitem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,after b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;setslice(a, 1, 3, [4, 5]):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setslice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;, after a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Destructive:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;delitem(b, 1):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delitem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,after b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;delslice(a, 1, 3):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delslice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;, after a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_sequences.py&lt;br /&gt;a = [1, 2, 3]&lt;br /&gt;b = ['a', 'b', 'c']&lt;br /&gt;&lt;br /&gt;Constructive:&lt;br /&gt;concat(a, b): [1, 2, 3, 'a', 'b', 'c']&lt;br /&gt;repeat(a, 3): [1, 2, 3, 1, 2, 3, 1, 2, 3]&lt;br /&gt;&lt;br /&gt;Searching:&lt;br /&gt;contains(a, 1): True&lt;br /&gt;contains(b, "d"): False&lt;br /&gt;countOf(a, 1): 1&lt;br /&gt;countOf(b, "d"): 0&lt;br /&gt;indexOf(a, 5): 0&lt;br /&gt;&lt;br /&gt;Access Items:&lt;br /&gt;getitem(b, 1): b&lt;br /&gt;getslice(a, 1, 3) [2, 3]&lt;br /&gt;setitem(b, 1, "d"): None ,after b = ['a', 'd', 'c']&lt;br /&gt;setslice(a, 1, 3, [4, 5]): None , after a = [1, 4, 5]&lt;br /&gt;&lt;br /&gt;Destructive:&lt;br /&gt;delitem(b, 1): None ,after b = ['a', 'c']&lt;br /&gt;delslice(a, 1, 3): None , after a = [1]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;In-place Operators:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In addition to the standard operators, many types of objects support "in-place" modification through special operators such as &lt;code&gt;+=&lt;/code&gt;.  There are equivalent functions for in-place modifications, too:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;iadd(a, b):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a = iadd(a, b) =&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;iconcat(c, d):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iconcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iconcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c = iconcat(c, d) =&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;These examples only demonstrate a couple of the functions.  Refer to the stdlib documentation for complete details.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_inplace.py&lt;br /&gt;a = -1&lt;br /&gt;b = 5.0&lt;br /&gt;c = [1, 2, 3]&lt;br /&gt;d = ['a', 'b', 'c']&lt;br /&gt;iadd(a, b): 4.0&lt;br /&gt;a = iadd(a, b) =&amp;gt; 4.0&lt;br /&gt;iconcat(c, d): [1, 2, 3, 'a', 'b', 'c']&lt;br /&gt;c = iconcat(c, d) =&amp;gt; [1, 2, 3, 'a', 'b', 'c', 'a', 'b', 'c']&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Attribute and Item "Getters":&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;One of the most unusual features of the &lt;code&gt;operator&lt;/code&gt; module is the notion of "getters".  These are callable objects constructed at runtime to retrieve attributes of items from objects or sequences.  Getters are especially useful when working with iterators or generator sequences, where they are intended to incur less overhead than a lambda or Python function.&lt;br /&gt;&lt;br /&gt;Attribute getters work like &lt;code&gt;lambda x, n='attrname': getattr(x, n)&lt;/code&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;example class for attrgetter&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;MyObj(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_attrgetter.py&lt;br /&gt;[MyObj(0), MyObj(1), MyObj(2), MyObj(3), MyObj(4)]&lt;br /&gt;[0, 1, 2, 3, 4]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;While item getters work like &lt;code&gt;lambda x, y=5: x[y]&lt;/code&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dictionaries:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;val&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Tuples:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Item getters work with mappings as well as sequences.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_itemgetter.py&lt;br /&gt;Dictionaries:&lt;br /&gt;[{'val': 0}, {'val': 1}, {'val': 2}, {'val': 3}, {'val': 4}]&lt;br /&gt;[0, 1, 2, 3, 4]&lt;br /&gt;Tuples:&lt;br /&gt;[(0, 0), (1, 2), (2, 4), (3, 6), (4, 8)]&lt;br /&gt;[0, 2, 4, 6, 8]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Working With Your Own Classes:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The functions in the &lt;code&gt;operator&lt;/code&gt; module work via the standard Python interfaces for their operations, so they work with your classes as well as the builtin types.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Example for operator overloading&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;MyObj(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;compare for less-than&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Testing &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;lt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;add values&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Adding &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; + &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_classes.py&lt;br /&gt;Testing MyObj(1) &amp;lt; MyObj(2)&lt;br /&gt;True&lt;br /&gt;Adding MyObj(1) + MyObj(2)&lt;br /&gt;MyObj(3)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Type Checking:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Besides the actual operators, there are functions for testing API compliance for mapping, number, and sequence types.  The tests are not perfect, since the interfaces are not strictly defined, but they do give you some idea of what is supported.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NoType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Supports none of the type APIs&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Supports multiple type APIs&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mapping&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__int__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NoType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MultiType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isMappingType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isNumberType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isSequenceType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(o):&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(t):&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python operator_typechecking.py&lt;br /&gt;isMappingType(o): False&lt;br /&gt;isMappingType(t): True&lt;br /&gt;isNumberType(o): False&lt;br /&gt;isNumberType(t): True&lt;br /&gt;isSequenceType(o): False&lt;br /&gt;isSequenceType(t): True&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/305318"&gt;ASPN: Python Cookbook: using the operator module w/map (plus a bit on itertools and generator exp)&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.48.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/04/pymotw-operator.html' title='PyMOTW: operator'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=4277593018854339371' title='2 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/4277593018854339371/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/4277593018854339371'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/4277593018854339371'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-4506459367018338034</id><published>2008-03-30T13:54:00.001-04:00</published><updated>2008-03-30T13:55:50.269-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: urllib</title><content type='html'>The urllib module provides a simple interface for network resource access.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-urllib.html"&gt;urllib&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Accessing remote resources that don't need authentication, cookies, etc.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 1.4 and later&lt;br /&gt;&lt;br /&gt;&lt;em&gt;Although &lt;code&gt;urllib&lt;/code&gt; can be used with gopher and ftp, these examples all use http.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;HTTP GET:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;The test server for these examples is in &lt;tt&gt;BaseHTTPServer_GET.py&lt;/tt&gt;, from the PyMOTW examples for the &lt;code&gt;BaseHTTPServer&lt;/code&gt; module.  Start the server in one terminal window, then run these examples in another.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;An HTTP GET operation is the simplest use of &lt;code&gt;urllib&lt;/code&gt;.  Simply pass the URL to &lt;code&gt;urlopen()&lt;/code&gt; to get a "file-like" handle to the remote data.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://localhost:8080/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;RESPONSE:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;URL     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geturl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DATE    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;HEADERS :&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;---------&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;LENGTH  :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DATA    :&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;---------&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The example server takes the incoming values and formats a plain text response to send back.  The return value from &lt;code&gt;urlopen()&lt;/code&gt; gives access to the headers from the HTTP server through the info() method, and the data for the remote resource via methods like &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;readlines()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlopen.py&lt;br /&gt;RESPONSE: &amp;lt;addinfourl at 10180248 whose fp = &amp;lt;socket._fileobject object at 0x935c30&amp;gt;&amp;gt;&lt;br /&gt;URL     : http://localhost:8080/&lt;br /&gt;DATE    : Sun, 30 Mar 2008 16:27:10 GMT&lt;br /&gt;HEADERS :&lt;br /&gt;---------&lt;br /&gt;Server: BaseHTTP/0.3 Python/2.5.1&lt;br /&gt;Date: Sun, 30 Mar 2008 16:27:10 GMT&lt;br /&gt;&lt;br /&gt;LENGTH  : 221&lt;br /&gt;DATA    :&lt;br /&gt;---------&lt;br /&gt;CLIENT VALUES:&lt;br /&gt;client_address=('127.0.0.1', 54354) (localhost)&lt;br /&gt;command=GET&lt;br /&gt;path=/&lt;br /&gt;real path=/&lt;br /&gt;query=&lt;br /&gt;request_version=HTTP/1.0&lt;br /&gt;&lt;br /&gt;SERVER VALUES:&lt;br /&gt;server_version=BaseHTTP/0.3&lt;br /&gt;sys_version=Python/2.5.1&lt;br /&gt;protocol_version=HTTP/1.0&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The file-like object is also iterable:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://localhost:8080/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since the lines are returned with newlines and carriage returns intact, this example strips them before printing the output.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlopen_iterator.py&lt;br /&gt;CLIENT VALUES:&lt;br /&gt;client_address=('127.0.0.1', 54380) (localhost)&lt;br /&gt;command=GET&lt;br /&gt;path=/&lt;br /&gt;real path=/&lt;br /&gt;query=&lt;br /&gt;request_version=HTTP/1.0&lt;br /&gt;&lt;br /&gt;SERVER VALUES:&lt;br /&gt;server_version=BaseHTTP/0.3&lt;br /&gt;sys_version=Python/2.5.1&lt;br /&gt;protocol_version=HTTP/1.0&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Encoding Arguments:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Arguments can be passed to the server by encoding them and appending them to the URL.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;query_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;query string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;encoded_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Encoded:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_args&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080/?&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;encoded_args&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that the &lt;em&gt;query&lt;/em&gt;, in the list of client values, contains the encoded query arguments.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlencode.py&lt;br /&gt;Encoded: q=query+string&amp;foo=bar&lt;br /&gt;CLIENT VALUES:&lt;br /&gt;client_address=('127.0.0.1', 54415) (localhost)&lt;br /&gt;command=GET&lt;br /&gt;path=/?q=query+string&amp;foo=bar&lt;br /&gt;real path=/&lt;br /&gt;query=q=query+string&amp;foo=bar&lt;br /&gt;request_version=HTTP/1.0&lt;br /&gt;&lt;br /&gt;SERVER VALUES:&lt;br /&gt;server_version=BaseHTTP/0.3&lt;br /&gt;sys_version=Python/2.5.1&lt;br /&gt;protocol_version=HTTP/1.0&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To pass a sequence of values using separate occurrences of the variable in the query string, pass &lt;code&gt;doseq=True&lt;/code&gt; to &lt;code&gt;urlencode()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;query_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Single  :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Sequence:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doseq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlencode_doseq.py&lt;br /&gt;Single  : foo=%5B%27foo1%27%2C+%27foo2%27%5D&lt;br /&gt;Sequence: foo=foo1&amp;foo=foo2&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To decode the query string, see the &lt;code&gt;FieldStorage&lt;/code&gt; class from the &lt;code&gt;cgi&lt;/code&gt; module.&lt;br /&gt;&lt;br /&gt;Special characters within the query arguments that might cause parse problems with the URL on the server side are "quoted" when passed to &lt;code&gt;urlencode()&lt;/code&gt;.  To quote them locally to make safe versions of the strings, you can use the &lt;code&gt;quote()&lt;/code&gt; or &lt;code&gt;quote_plus()&lt;/code&gt; functions directly.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080/~dhellmann/&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;urlencode() :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;quote()     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;quote_plus():&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that &lt;code&gt;quote_plus()&lt;/code&gt; is more aggressive about the characters it replaces.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_quote.py&lt;br /&gt;urlencode() : url=http%3A%2F%2Flocalhost%3A8080%2F%7Edhellmann%2F&lt;br /&gt;quote()     : http%3A//localhost%3A8080/%7Edhellmann/&lt;br /&gt;quote_plus(): http%3A%2F%2Flocalhost%3A8080%2F%7Edhellmann%2F&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;To reverse the quote operations, use &lt;code&gt;unquote()&lt;/code&gt; or &lt;code&gt;unquote_plus()&lt;/code&gt;, as appropriate.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http%3A//localhost%3A8080/&lt;/span&gt;&lt;span class="si"&gt;%7E&lt;/span&gt;&lt;span class="s"&gt;dhellmann/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http%3A&lt;/span&gt;&lt;span class="si"&gt;%2F%2F&lt;/span&gt;&lt;span class="s"&gt;localhost%3A8080&lt;/span&gt;&lt;span class="si"&gt;%2F%7E&lt;/span&gt;&lt;span class="s"&gt;dhellmann&lt;/span&gt;&lt;span class="si"&gt;%2F&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_unquote.py&lt;br /&gt;http://localhost:8080/~dhellmann/&lt;br /&gt;http://localhost:8080/~dhellmann/&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;HTTP POST:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;em&gt;The test server for these examples is in &lt;tt&gt;BaseHTTPServer_POST.py&lt;/tt&gt;, from the PyMOTW examples for the &lt;code&gt;BaseHTTPServer&lt;/code&gt; module.  Start the server in one terminal window, then run these examples in another.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;To POST data to the remote server, instead of using GET, simply pass the encoded query arguments as data to &lt;code&gt;urlopen()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;query_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;query string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;encoded_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:8080/&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlopen_post.py&lt;br /&gt;Client: ('127.0.0.1', 54545)&lt;br /&gt;Path: /&lt;br /&gt;Form data:&lt;br /&gt;	q=query string&lt;br /&gt;	foo=bar&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;You can send any byte-string as data, if the server expects something other than url-encoded form arguments in the posted data.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Paths vs. URLs:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Some operating systems use different values for separating the components of paths in local files than URLs.  To make your code portable, you should use the functions &lt;code&gt;pathname2url()&lt;/code&gt; and &lt;code&gt;url2pathname()&lt;/code&gt; to convert back and forth.  Since I am working on a Mac, I have to explicitly import the Windows versions of the functions.  &lt;em&gt;Using the versions of the functions exported by urllib gives you the correct defaults for your platform, so you do not need to do this.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pathname2url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url2pathname&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;== Default ==&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/a/b/c&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Original:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;URL     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pathname2url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Path    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url2pathname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/d/e/f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nturl2path&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pathname2url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url2pathname&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;== Windows, without drive letter ==&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Original:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;URL     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pathname2url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Path    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url2pathname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/d/e/f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;== Windows, with drive letter ==&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Original:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;URL     :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pathname2url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Path    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url2pathname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/d/e/f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;There are two Windows examples, with and without the drive letter at the prefix of the path.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_pathnames.py&lt;br /&gt;== Default ==&lt;br /&gt;Original: /a/b/c&lt;br /&gt;URL     : /a/b/c&lt;br /&gt;Path    : /d/e/f&lt;br /&gt;&lt;br /&gt;== Windows, without drive letter ==&lt;br /&gt;Original: \a\b\c&lt;br /&gt;URL     : /a/b/c&lt;br /&gt;Path    : \d\e\f&lt;br /&gt;&lt;br /&gt;== Windows, with drive letter ==&lt;br /&gt;Original: C:\\a\b\c&lt;br /&gt;URL     : ///C|/a/b/c&lt;br /&gt;Path    : \d\e\f&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Simple Retrieval with Cache:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Retrieving data is a common operation, and &lt;code&gt;urllib&lt;/code&gt; includes the &lt;code&gt;urlretrieve()&lt;/code&gt; function so you don't have to write your own.  &lt;code&gt;urlretrieve()&lt;/code&gt; takes arguments for the URL, a temporary file to hold the data, a function to report on download progress, and data to pass if the URL refers to a form where data should be POSTed.  If no filename is given, &lt;code&gt;urlretrieve()&lt;/code&gt; creates a temporary file.  You can delete the file yourself, or treat the file as a cache and use &lt;code&gt;urlcleanup()&lt;/code&gt; to remove it.&lt;br /&gt;&lt;br /&gt;This example uses GET to retrieve some data from a web server:&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reporthook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blocks_read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;blocks_read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Connection opened&amp;#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total_size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="c"&gt;# Unknown size&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Read &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; blocks&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;blocks_read&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="n"&gt;amount_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blocks_read&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;block_size&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Read &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; blocks, or &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blocks_read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount_read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://blog.doughellmann.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reporthook&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reporthook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;File:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Headers:&amp;#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;File exists before cleanup:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlcleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;File still exists:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since the server does not return a &lt;tt&gt;Content-length&lt;/tt&gt; header, &lt;code&gt;urlretrieve()&lt;/code&gt; does not know how big the data should be, and passes -1 as the total_size argument to &lt;code&gt;reporthook()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python urllib_urlretrieve.py&lt;br /&gt;Connection opened&lt;br /&gt;Read 1 blocks&lt;br /&gt;Read 2 blocks&lt;br /&gt;Read 3 blocks&lt;br /&gt;Read 4 blocks&lt;br /&gt;Read 5 blocks&lt;br /&gt;Read 6 blocks&lt;br /&gt;Read 7 blocks&lt;br /&gt;Read 8 blocks&lt;br /&gt;Read 9 blocks&lt;br /&gt;Read 10 blocks&lt;br /&gt;Read 11 blocks&lt;br /&gt;Read 12 blocks&lt;br /&gt;Read 13 blocks&lt;br /&gt;Read 14 blocks&lt;br /&gt;Read 15 blocks&lt;br /&gt;Read 16 blocks&lt;br /&gt;Read 17 blocks&lt;br /&gt;Read 18 blocks&lt;br /&gt;Read 19 blocks&lt;br /&gt;&lt;br /&gt;File: /var/folders/9R/9R1t+tR02Raxzk+F71Q50U+++Uw/-Tmp-/tmp3HRpZP&lt;br /&gt;Headers:&lt;br /&gt;Content-Type: text/html; charset=UTF-8&lt;br /&gt;Last-Modified: Tue, 25 Mar 2008 23:09:10 GMT&lt;br /&gt;Cache-Control: max-age=0 private&lt;br /&gt;ETag: "904b02e0-c7ff-47f6-9f35-cc6de5d2a2e5"&lt;br /&gt;Server: GFE/1.3&lt;br /&gt;Date: Sun, 30 Mar 2008 17:36:48 GMT&lt;br /&gt;Connection: Close&lt;br /&gt;&lt;br /&gt;File exists before cleanup: True&lt;br /&gt;File still exists: False&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;URLopener:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;code&gt;urllib&lt;/code&gt; provides a URLopener base class, and FancyURLopener with default handling for the supported protocols.  If you find yourself needing to change their behavior, you are probably better off looking at the &lt;code&gt;urllib2&lt;/code&gt; module, added in Python 2.1 (to be covered in a future PyMOTW).&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.faqs.org/rfcs/rfc2616.html"&gt;RFC 2616&lt;/a&gt; - HTTP Specification&lt;br /&gt;&lt;a href="http://docs.python.org/lib/module-cgi.html"&gt;cgi&lt;/a&gt; - For decoding query arguments.&lt;br /&gt;&lt;a href="http://blog.doughellmann.com/2007/12/pymotw-basehttpserver.html"&gt;PyMOTW: BaseHTTPServer&lt;/a&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/module-urllib2.html"&gt;urllib2&lt;/a&gt; - For more complex URL access needs&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.47.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/03/pymotw-urllib.html' title='PyMOTW: urllib'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=4506459367018338034' title='3 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/4506459367018338034/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/4506459367018338034'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/4506459367018338034'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry><entry><id>tag:blogger.com,1999:blog-5440028356946346379.post-1746139113230710340</id><published>2008-03-23T10:11:00.000-04:00</published><updated>2008-03-23T09:19:06.891-04:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='python'/><category scheme='http://www.blogger.com/atom/ns#' term='PyMOTW'/><title type='text'>PyMOTW: collections</title><content type='html'>The &lt;code&gt;collections&lt;/code&gt; module includes container data types beyond the builtin types list and dict.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Module:&lt;/span&gt; &lt;a href="http://docs.python.org/lib/module-collections.html"&gt;collections&lt;/a&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Purpose:&lt;/span&gt; Container data types.&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Python Version:&lt;/span&gt; 2.4 and later&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;Deque:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;A double-ended queue, or "deque", supports adding and removing elements from either end.  The more commonly used stacks and queues are degenerate forms of deques, where the inputs and outputs are restricted to a single end.&lt;br /&gt;&lt;br /&gt;Since deques are a type of sequence container, they support some of the same operations that lists support, such as examining the contents with &lt;code&gt;__getitem__()&lt;/code&gt;, determining length, and removing elements from the middle by matching identity.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Deque:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Length:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Left end:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Right end:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;remove(c):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_deque.py&lt;br /&gt;Deque: deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])&lt;br /&gt;Length: 7&lt;br /&gt;Left end: a&lt;br /&gt;Right end: g&lt;br /&gt;remove(c): deque(['a', 'b', 'd', 'e', 'f', 'g'])&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;A deque can be populated from either end, termed "left" and "right" in the Python implementation.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Add to the right&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extend    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;append    :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="c"&gt;# Add to the left&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extendleft:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;appendleft:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Notice that &lt;code&gt;extendleft()&lt;/code&gt; iterates over its input and performs the equivalent of an &lt;code&gt;appendleft()&lt;/code&gt; for each item.  The end result is the deque contains the input sequence in reverse order.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_deque_populating.py&lt;br /&gt;extend    : deque(['a', 'b', 'c', 'd', 'e', 'f', 'g'])&lt;br /&gt;append    : deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])&lt;br /&gt;extendleft: deque(['g', 'f', 'e', 'd', 'c', 'b', 'a'])&lt;br /&gt;appendleft: deque(['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'])&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Similarly, the elements of the deque can be consumed from both or either end, depending on the algorithm you're applying.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;From the right:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;break&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;From the left:&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;break&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_deque_consuming.py&lt;br /&gt;From the right:&lt;br /&gt;g&lt;br /&gt;f&lt;br /&gt;e&lt;br /&gt;d&lt;br /&gt;c&lt;br /&gt;b&lt;br /&gt;a&lt;br /&gt;From the left:&lt;br /&gt;a&lt;br /&gt;b&lt;br /&gt;c&lt;br /&gt;d&lt;br /&gt;e&lt;br /&gt;f&lt;br /&gt;g&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Since deques are thread-safe, you can even consume the contents from both ends at the same time in separate threads.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;candle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nextSource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nextSource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;break&lt;/span&gt;&lt;br /&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%8s&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%8s&lt;/span&gt;&lt;span class="s"&gt; done&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_deque_both_ends.py&lt;br /&gt;    Left: 0&lt;br /&gt;   Right: 10&lt;br /&gt;    Left: 1&lt;br /&gt;   Right: 9&lt;br /&gt;    Left: 2&lt;br /&gt;   Right: 8&lt;br /&gt;    Left: 3&lt;br /&gt;   Right: 7&lt;br /&gt;    Left: 4&lt;br /&gt;   Right: 6&lt;br /&gt;    Left: 5&lt;br /&gt;   Right done&lt;br /&gt;    Left done&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Another useful capability of the deque is to &lt;em&gt;rotate&lt;/em&gt; it in either direction, to skip over some item(s).&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Normal        :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Right rotation:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Left rotation :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Rotating the deque to the right (using a positive rotation) takes items from the right end and moves them to the left end.  Rotating to the left (with a negative value) takes items from the left end and moves them to the right end.  It may help to visualize the items in the deque as being engraved along the edge of a dial.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_deque_rotate.py&lt;br /&gt;Normal        : deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;br /&gt;Right rotation: deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])&lt;br /&gt;Left rotation : deque([2, 3, 4, 5, 6, 7, 8, 9, 0, 1])&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;defaultdict:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The standard dictionary includes the method &lt;code&gt;setdefault()&lt;/code&gt; for retrieving a value and establishing a default if the value does not exist.  By contrast, &lt;code&gt;defaultdict&lt;/code&gt; lets you specify the default up front when it is initialized.&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_factory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;br /&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default value&amp;#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="syntax"&gt;&lt;pre&gt;&lt;br /&gt;$ python collections_defaultdict.py&lt;br /&gt;defaultdict(&amp;lt;function default_factory at 0x7ca70&amp;gt;, {'foo': 'bar'})&lt;br /&gt;bar&lt;br /&gt;default value&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This works well as long as it is appropriate for all keys to use that same default.  It can be especially useful if the default is a type used for aggregating or accumulating values, such as a list, set, or even integer.  The standard library documentation includes several examples of using defaultdict this way.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight:bold;"&gt;References:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://en.wikipedia.org/wiki/Deque"&gt;Wikipedia: Deque&lt;/a&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/deque-recipes.html"&gt;Deque Recipes&lt;/a&gt;&lt;br /&gt;&lt;a href="http://docs.python.org/lib/defaultdict-examples.html"&gt;defaultdict examples&lt;/a&gt;&lt;br /&gt;&lt;a href="http://jtauber.com/blog/2008/02/27/evolution_of_default_dictionaries_in_python/"&gt;James Tauber: Evolution of Default Dictionaries in Python&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/projects/PyMOTW/"&gt;Python Module of the Week Home&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.doughellmann.com/downloads/PyMOTW-1.46.tar.gz"&gt;Download Sample Code&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;!-- Technorati Tags Start --&gt;&lt;br /&gt;&lt;p&gt;Technorati Tags:&lt;br /&gt;&lt;a href="http://technorati.com/tag/python" rel="tag"&gt;python&lt;/a&gt;, &lt;a href="http://technorati.com/tag/PyMOTW" rel="tag"&gt;PyMOTW&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;!-- Technorati Tags End --&gt;</content><link rel='alternate' type='text/html' href='http://blog.doughellmann.com/2008/03/pymotw-collections.html' title='PyMOTW: collections'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=5440028356946346379&amp;postID=1746139113230710340' title='4 Comments'/><link rel='replies' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/1746139113230710340/comments/default' title='Post Comments'/><link rel='self' type='application/atom+xml' href='http://blog.doughellmann.com/feeds/posts/default/1746139113230710340'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5440028356946346379/posts/default/1746139113230710340'/><author><name>Doug Hellmann</name><uri>http://www.blogger.com/profile/01892352754222143463</uri><email>noreply@blogger.com</email></author></entry></feed>