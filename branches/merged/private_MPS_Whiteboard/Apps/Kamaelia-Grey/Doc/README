==============
Kamaelia: Grey
==============


What is Kamaelia: Grey ?
------------------------
It's a greylisting SMTP proxy. It doesn't replace your existing mail server,
but does sit between your mail server and the outside world.

What on Earth is Greylisting?
-----------------------------

Short version: If it's not seen a mail from you beforehand, it says no, come
back later. If it has, it says yes. It does this yes/no before accepting the
mail, so it's fast, effective and low on CPU usage.

Without apologies, here's a link to a non-techie description of greylisting:

    * http://yeoldeclue.com/cgi-bin/blog/blog.cgi?rm=viewpost&nodeid=1185836589

More detail on how Kamaelia: Grey works:

    * http://yeoldeclue.com/cgi-bin/blog/blog.cgi?rm=viewpost&nodeid=1190238560

Both of these are detailled later in this document.

How do I install it?
--------------------
After unpacking, as root, type:

    * python setup.py install

Under linux you then type:

    * chmod +x /etc/init.d/kamaeliagrey

The code was developed under linux, but is currently acting as a workhorse
under Mac OS X. As a result a startup script for Mac OS X is also included -
take a look in the setup.py file to see what you need to edit.

How do I configure it?
----------------------

Copy the default config file. This is installed as
      /etc/greylist.conf.dist

You could copy this, and make edits to the copy. This local copy should be
called this:
      /etc/greylist.conf

You can edit this freshly copied config file to your hearts.

The config file is self documenting and the documentation copied below. (See
'Config Options')

How does it work then? What MUST I configure to work
----------------------------------------------------
Suppose your existing mailserver:

    * listens on port 25
    * runs on host 192.168.2.25

You change your mailserver to listen on some other port instead - for
example on port 8025.

You then configure Kamaelia: Grey to listen on port 25 instead, on that host
You also configure Kamaelia: Grey to forward to your mail server

How do I configure that?
------------------------
Edit /etc/greylist.conf
Change the values smtp_ip & smtp_port
eg change them to:

    smtp_ip = 192.168.2.25

    smtp_port = 8025

Where can I get more information?
---------------------------------
More information will be added to this page over time.

    * http://kamaelia.sourceforge.net/KamaeliaGrey

There's a pretty presentation all about Kamaelia Grey here:
    * http://www.slideshare.net/kamaelian/kamaelia-grey

Discussion and feedback should be sent to:
    kamaelia@googlegroups.com

Or if you prefer the web interface:
    http://groups.google.com/group/kamaelia

Greylisting for Non-Techies
---------------------------

Greylisting is like magical glass for mystical flies. Real email is
delivered by real flies, whereas spam email is delivered by fake mystical
flies. The difference is that fake mystical flies don't bang their head
against the glass repeatedly when they hit a window to try and get through,
they just bounce of and don't try again. However real flies do bang their
head against the window repeatedly until they get through.

Now greylisting is like magical glass that can recognise real flies from
mystical flies because it can see that this sort of fly (since flies are all
numbered as we all know) is willing to bang its head against the glass
repeatedly. 

As a result the first time it sees a new sort of fly it tests the fly - does
it bang its head repeatedly to get through or does it give up. If it gives
up, it will never let that fly deliver its message.

However if it proves its worth as a real fly and retries, then the magical
glass will, from that day forward always allow that fly (they're all
numbered remember) through to deliver the real email it carries.

Now obviously, the first time a new fly is seen this also means the magical
glass has to check to see if the fly is a real fly or a mystical fly. This
takes a little while, so the first time this happens this can cause the
email the fly is delivering to be delayed, but does reduce the spam you
recieve, so its not all bad :-)

It should be noted that in the longer term, a new more intelligent spam fly
will emerge. In the meantime, greylisting is pretty good.


Config Options
--------------

These options are all from /etc/greylist.conf.

Core options that probably need changing
****************************************
port = 25
    # Port number that the greylist server listens on

servername = mail.example.org
    # Servername that we tell to people who connect to us

serverid = Kamaelia-SMTP 1.0
    # Server software we report to people connecting

smtp_ip = 192.168.0.25
    # IP Address of the real SMTP server that handles local delivery.
    # (We're just a proxy after all)

smtp_port = 8025
    # Port number the real SMTP server is listening on


Core options that you may want to change
****************************************

inactivity_timeout = 60
    # How long we allow a connection to be inactive before dropping the
    # connection

greylist_log = /var/log/greylist.log
    # Main logfile - you'll need to periodically check this when you hear of
    # a sender/network that doesn't resend from the same mail server.

greylist_debuglog = /var/log/greylist-debug.log
    # Logfile useful during debugging - you may want to change that
    # to /dev/null


Core options that take lists of stuff that you probably want to change
**********************************************************************

# List of IP addresses that are allowed to send to anywhere
# Put each IP address on its own line, indented
#
allowed_senders:
    127.0.0.1
    another_ip_address
    yet_another_ip_address

# List of subnets (IP prefixes to be exact) that are allowed to send to
# anywhere.
#
# Put each subnet/IP prefix on its own line, indented. For exmaple:
#
allowed_sender_nets:
    192.168.2
    10
    172.16


# List of domains for which we will _consider_ accepting email for
# Put each domain on its own line, indented
#
# This says "consider" because emails will still be greylisted on their way
# in :-)
#
allowed_domains:
    localdomain
    example.org


Config options that allow you to deal with problem sites
********************************************************

If you find you're not getting mail from some domains, it's probably because
they do some odd things with their mail servers. Facebook is one example
here. If this is the case, you'll need to uncomment and add whitelists for
these particular senders.

You'll spot these in you log file as always being deferred when you expect
them to be accepted.

For some you can just whitelist a standard triple

# Standard triples which always allows delivery to domains we consider
# accepting for.
#
# Format:
#    IP address, mail-from id, recipient id
#
# Uncomment the following lines.
#
#whitelisted_triples:
#     123.45.67.89 <sender@somedomain> <user@localdomain>

For others you may need to whitelist based on the name the sender claims
to be, a partial IP address prefix, (123.4 matches 123.40.1.1. as well as
123.4.1.1) and a specific user. If there's interest, this could be extended
to say "any user", but this hasn't been necessary for us.

# Some non-standard triples for which we always allow delivery to domains we
# consider accepting for.
#
# Specific format is:
#
#    claimed sender name, IP prefix, recipient
#
# (These may take simple wildcards at a later date)
#
# Uncomment the following lines!
#whitelisted_nonstandard_triples:
#    mx-out.wellknownsitebook.com 204.15.20 <user@localdomain>
#    mx-out.wellknownsitebook.com 204.15.20 <user2@localdomain>
#    fallbackmx-out.wellknownsitebook.com 204.15.20 <user@localdomain>
#    fallbackmx-out.wellknownsitebook.com 204.15.20 <user2@localdomain>




More technical background on Kamaelia Grey
------------------------------------------

How does it work? Well at it's core, when someone connects, a mail handler
is create, which is managed by this main loop:

    def main(self):
        brokenClient = False
        self.handleConnect()
        self.gettingdata = False
        self.client_connected = True
        self.breakConnection = False

        while (not self.gettingdata) and (not self.breakConnection):
            yield WaitComplete(self.getline(), tag="_getline1")
            try:
                command = self.line.split()
            except AttributeError:
                brokenClient = True
                break
            self.handleCommand(command)
        if not brokenClient:
            if (not self.breakConnection):
                EndOfMessage = False
                self.netPrint('354 Enter message, ending with "." on a line
                by itself')
                while not EndOfMessage:
                    yield WaitComplete(self.getline(), tag="getline2")
                    if self.lastline():
                        EndOfMessage = self.endOfMessage()
                self.netPrint("250 OK id-deferred")

        self.send(producerFinished(),"signal")
        if not brokenClient:
            yield WaitComplete(self.handleDisconnect(),tag="_handleDisconnect")
        self.logResult()

Handle command then results in a bunch of SMTP commands being dealt with,
and dispatched:

    def handleCommand(self,command):
        if len(command) < 1:
            self.netPrint("500 Sorry we don't like broken mailers")
            self.breakConnection = True
            return
        if command[0] == "HELO": return self.handleHelo(command) 
        if command[0] == "EHLO": return self.handleEhlo(command) 
        if command[0] == "MAIL": return self.handleMail(command) 
        if command[0] == "RCPT": return self.handleRcpt(command) 
        if command[0] == "DATA": return self.handleData(command) 
        if command[0] == "QUIT": return self.handleQuit(command) 
        if command[0] == "RSET": return self.handleRset(command) 
        if command[0] == "NOOP": return self.handleNoop(command) 
        if command[0] == "VRFY": return self.handleVrfy(command) 
        if command[0] == "HELP": return self.handleHelp(command)
        self.netPrint("500 Sorry we don't like broken mailers")
        self.breakConnection = True

In practical terms that MailHandler is subclassed by a ConcreteMailHandler
that effectively enforces the normal sequence of commands of SMTP. However
part of it has a core hook when we receive the DATA command:

    def handleData(self, command):
        if not self.seenRcpt:
            self.error("503 valid RCPT command must precede DATA")
            return

        if self.shouldWeAcceptMail():
            self.acceptMail()
        else:
            self.deferMail()

Clearly the main hook here is "shouldWeAcceptMail" which defaults in
ConcreteMailHandler to returning False.

In the actual class we instantiate to handle connections - GreyListingPolicy
which subclasses ConcreteMailHandler - we customise shouldWeAcceptMail as
follows:

    def shouldWeAcceptMail(self):
        # Allowed hosts can always send to anywhere through us
        if self.sentFromAllowedIPAddress():
            return True

        # People on trusted networks can always do the same
        if self.sentFromAllowedNetwork():
            return True

        # Anyone can always send to hosts we own
        if self.sentToADomainWeForwardFor():
            try:
                for recipient in self.recipients:
                    if self.whiteListed(recipient):
                        return True
                    if not self.isGreylisted(recipient):
                        return False
            except Exception, e:
                print "Whoops", e
            return True

        # print "NOT ALLOWED TO SEND, no valid forwarding"
        return False

Finally the actual core code for handling greylisting looks like this:

    def isGreylisted(self, recipient):
        max_grey = 3000000
        too_soon = 180
        min_defer_time = 3600
        max_defer_time = 25000

        IP = self.peer
        sender = self.sender

        def _isGreylisted(greylist, seen, IP,sender,recipient):

        # If greylisted, and not been there too long, allow through

            if greylist.get(triplet,None) is not None:
                greytime = float(greylist[triplet])
                if (time.time() - greytime) > max_grey:
                    del greylist[triplet]
                    try:
                        del seen[triplet]
                    except KeyError:
                        # We don't care if it's already gone
                        pass
                    print "REFUSED: grey too long"
                else:
                    print "ACCEPTED: already grey (have reset greytime)" ,
                    greylist[triplet] = str(time.time())

                    return True

        # If not seen this triplet before, defer and note triplet

            if seen.get( triplet, None) is None:
                seen[triplet] = str(time.time())
                print "REFUSED: Not seen before" ,
                return False

        # If triplet retrying waaay too soon, reset their timer & defer

            last_tried = float(seen[triplet])
            if (time.time() - last_tried) < too_soon:
                seen[triplet] = str(time.time())
                print "REFUSED: Retrying waaay too soon so resetting you!" ,
                return False
       
        # If triplet retrying too soon generally speaking just defer

            if (time.time() - last_tried) < min_defer_time :
                print "REFUSED: Retrying too soon, deferring" ,
                return False
       
        # If triplet hasn't been seen in aaaages, defer

            if (time.time() - last_tried) > max_defer_time :
                seen[triplet] = str(time.time())
                print "REFUSED: Retrying too late, sorry - reseting you!" ,
                return False
       
        # Otherwise, allow through & greylist them

            print "ACCEPTED: Now added to greylist!" ,
            greylist[triplet] = str(time.time())
            return True

        greylist = anydbm.open("greylisted.dbm","c")
        seen = anydbm.open("attempters.dbm","c")
        triplet = repr((IP,sender,recipient))
        result = _isGreylisted(greylist, seen, IP,sender,recipient)
        seen.close()
        greylist.close()
        return result

All of which is pretty compact, and I suspect is pretty OK for people to
follow. The rest of the code in the file is really about dealing with errors
and abuse of the SMTP code. (The reaction to which is to disconnect telling
the sender to retry later)

For interest purposes, the actual Kamaelia component that handles the
greylisting looks like this:

class GreylistServer(ServerCore):
    logfile = config["greylist_log"]
    debuglogfile = config["greylist_debuglog"]
    socketOptions=(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    port = config["port"]

    class TCPS(TCPServer):
        CSA = NoActivityTimeout(ConnectedSocketAdapter,
                                timeout=config["inactivity_timeout"],
                                 debug=False)

    class protocol(GreyListingPolicy):
        servername = config["servername"]
        serverid = config["serverid"]
        smtp_ip = config["smtp_ip"]
        smtp_port = config["smtp_port"]
        allowed_senders = config["allowed_senders"]
        allowed_sender_nets = config["allowed_sender_nets"]
        allowed_domains = config["allowed_domains"]
        whitelisted_triples = config["whitelisted_triples"]
        whitelisted_nonstandard_triples =
        config["whitelisted_nonstandard_triples"]

As you can see it's just a bunch of components pulled in with some specific
overrides in various places.

Author
------
Michael Sparks

Thanks To
---------
The Kamaelia Community :-)

License
-------
Mozilla Tri License (as usual)

Website
-------
    * http://edit.kamaelia.org/KamaeliaGrey


