#
# Usage: Modeller.py <filename>
#
# The parse expects a file that looks somewhat like this:
#
# entity missionagent
# entity person(missionagent)
# entity team(missionagent)
#
# entity missionitem:
#     simpleattributes visible
#
# entity activemission
#
# # Now the relationships
# #
# relation participatesin(activemission,missionagent)
# relation creates(missionagent,missionitem)
#
#
# The parser generates an intermediate model that look like this:
#
#    model = [
#        ["entity", { "name" : "missionagent" }],
#        ["entity", { "name" : "person",
#                     "subtype" : "missionagent",
#                   }],
#        ["entity", { "name" : "team",
#                     "subtype" : "missionagent",
#                   }],
#        ["entity", { "name" : "missionitem",
#                     "simpleattributes" : ["visible"],
#                   }
#        ],
#        ["entity", { "name" : "activemission" }],
#
#        ["relation", { "name" : "participatesin",
#                       "entities" : [ "activemission", "missionagent"],
#                     }],
#        ["relation", { "name" : "creates",
#                       "entities" : [ "missionagent", "missionitem"],
#                     }],
#     ]
#
# The next stage then emits data suitable for the ER Visualiser, which
# looks something like this:
#
# ADD NODE missionagent missionagent auto entity
# ADD NODE person person auto entity
# ADD NODE ISA1 isa auto isa
# ADD NODE team team auto entity
# ADD NODE missionitem missionitem auto entity
# ADD NODE visible visible auto attribute
# ADD NODE activemission activemission auto entity
# ADD NODE participatesin participatesin auto relation
# ADD NODE creates creates auto relation
# ADD LINK ISA1 missionagent
# ADD LINK person ISA1
# ADD LINK team ISA1
# ADD LINK missionitem visible
# ADD LINK activemission participatesin
# ADD LINK missionagent participatesin
# ADD LINK missionagent creates
# ADD LINK missionitem creates
#
