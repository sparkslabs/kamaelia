Introspecting a Running Kamaelia Server

A useful tool for understanding what's happening inside a Kamaelia system is to use the AxonVisualiser. Since Kamaelia components only communicate via inboxes and outboxes, and also make that information (deliberately) easily accessible for introspection, this allows you to look inside running systems.

Suppose we want to build a simple chat system, and want to see what's happening inside.

Since the focus of this tutorial is to talk about the introspector, we'll build this up slowly, initially with a stub - where what you type on the console is echoed back to you, then introspect that, and then turn that into a trial/simplistic chat system.

Also, please note - the AxonVisualiser isn't perfect but it is useful.

OK, first of all, here's our basic command line tool that echoes back anything we type.

    from Kamaelia.Chassis.Pipeline import Pipeline
    from Kamaelia.Util.Console import *

    Pipeline(
        ConsoleReader(),
        ConsoleEchoer(),
    ).run()

This isn't particularly interesting, since when we run this and type random stuff to it we get this:
    $ ./CommandLineEchoExample.py
    >>> hello
    >>> hello
    world
    >>> world
    game
    >>> game
    over
    >>> over

Now, to Introspect and Visualise this, we need two things 1) to run an AxonVisualiser server in the background 2) To add an Introspector component to our CommandLineEchoExample that connects to this server and sends it the introspection information.

Let's modify the program we're writing first. We need to import the Introspector, and the TCP Client, and then create a pipeline from one to the other which connects to our AxonVisualiser on a given port. In this case we've chosen port 1600.

    from Kamaelia.Chassis.Pipeline import Pipeline
    from Kamaelia.Util.Console import *

    # ------- START OF ADDITION
    from Kamaelia.Util.Introspector import Introspector
    from Kamaelia.Internet.TCPClient import TCPClient

    Pipeline(
        Introspector(),
        TCPClient("127.0.0.1", 1600),
    ).activate()
    # ------- END OF ADDITION

    Pipeline(
        ConsoleReader(),
        ConsoleEchoer(),
    ).run()

As you can see above those additions are made pretty literally.

Now, before we run this, we need to run the AxonVisualiser in the background. This sits inside the Kamaelia/Tools directory in the distribution:

    ~/code.google/kamaelia/trunk/Code/Python/Kamaelia$ ls
    CHANGELOG  Docs/  Examples/  Kamaelia/  README  Test/  Tools/  MANIFEST.in  setup.py

    ~/code.google/kamaelia/trunk/Code/Python/Kamaelia$ cd Tools
    ~/code.google/kamaelia/trunk/Code/Python/Kamaelia/Tools$ ls
    DocGen/         VideoShotChangeDetector/  axonshell.py       Compose.py  VideoPlayer.py
    VideoReframer/  kamaelia_logo.png         AxonVisualiser.py  Show.py     WhatIsShow.show/

We want to run it, listening on port 1600:

    $ ./AxonVisualiser.py --port=1600
    
A window appears thus:
    1.png

We can then run our Introspecting Command Line Echo Example in another shell, and see the pretty result:
    
    $ ./IntrospectingCommandLineEchoExample.py
    2.png
    
In the above picture, you'll see two distinct groups of components. On the left, you'll see 3 components:
    Pipeline_10
    ConsoleReader_8
    ConsoleEchoer_9
    
These 3 relate to the code:
    Pipeline(
        ConsoleReader(),
        ConsoleEchoer(),
    ).run()

On the right hand side you'll see a collection of 5 components:
    Pipeline_7
    Introspector_5
    TCPClient_6
    ConnectedSocketAdapter_13
    Selector_12

These relate to the code:
    Pipeline(
        Introspector(),
        TCPClient("127.0.0.1", 1600),
    ).activate()

The reason why the ConnectedSocketAdapter (CSA) and Selector components exist is because TCPClient forced them into existance. The connected socket adapter is the actual component that wraps the actual TCP socket. The selector is a component that wraps a standard "select" call and wakes the connected socket adapter when there's work that needs doing. The TCPClient component therefore just acts as a happy go between that handles connection set up and tear down.

Now, it would be nice if instead of showing a *flat* diagram, that the visualiser showed things nested in the same way as the code - that is (for example) double clicking on a pipeline showed you what was inside - but it doesn't.

That's why this code...
    Pipeline(
        ConsoleReader(),
        ConsoleEchoer(),
    ).run()

... looks like a triangle when visualised rather than like a pipeline. In fact, if you look at the arrows coming in/going out of the pipeline you'll see that the links made are as follows:

    Pipeline_10 inbox  --> ConsoleReader_8 inbox (and hence orange due to being pass through)
    Pipeline_10 control --> ConsoleReader_8 control (and hence orange due to being pass through)
    ConsoleReader_8 outbox --> ConsoleEchoer_9 inbox
    ConsoleReader_8 signal --> ConsoleEchoer_9 control
    ConsoleEchoer_9 outbox --> Pipeline_10 outbox (and hence orange due to being pass through)
    ConsoleEchoer_9 signal --> Pipeline_10 signal (and hence orange due to being pass through)

This is exactly what you'd expect the links to be.

So, whilst the visualisation may not be exactly what you expected, it has the benefit of showing you everything that's going on. The downsides are that this may not be expected and that for large scale systems it's less practical.

OK, moving on. Let's turn this into a server that simply echoes back everything we type at it. This is simple enough - we replace this code:

    Pipeline(
        ConsoleReader(),
        ConsoleEchoer(),
    ).run()

With this code:

    from Kamaelia.Protocol.EchoProtocol import EchoProtocol
    from Kamaelia.Chassis.ConnectedServer import FastRestartServer
    
    FastRestartServer(protocol=EchoProtocol, port=1500).run()

If we run this by itself first of all:
    $ ./EchoServer.py

We can indeed connect to it and see it works:
    $ telnet 127.0.0.1 1500
    Trying 127.0.0.1...
    Connected to 127.0.0.1.
    Escape character is '^]'.
    sdfsdf
    sdfsdf
    sdsdfsdf
    sdsdfsdf
    ^]
    telnet> close
    Connection closed.

As before we can embed the introspection code into this server as follows:

    from Kamaelia.Protocol.EchoProtocol import EchoProtocol
    from Kamaelia.Chassis.ConnectedServer import FastRestartServer

    # ------- START OF ADDITION
    from Kamaelia.Chassis.Pipeline import Pipeline
    from Kamaelia.Util.Introspector import Introspector
    from Kamaelia.Internet.TCPClient import TCPClient

    Pipeline(
        Introspector(),
        TCPClient("127.0.0.1", 1600),
    ).activate()
    # ------- END OF ADDITION

    FastRestartServer(protocol=EchoProtocol, port=1500).run()

Now, once again we start the AxonVisualiser first:

    $ ./AxonVisualiser.py --port=1600

An empty visualiser then appears waiting for a connection.

We then start our IntrospectingEchoServer in another shell:

    $ ./IntrospectingEchoServer.py

... and the visualiser updates as follows:

    3.png

You'll note from running this that you can drag components and inboxes around, so I've done this here to show that the internal structure of the visualiser has remained the same. In particular, on the right hand side, you'll see the following components as before:

    Pipeline_7
    Introspector_5
    TCPClient_6
    ConnectedSocketAdapter_12
    Selector_10

(The numbers are added to ensure uniqueness when introspecting, and will often remain the same within a program, but aren't guaranteed to do so. They're much like a process id)

The left handside again shows the code we're introspecting. In this case it shows two components:
    FastRestartServer_8
    TCPServer_8

As with TCPClient, FastRestartServer creates the TCPServer component behind the scenes. TCPServer fundamentally wraps the following behaviour:
    * Create a TCP socket to listen on.
    * Wait for connections
    * When a connection happens
        * Accept the connection
        * Create a ConnectedSocketAdapter to handle the connection
        * Send the ConnectedSocketAdapter to whomever is managing the TCPServer ie out the TCPServer's protocolHandlerSignal outbox (which you can see on the diagram)
    * Go back to waiting for connections.

Since a Selector component can handle waking up the TCPServer component, the TCPServer component looks for a Selector service, and wires itself into it. As a result, this is why the TCPServer component has links to the Selector component on the diagram. (This avoids the need for threads, or multiple selectors)

So we now have a server waiting for a connection, and we're looking inside it as it runs.

Let's see what happens when we now connect to the server:
(before we send it any data)

    $ telnet 127.0.0.1 1500
    Trying 127.0.0.1...
    Connected to 127.0.0.1.
    Escape character is '^]'.

Now when we do this, the introspector obviously picks this up, and sends the information to the visualiser, which itself updates accordingly:

    4.png

You'll note two new additions to the diagram:

    EchoProtocol_15
    ConnectedSocketAdapter_14
    
As you can see, as noted, when the TCPServer accepted the connection, it created a ConnectedSocketAdapter. It then sent (effectively) this to the FastRestartServer for it to figure out what to do. In the meantime, the ConnectedSocketAdapter wired itself into the Selector so that it can read and write to the network connection when appropriate.

When the FastRestartServer receives the ConnectedSocketAdapter it needs to create a protocol handler to talk to the connected socket adapter. Remember that our server code looks like this:

    FastRestartServer(protocol=EchoProtocol, port=1500).run()

As a result it calls the callback provided - in this case EchoProtocol() which results in an EchoProtocol component being created - specifically EchoProtocol_15 in this case, which it wires into ConnectedSocketAdapter_14 .

In particular the FastRestartServer creates the following links between them that you can see on the diagram:

    ConnectedSocketAdapter_14 outbox -> EchoProtocol_15 inbox 
    EchoProtocol_15 outbox --> ConnectedSocketAdapter_14 inbox
    EchoProtocol_15 signal --> ConnectedSocketAdapter_14 control

ie stuff that the ConnectedSocketAdapter receives from the socket ends up on the EchoProtocol's "inbox", and every thing the EchoProtocol sends out its "outbox" gets sent to the network connection. (ConnectedSocketAdapter handles sending and receiving data to/from TCP sockets after all)

If the client disconnects, then the ConnectedSocketAdapter sends out shutdown message its signal outbox, which the FastRestartServer receives, and passes on to the EchoProtocol (as well as releasing various links etc) and both the ConnectedSocketAdapter and EchoProtocol components shutdown.

Not only that, the Introspector notices, and passes on appropriate messages to the server, and you see them disappear from the visualisation:

    5.png

(Incidentally, whilst writing this tutorial, I noted that the EchoProtocol *wasn't* disappearing as expected, which suggested there was a latent bug in EchoProtocol. The rewritten version on /trunk now does not have this bug. If your EchoProtocol *doesn't* disappear, you may want to update your version of Kamaelia)

At this stage it's useful to show what happens when several clients connect and stay connected, one after another. In the snapshots below, I've pushed the visualisation of the Introspector connecting to the visualiser off the side of the screen.

Waiting for connections
    6.png

First one client connects:
    7.png
    
Then another:
    8.png
    
And another:
    9.png
    
And another:
    10.png

And watching clients disconnec - first client 1:
    11.png

Then client 2:
    12.png

Then client 3:
    13.png

Then client 4:
    14.png

It should be clear from these what's going on inside the server:
    * First the FastRestartServer component is started.
    * FastRestartServer starts a TCPServer component.
    * The TCPServer component starts the Selector, and waits for something to do
    
    Then for each connection:
        * A client connects, and the Selector tells the TCPServer
          there's a connection waiting
        * The TCP Server accepts the connection, creates a
          ConnectedSocketAdapter to handle it, and tells the
          FastRestartServer that there's a new connection, passing
          it the ConnectedSocketAdapter .
          
        * Meanwhile the ConnectedSocketAdapter makes links with the
          Selector to be woken up when there's something to do.
                                                                     |
        * The FastRestartServer takes the ConnectedSocketAdapter,
          creates an EchoProtocol component to handle it, wires things
          up and goes back to sleep.

    For each client connection:
        * The opposite happens, ConnectedSocketAdapters and EchoProtocols
          are unwired and exit.

Not only that in Kamaelia's case this isn't metaphorical nor architectural
diagrams that bear little relation to the code, this is precisely the
way the components are wired together in practice.













